
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cliente;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return tabla_simbolos_json.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\021\000\002\003" +
    "\011\000\002\003\006\000\002\007\005\000\002\007\003" +
    "\000\002\010\005\000\002\004\007\000\002\004\006\000" +
    "\002\011\005\000\002\011\003\000\002\012\023\000\002" +
    "\005\007\000\002\005\006\000\002\013\005\000\002\013" +
    "\003\000\002\014\017\000\002\006\007\000\002\006\006" +
    "\000\002\015\005\000\002\015\003\000\002\016\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\004\004\005\001\002\000\004\002\140\001" +
    "\002\000\004\011\006\001\002\000\004\025\007\001\002" +
    "\000\004\006\010\001\002\000\004\023\011\001\002\000" +
    "\004\007\012\001\002\000\004\010\013\001\002\000\004" +
    "\012\015\001\002\000\004\010\033\001\002\000\004\025" +
    "\016\001\002\000\004\006\017\001\002\000\006\004\021" +
    "\007\020\001\002\000\004\010\ufffe\001\002\000\004\013" +
    "\023\001\002\000\004\005\031\001\002\000\004\025\027" +
    "\001\002\000\006\005\ufffc\010\025\001\002\000\004\013" +
    "\023\001\002\000\004\005\ufffd\001\002\000\004\024\030" +
    "\001\002\000\006\005\ufffb\010\ufffb\001\002\000\004\007" +
    "\032\001\002\000\004\010\uffff\001\002\000\004\014\034" +
    "\001\002\000\004\025\107\001\002\000\004\010\036\001" +
    "\002\000\004\020\037\001\002\000\004\025\062\001\002" +
    "\000\004\010\041\001\002\000\004\022\042\001\002\000" +
    "\004\025\045\001\002\000\004\005\044\001\002\000\004" +
    "\002\000\001\002\000\004\006\046\001\002\000\006\004" +
    "\052\007\051\001\002\000\004\007\061\001\002\000\006" +
    "\007\uffed\010\057\001\002\000\004\005\uffef\001\002\000" +
    "\004\026\053\001\002\000\004\025\054\001\002\000\004" +
    "\024\055\001\002\000\004\005\056\001\002\000\006\007" +
    "\uffec\010\uffec\001\002\000\004\004\052\001\002\000\004" +
    "\007\uffee\001\002\000\004\005\ufff0\001\002\000\004\006" +
    "\063\001\002\000\006\004\067\007\066\001\002\000\006" +
    "\007\ufff2\010\105\001\002\000\004\007\104\001\002\000" +
    "\004\010\ufff4\001\002\000\004\013\070\001\002\000\004" +
    "\025\071\001\002\000\004\024\072\001\002\000\004\010" +
    "\073\001\002\000\004\015\074\001\002\000\004\025\075" +
    "\001\002\000\004\024\076\001\002\000\004\010\077\001" +
    "\002\000\004\021\100\001\002\000\004\025\101\001\002" +
    "\000\004\024\102\001\002\000\004\005\103\001\002\000" +
    "\006\007\ufff1\010\ufff1\001\002\000\004\010\ufff5\001\002" +
    "\000\004\004\067\001\002\000\004\007\ufff3\001\002\000" +
    "\004\006\110\001\002\000\006\004\113\007\112\001\002" +
    "\000\004\007\137\001\002\000\004\010\ufff9\001\002\000" +
    "\004\013\117\001\002\000\006\007\ufff7\010\115\001\002" +
    "\000\004\004\113\001\002\000\004\007\ufff8\001\002\000" +
    "\004\025\120\001\002\000\004\024\121\001\002\000\004" +
    "\010\122\001\002\000\004\015\123\001\002\000\004\025" +
    "\124\001\002\000\004\024\125\001\002\000\004\010\126" +
    "\001\002\000\004\016\127\001\002\000\004\025\130\001" +
    "\002\000\004\024\131\001\002\000\004\010\132\001\002" +
    "\000\004\017\133\001\002\000\004\025\134\001\002\000" +
    "\004\024\135\001\002\000\004\005\136\001\002\000\006" +
    "\007\ufff6\010\ufff6\001\002\000\004\010\ufffa\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\021\010\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\025\010\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\046\016\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\057\016\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\064\014\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\105\014\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\110\012\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\115\012\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/* *Metodo que se llama automaticamente ante algun error sintactico */
public void syntax_error(Symbol s){
    System.out.println("Error en la linea: " + (s.right + 1) + ", columna: " + (s.left + 1) + ". Identificador " + s.value + " no reconocido");
}

/* *Metodo que se llama en el momento que ya no es posible una recuperacion de errores */
public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error en la linea: " + (s.right + 1) + ", columna: " + (s.left + 1) + ". Identificador " + s.value + " no reconocido");
}

Result resultado = new Result();

public Result getReultado(){
    return resultado;
}

public void LimpiarResult(){
    resultado = new Result();
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {


public void AgregarClases(String clase){
    if(!clase.equals("")){
        ResultClases auxclase = new ResultClases();
        auxclase.setNombre(clase);
        resultado.AgregarClases(auxclase);
    }
}

public void AgregarVariables(String variable){
    if(!variable.equals("")){
        String aux[] = variable.split("-");
        for(int i = 0; i < aux.length; i++){
            aux[i] = aux[i].replace("\"", "");
        }
        ResultVariables var = new ResultVariables();
        var.setNombre(aux[0]);
        var.setTipo(aux[1]);
        var.setFuncion(aux[2]);
        var.setClase(aux[3]);
        resultado.AgregarVariables(var);
    }
}

public void AgregarMetodos(String metodo){
    if(!metodo.equals("")){
        String aux[] = metodo.split("-");
        for(int i = 0; i < aux.length; i++){
            aux[i] = aux[i].replace("\"", "");
        }
        ResultMetodos metodos = new ResultMetodos();
        metodos.setNombre(aux[0]);
        metodos.setTipo(aux[1]);
        metodos.setParametros(Integer.valueOf(aux[2]));
        resultado.AgregarMetodos(metodos);
    }
}

public void AgregarComentarios(String comentario){
    if(!comentario.equals("")){
        ResultComentarios comen = new ResultComentarios();
        comen.setTexto(comentario);
        resultado.AgregarComentarios(comen);
    }
}

  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= tllaveabrir tscore tdospuntos tcorcheteabrir tnumero tcorchetecerrar tcoma CLASES tcoma VARIABLES tcoma METODOS tcoma COMENTARIOS tllavecerrar 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int clasesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int clasesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String clases = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String variables = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int metodosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int metodosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String metodos = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int comentariosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int comentariosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String comentarios = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
            System.out.println("Score: " + num);
            System.out.println("Clases: " + clases);
            System.out.println("Variables: " + variables);
            System.out.println("Metodos: " + metodos);
            System.out.println("Comentarios " + comentarios);
            resultado.setScore(Double.valueOf(num));
            String aux[] = clases.split(",");
            for(int i = 0; i < aux.length; i++){
                aux[i] = aux[i].replace("\"", "");
                AgregarClases(aux[i]);
            }

            aux = variables.split(",");
            for(int i = 0; i < aux.length; i++){
                AgregarVariables(aux[i]);
            }

            aux = metodos.split(",");
            for(int i = 0; i < aux.length; i++){
                AgregarMetodos(aux[i]);
            }

            aux = comentarios.split(",");
            for(int i = 0; i < aux.length; i++){
                aux[i] = aux[i].replace("\"", "");
                AgregarComentarios(aux[i]);
            }
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASES ::= tclases tdospuntos tcorcheteabrir tllaveabrir LCLASES tllavecerrar tcorchetecerrar 
            {
              String RESULT =null;
		int clasesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int clasesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String clases = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
            RESULT = clases;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CLASES",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASES ::= tclases tdospuntos tcorcheteabrir tcorchetecerrar 
            {
              String RESULT =null;
		
            System.out.println("Entro a clases");
            RESULT = "";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CLASES",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LCLASES ::= CLASE tcoma LCLASES 
            {
              String RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int lclaseleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lclaseright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String lclase = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            RESULT = clase + "," + lclase;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LCLASES",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LCLASES ::= CLASE 
            {
              String RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            RESULT = clase;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LCLASES",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CLASE ::= tnombre tdospuntos tcadena 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            RESULT = cadena;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARIABLES ::= tvariables tdospuntos tcorcheteabrir LVARIABLES tcorchetecerrar 
            {
              String RESULT =null;
		int lvariablesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lvariablesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String lvariables = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                RESULT = lvariables;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLES ::= tvariables tdospuntos tcorcheteabrir tcorchetecerrar 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LVARIABLES ::= VARIABLE tcoma LVARIABLES 
            {
              String RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int lvariablesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lvariablesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String lvariables = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = variable + "," + lvariables;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LVARIABLES",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LVARIABLES ::= VARIABLE 
            {
              String RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = variable;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LVARIABLES",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLE ::= tllaveabrir tnombre tdospuntos tcadena tcoma ttipo tdospuntos tcadena tcoma tfuncion tdospuntos tcadena tcoma tclase tdospuntos tcadena tllavecerrar 
            {
              String RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-13)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-13)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-13)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String funcion = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
            RESULT = nombre + "-" + tipo + "-" + funcion + "-" + clase;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-16)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // METODOS ::= tmetodos tdospuntos tcorcheteabrir LMETODOS tcorchetecerrar 
            {
              String RESULT =null;
		int metodosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int metodosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String metodos = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
            RESULT = metodos;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // METODOS ::= tmetodos tdospuntos tcorcheteabrir tcorchetecerrar 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LMETODOS ::= METODO tcoma LMETODOS 
            {
              String RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String metodo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int lmetodoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lmetodoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String lmetodo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            RESULT = metodo + "," + lmetodo;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LMETODOS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LMETODOS ::= METODO 
            {
              String RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String metodo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            RESULT = metodo;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LMETODOS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // METODO ::= tllaveabrir tnombre tdospuntos tcadena tcoma ttipo tdospuntos tcadena tcoma tparametros tdospuntos tcadena tllavecerrar 
            {
              String RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
            RESULT = nombre + "-" + tipo + "-" + parametros;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMENTARIOS ::= tcomentarios tdospuntos tcorcheteabrir LCOMENTARIOS tcorchetecerrar 
            {
              String RESULT =null;
		int comentariosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int comentariosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String comentarios = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                RESULT = comentarios;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMENTARIOS ::= tcomentarios tdospuntos tcorcheteabrir tcorchetecerrar 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LCOMENTARIOS ::= COMENTARIO tcoma LCOMENTARIOS 
            {
              String RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String comentario = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int lcomentarioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lcomentarioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String lcomentario = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = comentario + "," + lcomentario;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LCOMENTARIOS",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LCOMENTARIOS ::= COMENTARIO 
            {
              String RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String comentario = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = comentario;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LCOMENTARIOS",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COMENTARIO ::= tllaveabrir ttexto tdospuntos tcadena tllavecerrar 
            {
              String RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String comentario = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                RESULT = comentario;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
