/* The following code was generated by JFlex 1.4.3 on 2/04/18 03:48 AM */

package cliente;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/04/18 03:48 AM from the specification file
 * <tt>cplexico.jflex</tt>
 */
public class lexico_cpreport implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int COMENTARIOMULTI = 4;
  public static final int CPREPORT = 8;
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 6;
  public static final int CADENAHTML = 12;
  public static final int ETIQUETA = 10;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 45, 47,  0, 45, 45,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    46, 36, 53, 52, 49, 33, 37, 42, 34, 35, 32, 29, 50, 30, 24, 31, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 52, 27,  2, 28,  1, 52, 
    52,  8, 10, 17,  9,  7, 21, 19,  3, 13, 44, 44,  6,  5, 20, 11, 
    39, 44, 14, 22,  4, 23, 15, 44, 18, 12, 44, 25, 43, 26,  0, 41, 
     0,  8, 10, 17,  9,  7, 21, 19, 48, 13, 44, 44,  6,  5, 20, 11, 
    16, 44, 14, 22,  4, 23, 15, 44, 18, 12, 44,  0, 38,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 51,  0,  0,  0,  0,  0, 
     0, 41,  0,  0,  0, 51,  0,  0,  0,  0, 51,  0,  0,  0,  0,  0, 
    51, 51, 51, 44, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 
    51, 51, 51, 51, 51, 51, 51,  0, 51, 51, 51, 51, 51, 51, 51, 51, 
    51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 
    51, 51, 51, 51, 51, 51, 51,  0, 51, 51, 51, 51, 51, 51, 51, 51
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\0\1\11\1\12\1\13\1\14\14\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\12\1\15\1\33"+
    "\2\12\1\34\1\35\1\36\5\12\1\37\2\12\1\40"+
    "\1\41\1\42\1\43\1\12\1\44\1\45\1\3\1\46"+
    "\1\47\1\50\1\51\1\52\22\15\1\53\1\54\1\55"+
    "\1\56\1\57\2\0\1\60\2\0\1\61\1\62\2\0"+
    "\1\63\1\0\1\64\3\0\1\65\3\0\1\66\1\4"+
    "\4\15\1\67\15\15\1\33\1\70\6\0\1\71\3\0"+
    "\1\42\1\72\1\73\6\15\1\74\10\15\1\75\1\76"+
    "\4\0\1\77\1\0\1\100\5\15\1\101\1\102\2\15"+
    "\1\103\1\104\2\15\1\105\1\0\1\106\1\107\1\110"+
    "\1\111\2\15\1\112\2\15\1\113\1\15\1\114\1\15"+
    "\1\115\1\0\1\116\1\117\3\15\1\120\1\0\2\15"+
    "\1\121\1\0\1\122\1\15\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u017a\0\u01b0\0\u01e6\0\u017a\0\u021c\0\u017a\0\u017a\0\u017a"+
    "\0\u0252\0\u017a\0\u017a\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360"+
    "\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510"+
    "\0\u0546\0\u017a\0\u017a\0\u017a\0\u017a\0\u057c\0\u017a\0\u05b2"+
    "\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u017a\0\u017a\0\u017a\0\u072c\0\u0762"+
    "\0\u0798\0\u07ce\0\u0804\0\u017a\0\u083a\0\u0870\0\u017a\0\u017a"+
    "\0\u08a6\0\u017a\0\u08dc\0\u017a\0\u017a\0\u0912\0\u017a\0\u017a"+
    "\0\u017a\0\u017a\0\u017a\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20"+
    "\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0"+
    "\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u017a\0\u017a\0\u017a"+
    "\0\u017a\0\u02f4\0\u0d14\0\u0d4a\0\u017a\0\u0d80\0\u0db6\0\u017a"+
    "\0\u017a\0\u0dec\0\u0e22\0\u017a\0\u0e58\0\u017a\0\u0e8e\0\u0ec4"+
    "\0\u0efa\0\u017a\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u0912\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u02f4\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\u0d14\0\u017a\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u017a\0\u14e2\0\u1518\0\u154e\0\u0f9c\0\u02f4\0\u02f4"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u02f4\0\u16c8"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u017a"+
    "\0\u017a\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u017a\0\u1950\0\u017a"+
    "\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u02f4\0\u1a94\0\u1aca"+
    "\0\u1b00\0\u02f4\0\u02f4\0\u1b36\0\u1b6c\0\u02f4\0\u1ba2\0\u017a"+
    "\0\u017a\0\u017a\0\u017a\0\u1bd8\0\u1c0e\0\u02f4\0\u1c44\0\u1c7a"+
    "\0\u02f4\0\u1cb0\0\u02f4\0\u1ce6\0\u02f4\0\u1d1c\0\u02f4\0\u02f4"+
    "\0\u1d52\0\u1d88\0\u1dbe\0\u02f4\0\u1df4\0\u1e2a\0\u1e60\0\u02f4"+
    "\0\u1e96\0\u02f4\0\u1ecc\0\u017a\0\u02f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\10\1\11\26\12\2\10\1\12\10\10\1\12\2\10"+
    "\1\12\1\13\3\10\1\12\3\14\1\12\1\15\3\12"+
    "\1\10\65\16\1\17\1\20\1\0\35\20\1\21\105\20"+
    "\1\22\6\20\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\4\26\1\31\2\26\1\32\1\33\1\34\1\35\1\36"+
    "\2\26\1\37\1\40\1\41\1\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\35\1\61\1\26\1\62"+
    "\1\23\1\26\3\14\1\26\1\63\1\64\2\23\1\65"+
    "\1\23\1\66\1\23\1\67\1\70\3\23\1\71\1\72"+
    "\1\73\5\23\1\74\1\75\3\23\1\76\6\23\1\77"+
    "\2\23\1\100\10\23\1\101\4\23\3\102\1\103\4\23"+
    "\1\104\65\16\1\105\71\0\26\12\2\0\1\12\10\0"+
    "\1\12\2\0\2\12\3\0\1\12\3\0\1\12\1\0"+
    "\3\12\4\0\25\12\1\106\2\0\1\12\10\0\1\12"+
    "\2\0\1\12\1\13\3\0\1\12\3\0\1\12\1\0"+
    "\3\12\62\0\1\107\5\0\1\110\120\0\1\111\65\0"+
    "\1\112\2\0\1\113\31\0\25\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\12\26\1\114\1\115\11\26"+
    "\16\0\4\26\2\0\1\26\3\0\1\26\10\0\4\26"+
    "\1\116\20\26\16\0\4\26\2\0\1\26\3\0\1\26"+
    "\10\0\10\26\1\117\14\26\16\0\4\26\2\0\1\26"+
    "\3\0\1\26\10\0\21\26\1\120\3\26\16\0\4\26"+
    "\2\0\1\26\3\0\1\26\10\0\4\26\1\121\20\26"+
    "\16\0\4\26\2\0\1\26\3\0\1\26\10\0\5\26"+
    "\1\122\17\26\16\0\4\26\2\0\1\26\3\0\1\26"+
    "\10\0\5\26\1\123\5\26\1\124\11\26\16\0\4\26"+
    "\2\0\1\26\3\0\1\26\10\0\1\125\2\26\1\126"+
    "\1\26\1\127\17\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\125\10\0\10\26\1\130\14\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\3\26\1\131\1\26\1\132"+
    "\16\26\1\133\16\0\4\26\2\0\1\26\3\0\1\26"+
    "\10\0\1\26\1\134\14\26\1\135\6\26\16\0\4\26"+
    "\2\0\1\26\3\0\1\26\41\0\1\136\32\0\1\137"+
    "\120\0\1\140\76\0\1\141\23\0\25\26\16\0\1\142"+
    "\3\26\2\0\1\26\3\0\1\26\35\0\1\143\17\0"+
    "\1\61\20\0\25\144\16\0\3\144\1\0\3\144\1\0"+
    "\1\144\1\0\1\144\2\0\1\144\1\0\1\144\61\0"+
    "\1\145\10\0\1\146\2\0\1\147\6\0\1\150\52\0"+
    "\1\151\3\0\1\152\1\153\1\154\3\0\1\155\1\156"+
    "\41\0\1\151\13\0\1\157\74\0\1\160\63\0\1\161"+
    "\2\0\1\162\62\0\1\163\65\0\1\164\102\0\1\165"+
    "\17\0\1\101\21\0\1\146\2\0\1\147\6\0\1\150"+
    "\31\0\1\166\20\0\26\12\2\0\1\12\10\0\1\12"+
    "\2\0\1\12\1\167\3\0\1\12\3\0\1\12\1\0"+
    "\3\12\4\0\15\26\1\170\7\26\16\0\1\26\1\170"+
    "\2\26\2\0\1\26\3\0\1\26\10\0\24\26\1\171"+
    "\16\0\4\26\2\0\1\26\3\0\1\26\10\0\1\26"+
    "\1\172\23\26\16\0\4\26\2\0\1\26\3\0\1\26"+
    "\10\0\10\26\1\173\14\26\16\0\4\26\2\0\1\26"+
    "\3\0\1\26\10\0\1\26\1\174\23\26\16\0\4\26"+
    "\2\0\1\26\3\0\1\26\10\0\23\26\1\175\1\26"+
    "\16\0\4\26\2\0\1\26\3\0\1\26\10\0\13\26"+
    "\1\176\11\26\16\0\4\26\2\0\1\26\3\0\1\26"+
    "\10\0\13\26\1\177\11\26\16\0\4\26\2\0\1\26"+
    "\3\0\1\26\10\0\12\26\1\200\12\26\16\0\4\26"+
    "\2\0\1\26\3\0\1\26\10\0\5\26\1\201\17\26"+
    "\16\0\4\26\2\0\1\26\3\0\1\26\10\0\5\26"+
    "\1\202\17\26\16\0\4\26\2\0\1\26\3\0\1\26"+
    "\10\0\21\26\1\203\3\26\16\0\4\26\2\0\1\26"+
    "\3\0\1\26\10\0\2\26\1\204\22\26\16\0\4\26"+
    "\2\0\1\26\3\0\1\26\10\0\10\26\1\205\14\26"+
    "\16\0\4\26\2\0\1\26\3\0\1\26\10\0\3\26"+
    "\1\206\21\26\16\0\4\26\2\0\1\26\3\0\1\26"+
    "\10\0\21\26\1\207\3\26\16\0\4\26\2\0\1\26"+
    "\3\0\1\26\10\0\13\26\1\210\11\26\16\0\4\26"+
    "\2\0\1\26\3\0\1\26\10\0\10\26\1\211\14\26"+
    "\16\0\4\26\2\0\1\26\3\0\1\26\55\0\1\212"+
    "\67\0\1\213\20\0\1\214\70\0\1\215\77\0\1\216"+
    "\55\0\1\217\57\0\1\220\76\0\1\221\67\0\1\222"+
    "\57\0\1\223\62\0\1\224\103\0\1\225\111\0\1\226"+
    "\65\0\1\166\20\0\10\26\1\227\14\26\16\0\4\26"+
    "\2\0\1\26\3\0\1\26\10\0\4\26\1\230\20\26"+
    "\16\0\4\26\2\0\1\26\3\0\1\26\10\0\10\26"+
    "\1\231\14\26\16\0\4\26\2\0\1\26\3\0\1\26"+
    "\10\0\3\26\1\232\21\26\16\0\4\26\2\0\1\26"+
    "\3\0\1\26\10\0\24\26\1\233\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\12\26\1\234\12\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\10\0\5\26\1\235"+
    "\17\26\16\0\4\26\2\0\1\26\3\0\1\26\10\0"+
    "\21\26\1\236\3\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\10\0\13\26\1\237\11\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\23\26\1\240\1\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\10\0\1\26\1\241"+
    "\23\26\16\0\4\26\2\0\1\26\3\0\1\26\10\0"+
    "\7\26\1\242\15\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\10\0\5\26\1\243\17\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\23\26\1\244\1\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\10\0\16\26\1\245"+
    "\6\26\16\0\4\26\2\0\1\26\3\0\1\26\10\0"+
    "\12\26\1\246\12\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\10\0\13\26\1\247\11\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\13\0\1\250\70\0\1\251\60\0"+
    "\1\252\67\0\1\253\65\0\1\254\102\0\1\255\56\0"+
    "\1\256\64\0\1\257\56\0\1\260\64\0\6\26\1\261"+
    "\16\26\16\0\4\26\2\0\1\26\3\0\1\26\10\0"+
    "\4\26\1\262\20\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\10\0\3\26\1\263\21\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\5\26\1\264\17\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\10\0\2\26\1\265"+
    "\22\26\16\0\4\26\2\0\1\26\3\0\1\26\10\0"+
    "\1\26\1\266\23\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\10\0\4\26\1\267\20\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\12\26\1\270\12\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\10\0\13\26\1\271"+
    "\11\26\16\0\4\26\2\0\1\26\3\0\1\26\10\0"+
    "\1\26\1\272\23\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\10\0\4\26\1\273\20\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\12\26\1\274\12\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\10\0\21\26\1\275"+
    "\3\26\16\0\4\26\2\0\1\26\3\0\1\26\10\0"+
    "\4\26\1\276\20\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\26\0\1\277\53\0\1\300\65\0\1\301\102\0"+
    "\1\302\57\0\1\303\52\0\10\26\1\304\14\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\10\0\5\26\1\305"+
    "\17\26\16\0\4\26\2\0\1\26\3\0\1\26\10\0"+
    "\1\26\1\306\23\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\10\0\7\26\1\307\15\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\4\26\1\310\20\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\10\0\23\26\1\311"+
    "\1\26\16\0\4\26\2\0\1\26\3\0\1\26\10\0"+
    "\6\26\1\312\16\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\10\0\4\26\1\313\20\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\10\26\1\314\14\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\10\0\20\26\1\315"+
    "\4\26\16\0\4\26\2\0\1\26\3\0\1\26\20\0"+
    "\1\316\55\0\23\26\1\317\1\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\21\26\1\320\3\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\10\0\3\26\1\321"+
    "\21\26\16\0\4\26\2\0\1\26\3\0\1\26\10\0"+
    "\1\26\1\322\23\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\10\0\5\26\1\323\17\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\21\26\1\324\3\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\13\0\1\325\62\0"+
    "\4\26\1\326\20\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\10\0\13\26\1\327\11\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\10\0\6\26\1\330\16\26\16\0"+
    "\4\26\2\0\1\26\3\0\1\26\20\0\1\331\55\0"+
    "\23\26\1\332\1\26\16\0\4\26\2\0\1\26\3\0"+
    "\1\26\10\0\10\26\1\333\14\26\16\0\4\26\2\0"+
    "\1\26\3\0\1\26\23\0\1\334\52\0\23\26\1\335"+
    "\1\26\16\0\4\26\2\0\1\26\3\0\1\26\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7938];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\2\1\1\11\1\1\3\11\1\0\2\11"+
    "\16\1\4\11\1\1\1\11\1\1\5\11\6\1\3\11"+
    "\5\1\1\11\2\1\2\11\1\1\1\11\1\1\2\11"+
    "\1\1\5\11\22\1\4\11\1\1\2\0\1\11\2\0"+
    "\2\11\2\0\1\11\1\0\1\11\3\0\1\11\3\0"+
    "\25\1\1\11\6\0\1\11\3\0\22\1\2\11\4\0"+
    "\1\11\1\0\1\11\16\1\1\0\4\11\12\1\1\0"+
    "\6\1\1\0\3\1\1\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    String cadena = "";
    String comentario = "";
    String texto = "";


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico_cpreport(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public lexico_cpreport(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tmas, yycolumn, yyline, new String(yytext()));
          }
        case 85: break;
        case 12: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tmenor, yycolumn, yyline, new String(yytext()));
          }
        case 86: break;
        case 11: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tmayor, yycolumn, yyline, new String(yytext()));
          }
        case 87: break;
        case 42: 
          { yybegin(COMENTARIOMULTI); comentario += "</";
          }
        case 88: break;
        case 32: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.tasignar, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 68: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tfalse, yycolumn, yyline, new String(yytext()));
          }
        case 90: break;
        case 69: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tscore, yycolumn, yyline, new String(yytext()));
          }
        case 91: break;
        case 79: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tboolean, yycolumn, yyline, new String(yytext()));
          }
        case 92: break;
        case 55: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tint, yycolumn, yyline, new String(yytext()));
          }
        case 93: break;
        case 14: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tpunto, yycolumn, yyline, new String(yytext()));
          }
        case 94: break;
        case 35: 
          { yybegin(ETIQUETA); /* Se ignoran */
          }
        case 95: break;
        case 52: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.ttr, yycolumn, yyline, new String(yytext()));
          }
        case 96: break;
        case 15: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tcorcheteabrir, yycolumn, yyline, new String(yytext()));
          }
        case 97: break;
        case 77: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tstring, yycolumn, yyline, new String(yytext()));
          }
        case 98: break;
        case 28: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tcoma, yycolumn, yyline, new String(yytext()));
          }
        case 99: break;
        case 10: 
          { System.out.println("Error Lexico: " + yytext()+ ", en columna: " + (yycolumn + 1) + " y en la fila: " + (yyline + 1));
                                yybegin(YYINITIAL);
                                Ventana.errores.add("Lexico-" + yytext() +"-" + String.valueOf((yycolumn +1)) + "-" + String.valueOf((yyline + 1)));
          }
        case 100: break;
        case 72: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.talign, yycolumn, yyline, new String(yytext()));
          }
        case 101: break;
        case 20: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tresta, yycolumn, yyline, new String(yytext()));
          }
        case 102: break;
        case 26: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tnot, yycolumn, yyline, new String(yytext()));
          }
        case 103: break;
        case 50: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.tth, yycolumn, yyline, new String(yytext()));
          }
        case 104: break;
        case 84: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tparametros, yycolumn, yyline, yytext());
          }
        case 105: break;
        case 71: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.ttitle, yycolumn, yyline, new String(yytext()));
          }
        case 106: break;
        case 61: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.thtml, yycolumn, yyline, new String(yytext()));
          }
        case 107: break;
        case 3: 
          { return new Symbol(tabla_sim_cpreport.ttexto, yycolumn, yyline, yytext());
          }
        case 108: break;
        case 47: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tor, yycolumn, yyline, new String(yytext()));
          }
        case 109: break;
        case 34: 
          { return new Symbol(tabla_sim_cpreport.tnum, yycolumn, yyline, new String(yytext()));
          }
        case 110: break;
        case 78: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tmetodos, yycolumn, yyline, new String(yytext()));
          }
        case 111: break;
        case 66: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tclase, yycolumn, yyline, yytext());
          }
        case 112: break;
        case 56: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tcaracter, yycolumn, yyline, new String(yytext()));
          }
        case 113: break;
        case 83: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.ttextcolor, yycolumn, yyline, new String(yytext()));
          }
        case 114: break;
        case 58: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.ttipo, yycolumn, yyline, new String(yytext()));
          }
        case 115: break;
        case 33: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.tdiagonal, yycolumn, yyline, new String(yytext()));
          }
        case 116: break;
        case 23: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tmodulo, yycolumn, yyline, new String(yytext()));
          }
        case 117: break;
        case 67: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tfloat, yycolumn, yyline, new String(yytext()));
          }
        case 118: break;
        case 57: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.tdiv, yycolumn, yyline, new String(yytext()));
          }
        case 119: break;
        case 75: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tclases, yycolumn, yyline, new String(yytext()));
          }
        case 120: break;
        case 9: 
          { String temp = comentario + ""; comentario = ""; 
                                                yybegin(CPREPORT); 
                                                System.out.println("Comentario lineal: "  + temp); 
                                                return new Symbol(tabla_sim_cpreport.tcomentario, yycolumn, yyline, new String(temp));
          }
        case 121: break;
        case 53: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.tbr, yycolumn, yyline, new String(yytext()));
          }
        case 122: break;
        case 59: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.ttrue, yycolumn, yyline, new String(yytext()));
          }
        case 123: break;
        case 46: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tand, yycolumn, yyline, new String(yytext()));
          }
        case 124: break;
        case 80: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tfuncion, yycolumn, yyline, yytext());
          }
        case 125: break;
        case 30: 
          { yybegin(YYINITIAL); return new Symbol(tabla_sim_cpreport.tmayor, yycolumn, yyline, new String(yytext()));
          }
        case 126: break;
        case 76: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tnombre, yycolumn, yyline, new String(yytext()));
          }
        case 127: break;
        case 5: 
          { /* Se ignoran */
          }
        case 128: break;
        case 82: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tvariables, yycolumn, yyline, new String(yytext()));
          }
        case 129: break;
        case 16: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tcorchetecerrar, yycolumn, yyline, new String(yytext()));
          }
        case 130: break;
        case 62: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.thead, yycolumn, yyline, new String(yytext()));
          }
        case 131: break;
        case 48: 
          { yybegin(YYINITIAL); return new Symbol(tabla_sim_cpreport.tiniciocpreport, yycolumn, yyline, new String(yytext()));
          }
        case 132: break;
        case 38: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tiniciocpreport, yycolumn, yyline, new String(yytext()));
          }
        case 133: break;
        case 60: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tchar, yycolumn, yyline, new String(yytext()));
          }
        case 134: break;
        case 49: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.thr, yycolumn, yyline, new String(yytext()));
          }
        case 135: break;
        case 25: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tparentesiscerrar, yycolumn, yyline, new String(yytext()));
          }
        case 136: break;
        case 44: 
          { yybegin(COMENTARIO); comentario += "->";
          }
        case 137: break;
        case 6: 
          { cadena += yytext();
          }
        case 138: break;
        case 1: 
          { System.out.println("Error Lexico: " + yytext()+ ", en columna: " + (yycolumn + 1) + " y en la fila: " + (yyline + 1));
                                Ventana.errores.add("Lexico-" + yytext() +"-" + String.valueOf((yycolumn +1)) + "-" + String.valueOf((yyline + 1)));
          }
        case 139: break;
        case 4: 
          { return new Symbol(tabla_sim_cpreport.tnumero, yycolumn, yyline, new String(yytext()));
          }
        case 140: break;
        case 37: 
          { String temp = cadena + "\""; cadena = ""; yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.tcadena, yychar, yyline, temp);
          }
        case 141: break;
        case 65: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tprint, yycolumn, yyline, new String(yytext()));
          }
        case 142: break;
        case 17: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tpuntoycoma, yycolumn, yyline, new String(yytext()));
          }
        case 143: break;
        case 39: 
          { String temp = comentario + "/>";
                                                comentario = "";
                                                yybegin(CPREPORT);
                                                System.out.println("Comentario multilinea: " + temp);
                                                return new Symbol(tabla_sim_cpreport.tcomentariomulti, yycolumn, yyline, new String(temp));
          }
        case 144: break;
        case 36: 
          { yybegin(CADENAHTML); cadena = "\"";
          }
        case 145: break;
        case 21: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tdivision, yycolumn, yyline, new String(yytext()));
          }
        case 146: break;
        case 45: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tnoigual, yycolumn, yyline, new String(yytext()));
          }
        case 147: break;
        case 22: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tmultiplicacion, yycolumn, yyline, new String(yytext()));
          }
        case 148: break;
        case 63: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.tbody, yycolumn, yyline, new String(yytext()));
          }
        case 149: break;
        case 8: 
          { comentario += yytext();
          }
        case 150: break;
        case 2: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.tmenor, yycolumn, yyline, new String(yytext()));
          }
        case 151: break;
        case 51: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.ttd, yycolumn, yyline, new String(yytext()));
          }
        case 152: break;
        case 24: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tparentesisabrir, yycolumn, yyline, new String(yytext()));
          }
        case 153: break;
        case 73: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.tcolor, yycolumn, yyline, new String(yytext()));
          }
        case 154: break;
        case 74: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tresult, yycolumn, yyline, new String(yytext()));
          }
        case 155: break;
        case 40: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tmayorigual, yycolumn, yyline, new String(yytext()));
          }
        case 156: break;
        case 13: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tid, yycolumn, yyline, new String(yytext()));
          }
        case 157: break;
        case 27: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tnumero, yycolumn, yyline, new String(yytext()));
          }
        case 158: break;
        case 7: 
          { String temp = cadena + "\""; cadena = ""; yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tcadena, yychar, yyline, temp);
          }
        case 159: break;
        case 70: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.ttable, yycolumn, yyline, new String(yytext()));
          }
        case 160: break;
        case 54: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.ttitulo, yycolumn, yyline, new String(yytext()));
          }
        case 161: break;
        case 81: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tcantidad, yycolumn, yyline, new String(yytext()));
          }
        case 162: break;
        case 31: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.tparrafo, yycolumn, yyline, new String(yytext()));
          }
        case 163: break;
        case 64: 
          { yybegin(ETIQUETA); return new Symbol(tabla_sim_cpreport.tfont, yycolumn, yyline, new String(yytext()));
          }
        case 164: break;
        case 41: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tmenorigual, yycolumn, yyline, new String(yytext()));
          }
        case 165: break;
        case 29: 
          { yybegin(CADENA); cadena += "\"";
          }
        case 166: break;
        case 18: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tasignar, yycolumn, yyline, new String(yytext()));
          }
        case 167: break;
        case 43: 
          { yybegin(CPREPORT); return new Symbol(tabla_sim_cpreport.tigual, yycolumn, yyline, new String(yytext()));
          }
        case 168: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(tabla_sim_cpreport.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
