
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cliente;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico_cp extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return tabla_sim_cpreport.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico_cp() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico_cp(java_cup.runtime.Scanner s, Result result) {super(s); this.datosresult = result;}

  /** Constructor which sets the default scanner. */
  public sintactico_cp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\330\000\002\002\004\000\002\002\021\000\002\002" +
    "\015\000\002\002\017\000\002\002\017\000\002\002\003" +
    "\000\002\002\015\000\002\002\013\000\002\002\013\000" +
    "\002\002\005\000\002\002\003\000\002\013\015\000\002" +
    "\013\013\000\002\013\013\000\002\013\010\000\002\014" +
    "\015\000\002\014\013\000\002\014\013\000\002\014\010" +
    "\000\002\016\010\000\002\016\006\000\002\017\012\000" +
    "\002\017\012\000\002\017\012\000\002\017\012\000\002" +
    "\017\007\000\002\017\007\000\002\017\005\000\002\017" +
    "\006\000\002\017\010\000\002\017\010\000\002\017\010" +
    "\000\002\017\010\000\002\017\005\000\002\017\005\000" +
    "\002\035\012\000\002\035\012\000\002\035\012\000\002" +
    "\035\012\000\002\035\007\000\002\035\007\000\002\035" +
    "\005\000\002\035\006\000\002\035\010\000\002\035\010" +
    "\000\002\035\010\000\002\035\010\000\002\035\005\000" +
    "\002\035\005\000\002\023\012\000\002\023\012\000\002" +
    "\023\012\000\002\023\012\000\002\023\007\000\002\023" +
    "\007\000\002\023\005\000\002\023\006\000\002\023\010" +
    "\000\002\023\010\000\002\023\010\000\002\023\010\000" +
    "\002\023\005\000\002\023\005\000\002\025\012\000\002" +
    "\025\012\000\002\025\012\000\002\025\012\000\002\025" +
    "\012\000\002\025\007\000\002\025\007\000\002\025\005" +
    "\000\002\025\006\000\002\025\010\000\002\025\010\000" +
    "\002\025\010\000\002\025\010\000\002\025\010\000\002" +
    "\025\005\000\002\025\005\000\002\034\012\000\002\034" +
    "\012\000\002\034\012\000\002\034\012\000\002\034\012" +
    "\000\002\034\012\000\002\034\007\000\002\034\007\000" +
    "\002\034\005\000\002\034\006\000\002\034\010\000\002" +
    "\034\010\000\002\034\010\000\002\034\010\000\002\034" +
    "\010\000\002\034\010\000\002\034\005\000\002\034\005" +
    "\000\002\026\012\000\002\026\012\000\002\026\012\000" +
    "\002\026\012\000\002\026\007\000\002\026\007\000\002" +
    "\026\005\000\002\026\006\000\002\026\010\000\002\026" +
    "\010\000\002\026\010\000\002\026\010\000\002\026\005" +
    "\000\002\026\005\000\002\027\012\000\002\027\012\000" +
    "\002\027\012\000\002\027\012\000\002\027\007\000\002" +
    "\027\007\000\002\027\005\000\002\027\006\000\002\027" +
    "\010\000\002\027\010\000\002\027\010\000\002\027\010" +
    "\000\002\027\005\000\002\027\005\000\002\024\012\000" +
    "\002\024\012\000\002\024\012\000\002\024\012\000\002" +
    "\024\007\000\002\024\007\000\002\024\005\000\002\024" +
    "\006\000\002\024\010\000\002\024\010\000\002\024\010" +
    "\000\002\024\010\000\002\024\005\000\002\024\005\000" +
    "\002\021\006\000\002\021\006\000\002\021\006\000\002" +
    "\021\006\000\002\021\002\000\002\021\004\000\002\015" +
    "\006\000\002\015\002\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\005\000\002\003\002\000\002\003\005\000\002" +
    "\003\004\000\002\004\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\007\000\002\010\005\000\002\011\003\000" +
    "\002\011\010\000\002\011\010\000\002\011\010\000\002" +
    "\011\003\000\002\011\005\000\002\011\005\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\042\005\000\002\042\003\000\002\041\003\000\002\041" +
    "\005\000\002\005\006\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\006\000\002\005\006\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\004\000\002\040\004\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03e8\000\012\002\uff6f\003\005\005\uff6f\102\006\001" +
    "\002\000\006\002\ufffc\005\u03cc\001\002\000\014\002\ufff7" +
    "\003\uff6f\004\220\005\uff6f\102\006\001\002\000\032\003" +
    "\024\030\030\043\013\044\031\045\026\046\017\047\012" +
    "\071\020\073\015\076\016\077\011\102\uff68\001\002\000" +
    "\004\002\010\001\002\000\004\002\001\001\002\000\032" +
    "\003\024\030\030\043\013\044\031\045\026\046\017\047" +
    "\012\071\020\073\015\076\016\077\011\102\uff68\001\002" +
    "\000\004\073\uff60\001\002\000\004\073\uff64\001\002\000" +
    "\032\003\024\030\030\043\013\044\031\045\026\046\017" +
    "\047\012\071\020\073\015\076\016\077\011\102\uff68\001" +
    "\002\000\012\052\172\053\175\054\174\056\173\001\002" +
    "\000\032\003\024\030\030\043\013\044\031\045\026\046" +
    "\017\047\012\071\020\073\015\076\016\077\011\102\uff68" +
    "\001\002\000\004\073\uff61\001\002\000\004\060\165\001" +
    "\002\000\004\037\163\001\002\000\032\003\024\030\030" +
    "\043\013\044\031\045\026\046\017\047\012\071\020\073" +
    "\015\076\016\077\011\102\uff68\001\002\000\004\073\154" +
    "\001\002\000\034\003\024\030\030\037\147\043\013\044" +
    "\031\045\026\046\017\047\012\071\020\073\015\076\016" +
    "\077\011\102\uff68\001\002\000\032\003\024\030\030\043" +
    "\013\044\031\045\026\046\017\047\012\071\020\073\015" +
    "\076\016\077\011\102\uff68\001\002\000\004\073\uff62\001" +
    "\002\000\004\102\144\001\002\000\004\033\032\001\002" +
    "\000\004\073\uff63\001\002\000\012\031\034\032\040\041" +
    "\033\042\035\001\002\000\050\004\uff4f\005\uff4f\033\uff4f" +
    "\034\134\035\uff4f\037\uff4f\053\uff4f\054\uff4f\055\uff4f\056" +
    "\uff4f\057\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f\065\uff4f" +
    "\066\uff4f\067\uff4f\100\uff4f\001\002\000\044\004\uff5d\005" +
    "\uff5d\035\uff5d\037\uff5d\053\uff5d\054\uff5d\055\uff5d\056\uff5d" +
    "\057\uff5d\061\uff5d\062\uff5d\063\uff5d\064\uff5d\065\uff5d\066" +
    "\uff5d\067\uff5d\100\uff5d\001\002\000\050\004\uff4d\005\uff4d" +
    "\033\uff4d\034\127\035\uff4d\037\uff4d\053\uff4d\054\uff4d\055" +
    "\uff4d\056\uff4d\057\uff4d\061\uff4d\062\uff4d\063\uff4d\064\uff4d" +
    "\065\uff4d\066\uff4d\067\uff4d\100\uff4d\001\002\000\046\004" +
    "\uff59\005\uff59\033\124\035\uff59\037\uff59\053\uff59\054\uff59" +
    "\055\uff59\056\uff59\057\uff59\061\uff59\062\uff59\063\uff59\064" +
    "\uff59\065\uff59\066\uff59\067\uff59\100\uff59\001\002\000\044" +
    "\004\uff5e\005\uff5e\035\uff5e\037\uff5e\053\uff5e\054\uff5e\055" +
    "\uff5e\056\uff5e\057\uff5e\061\uff5e\062\uff5e\063\uff5e\064\uff5e" +
    "\065\uff5e\066\uff5e\067\uff5e\100\uff5e\001\002\000\050\004" +
    "\uff4e\005\uff4e\033\uff4e\034\041\035\uff4e\037\uff4e\053\uff4e" +
    "\054\uff4e\055\uff4e\056\uff4e\057\uff4e\061\uff4e\062\uff4e\063" +
    "\uff4e\064\uff4e\065\uff4e\066\uff4e\067\uff4e\100\uff4e\001\002" +
    "\000\026\030\030\050\045\051\046\054\051\060\042\070" +
    "\054\072\047\073\044\074\052\075\043\001\002\000\026" +
    "\030\030\050\045\051\046\054\051\060\042\070\054\072" +
    "\047\073\044\074\052\075\043\001\002\000\044\004\uff2f" +
    "\005\uff2f\035\uff2f\037\uff2f\053\uff2f\054\uff2f\055\uff2f\056" +
    "\uff2f\057\uff2f\061\uff2f\062\uff2f\063\uff2f\064\uff2f\065\uff2f" +
    "\066\uff2f\067\uff2f\100\uff2f\001\002\000\044\004\uff2d\005" +
    "\uff2d\035\uff2d\037\uff2d\053\uff2d\054\uff2d\055\uff2d\056\uff2d" +
    "\057\uff2d\061\uff2d\062\uff2d\063\uff2d\064\uff2d\065\uff2d\066" +
    "\uff2d\067\uff2d\100\uff2d\001\002\000\044\004\uff2c\005\uff2c" +
    "\035\uff2c\037\uff2c\053\uff2c\054\uff2c\055\uff2c\056\uff2c\057" +
    "\uff2c\061\uff2c\062\uff2c\063\uff2c\064\uff2c\065\uff2c\066\uff2c" +
    "\067\uff2c\100\uff2c\001\002\000\044\004\uff2b\005\uff2b\035" +
    "\uff2b\037\uff2b\053\uff2b\054\uff2b\055\uff2b\056\uff2b\057\uff2b" +
    "\061\uff2b\062\uff2b\063\uff2b\064\uff2b\065\uff2b\066\uff2b\067" +
    "\uff2b\100\uff2b\001\002\000\044\004\uff30\005\uff30\035\uff30" +
    "\037\uff30\053\uff30\054\uff30\055\uff30\056\uff30\057\uff30\061" +
    "\uff30\062\uff30\063\uff30\064\uff30\065\uff30\066\uff30\067\uff30" +
    "\100\uff30\001\002\000\044\004\uff2a\005\uff2a\035\uff2a\037" +
    "\uff2a\053\uff2a\054\uff2a\055\uff2a\056\uff2a\057\uff2a\061\uff2a" +
    "\062\uff2a\063\uff2a\064\uff2a\065\uff2a\066\uff2a\067\uff2a\100" +
    "\uff2a\001\002\000\026\030\030\050\045\051\046\054\051" +
    "\060\042\070\054\072\047\073\044\074\052\075\043\001" +
    "\002\000\044\004\uff2e\005\uff2e\035\uff2e\037\uff2e\053\uff2e" +
    "\054\uff2e\055\uff2e\056\uff2e\057\uff2e\061\uff2e\062\uff2e\063" +
    "\uff2e\064\uff2e\065\uff2e\066\uff2e\067\uff2e\100\uff2e\001\002" +
    "\000\036\004\061\005\056\035\113\053\065\054\070\055" +
    "\066\056\067\057\064\062\060\063\071\064\062\065\072" +
    "\066\057\067\063\001\002\000\026\030\030\050\045\051" +
    "\046\054\051\060\042\070\054\072\047\073\044\074\052" +
    "\075\043\001\002\000\044\004\061\005\056\035\uff3b\037" +
    "\uff3b\053\065\054\070\055\066\056\067\057\064\061\uff3b" +
    "\062\060\063\071\064\062\065\072\066\uff3b\067\uff3b\100" +
    "\uff3b\001\002\000\026\030\030\050\045\051\046\054\051" +
    "\060\042\070\054\072\047\073\044\074\052\075\043\001" +
    "\002\000\026\030\030\050\045\051\046\054\051\060\042" +
    "\070\054\072\047\073\044\074\052\075\043\001\002\000" +
    "\026\030\030\050\045\051\046\054\051\060\042\070\054" +
    "\072\047\073\044\074\052\075\043\001\002\000\026\030" +
    "\030\050\045\051\046\054\051\060\042\070\054\072\047" +
    "\073\044\074\052\075\043\001\002\000\026\030\030\050" +
    "\045\051\046\054\051\060\042\070\054\072\047\073\044" +
    "\074\052\075\043\001\002\000\026\030\030\050\045\051" +
    "\046\054\051\060\042\070\054\072\047\073\044\074\052" +
    "\075\043\001\002\000\026\030\030\050\045\051\046\054" +
    "\051\060\042\070\054\072\047\073\044\074\052\075\043" +
    "\001\002\000\030\030\030\050\045\051\046\053\102\054" +
    "\051\060\042\070\054\072\047\073\044\074\052\075\043" +
    "\001\002\000\026\030\030\050\045\051\046\054\051\060" +
    "\042\070\054\072\047\073\044\074\052\075\043\001\002" +
    "\000\026\030\030\050\045\051\046\054\051\060\042\070" +
    "\054\072\047\073\044\074\052\075\043\001\002\000\026" +
    "\030\030\050\045\051\046\054\075\060\042\070\054\072" +
    "\047\073\044\074\052\075\043\001\002\000\026\030\030" +
    "\050\045\051\046\054\051\060\042\070\054\072\047\073" +
    "\044\074\052\075\043\001\002\000\026\030\030\050\045" +
    "\051\046\054\051\060\042\070\054\072\047\073\044\074" +
    "\052\075\043\001\002\000\044\004\uff34\005\uff34\035\uff34" +
    "\037\uff34\053\065\054\070\055\066\056\067\057\064\061" +
    "\uff34\062\uff34\063\uff34\064\uff34\065\uff34\066\uff34\067\uff34" +
    "\100\uff34\001\002\000\044\004\uff36\005\uff36\035\uff36\037" +
    "\uff36\053\065\054\070\055\066\056\067\057\064\061\uff36" +
    "\062\uff36\063\uff36\064\uff36\065\uff36\066\uff36\067\uff36\100" +
    "\uff36\001\002\000\066\004\uff31\005\uff31\030\030\035\uff31" +
    "\037\uff31\050\045\051\046\053\uff31\054\uff31\055\uff31\056" +
    "\uff31\057\uff31\060\042\061\uff31\062\uff31\063\uff31\064\uff31" +
    "\065\uff31\066\uff31\067\uff31\070\054\072\047\073\044\074" +
    "\052\075\043\100\uff31\001\002\000\044\004\uff3e\005\uff3e" +
    "\035\uff3e\037\uff3e\053\uff3e\054\uff3e\055\066\056\067\057" +
    "\064\061\uff3e\062\uff3e\063\uff3e\064\uff3e\065\uff3e\066\uff3e" +
    "\067\uff3e\100\uff3e\001\002\000\044\004\uff3a\005\uff3a\035" +
    "\uff3a\037\uff3a\053\uff3a\054\uff3a\055\066\056\067\057\064" +
    "\061\uff3a\062\uff3a\063\uff3a\064\uff3a\065\uff3a\066\uff3a\067" +
    "\uff3a\100\uff3a\001\002\000\044\004\uff42\005\uff42\035\uff42" +
    "\037\uff42\053\uff42\054\uff42\055\uff42\056\uff42\057\uff42\061" +
    "\uff42\062\uff42\063\uff42\064\uff42\065\uff42\066\uff42\067\uff42" +
    "\100\uff42\001\002\000\044\004\uff41\005\uff41\035\uff41\037" +
    "\uff41\053\uff41\054\uff41\055\uff41\056\uff41\057\uff41\061\uff41" +
    "\062\uff41\063\uff41\064\uff41\065\uff41\066\uff41\067\uff41\100" +
    "\uff41\001\002\000\044\004\uff32\005\uff32\035\uff32\037\uff32" +
    "\053\uff32\054\uff32\055\uff32\056\uff32\057\uff32\061\uff32\062" +
    "\uff32\063\uff32\064\uff32\065\uff32\066\uff32\067\uff32\100\uff32" +
    "\001\002\000\044\004\uff3f\005\uff3f\035\uff3f\037\uff3f\053" +
    "\uff3f\054\uff3f\055\066\056\067\057\064\061\uff3f\062\uff3f" +
    "\063\uff3f\064\uff3f\065\uff3f\066\uff3f\067\uff3f\100\uff3f\001" +
    "\002\000\044\004\uff40\005\uff40\035\uff40\037\uff40\053\uff40" +
    "\054\uff40\055\uff40\056\uff40\057\uff40\061\uff40\062\uff40\063" +
    "\uff40\064\uff40\065\uff40\066\uff40\067\uff40\100\uff40\001\002" +
    "\000\044\004\061\005\056\035\uff3c\037\uff3c\053\065\054" +
    "\070\055\066\056\067\057\064\061\uff3c\062\060\063\071" +
    "\064\062\065\072\066\uff3c\067\uff3c\100\uff3c\001\002\000" +
    "\044\004\uff35\005\uff35\035\uff35\037\uff35\053\065\054\070" +
    "\055\066\056\067\057\064\061\uff35\062\uff35\063\uff35\064" +
    "\uff35\065\uff35\066\uff35\067\uff35\100\uff35\001\002\000\044" +
    "\004\uff38\005\uff38\035\uff38\037\uff38\053\065\054\070\055" +
    "\066\056\067\057\064\061\uff38\062\uff38\063\uff38\064\uff38" +
    "\065\uff38\066\uff38\067\uff38\100\uff38\001\002\000\044\004" +
    "\uff37\005\uff37\035\uff37\037\uff37\053\065\054\070\055\066" +
    "\056\067\057\064\061\uff37\062\uff37\063\uff37\064\uff37\065" +
    "\uff37\066\uff37\067\uff37\100\uff37\001\002\000\044\004\061" +
    "\005\056\035\uff3d\037\uff3d\053\065\054\070\055\066\056" +
    "\067\057\064\061\uff3d\062\060\063\071\064\062\065\072" +
    "\066\uff3d\067\uff3d\100\uff3d\001\002\000\044\004\uff39\005" +
    "\uff39\035\uff39\037\uff39\053\065\054\070\055\066\056\067" +
    "\057\064\061\uff39\062\uff39\063\uff39\064\uff39\065\uff39\066" +
    "\uff39\067\uff39\100\uff39\001\002\000\004\033\114\001\002" +
    "\000\012\036\117\105\120\106\121\107\116\001\002\000" +
    "\044\004\uff5c\005\uff5c\035\uff5c\037\uff5c\053\uff5c\054\uff5c" +
    "\055\uff5c\056\uff5c\057\uff5c\061\uff5c\062\uff5c\063\uff5c\064" +
    "\uff5c\065\uff5c\066\uff5c\067\uff5c\100\uff5c\001\002\000\044" +
    "\004\uff53\005\uff53\035\uff53\037\uff53\053\uff53\054\uff53\055" +
    "\uff53\056\uff53\057\uff53\061\uff53\062\uff53\063\uff53\064\uff53" +
    "\065\uff53\066\uff53\067\uff53\100\uff53\001\002\000\044\004" +
    "\uff56\005\uff56\035\uff56\037\uff56\053\uff56\054\uff56\055\uff56" +
    "\056\uff56\057\uff56\061\uff56\062\uff56\063\uff56\064\uff56\065" +
    "\uff56\066\uff56\067\uff56\100\uff56\001\002\000\044\004\uff55" +
    "\005\uff55\035\uff55\037\uff55\053\uff55\054\uff55\055\uff55\056" +
    "\uff55\057\uff55\061\uff55\062\uff55\063\uff55\064\uff55\065\uff55" +
    "\066\uff55\067\uff55\100\uff55\001\002\000\044\004\uff54\005" +
    "\uff54\035\uff54\037\uff54\053\uff54\054\uff54\055\uff54\056\uff54" +
    "\057\uff54\061\uff54\062\uff54\063\uff54\064\uff54\065\uff54\066" +
    "\uff54\067\uff54\100\uff54\001\002\000\036\004\061\005\056" +
    "\053\065\054\070\055\066\056\067\057\064\061\123\062" +
    "\060\063\071\064\062\065\072\066\057\067\063\001\002" +
    "\000\044\004\uff33\005\uff33\035\uff33\037\uff33\053\uff33\054" +
    "\uff33\055\uff33\056\uff33\057\uff33\061\uff33\062\uff33\063\uff33" +
    "\064\uff33\065\uff33\066\uff33\067\uff33\100\uff33\001\002\000" +
    "\006\036\126\040\125\001\002\000\044\004\uff57\005\uff57" +
    "\035\uff57\037\uff57\053\uff57\054\uff57\055\uff57\056\uff57\057" +
    "\uff57\061\uff57\062\uff57\063\uff57\064\uff57\065\uff57\066\uff57" +
    "\067\uff57\100\uff57\001\002\000\044\004\uff58\005\uff58\035" +
    "\uff58\037\uff58\053\uff58\054\uff58\055\uff58\056\uff58\057\uff58" +
    "\061\uff58\062\uff58\063\uff58\064\uff58\065\uff58\066\uff58\067" +
    "\uff58\100\uff58\001\002\000\026\030\030\050\045\051\046" +
    "\054\051\060\042\070\054\072\047\073\044\074\052\075" +
    "\043\001\002\000\036\004\061\005\056\035\131\053\065" +
    "\054\070\055\066\056\067\057\064\062\060\063\071\064" +
    "\062\065\072\066\057\067\063\001\002\000\004\033\132" +
    "\001\002\000\004\036\133\001\002\000\044\004\uff5a\005" +
    "\uff5a\035\uff5a\037\uff5a\053\uff5a\054\uff5a\055\uff5a\056\uff5a" +
    "\057\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a\065\uff5a\066" +
    "\uff5a\067\uff5a\100\uff5a\001\002\000\026\030\030\050\045" +
    "\051\046\054\051\060\042\070\054\072\047\073\044\074" +
    "\052\075\043\001\002\000\036\004\061\005\056\035\136" +
    "\053\065\054\070\055\066\056\067\057\064\062\060\063" +
    "\071\064\062\065\072\066\057\067\063\001\002\000\004" +
    "\033\137\001\002\000\010\036\142\105\141\110\140\001" +
    "\002\000\044\004\uff50\005\uff50\035\uff50\037\uff50\053\uff50" +
    "\054\uff50\055\uff50\056\uff50\057\uff50\061\uff50\062\uff50\063" +
    "\uff50\064\uff50\065\uff50\066\uff50\067\uff50\100\uff50\001\002" +
    "\000\044\004\uff51\005\uff51\035\uff51\037\uff51\053\uff51\054" +
    "\uff51\055\uff51\056\uff51\057\uff51\061\uff51\062\uff51\063\uff51" +
    "\064\uff51\065\uff51\066\uff51\067\uff51\100\uff51\001\002\000" +
    "\044\004\uff52\005\uff52\035\uff52\037\uff52\053\uff52\054\uff52" +
    "\055\uff52\056\uff52\057\uff52\061\uff52\062\uff52\063\uff52\064" +
    "\uff52\065\uff52\066\uff52\067\uff52\100\uff52\001\002\000\044" +
    "\004\uff5b\005\uff5b\035\uff5b\037\uff5b\053\uff5b\054\uff5b\055" +
    "\uff5b\056\uff5b\057\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b" +
    "\065\uff5b\066\uff5b\067\uff5b\100\uff5b\001\002\000\014\002" +
    "\uff6f\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\012" +
    "\002\uff70\003\uff70\005\uff70\101\uff70\001\002\000\004\102" +
    "\uff6a\001\002\000\032\003\024\030\030\043\013\044\031" +
    "\045\026\046\017\047\012\071\020\073\015\076\016\077" +
    "\011\102\uff68\001\002\000\004\102\uff66\001\002\000\004" +
    "\102\uff67\001\002\000\006\037\uff4b\100\160\001\002\000" +
    "\004\037\157\001\002\000\010\037\uff4a\052\155\100\uff4a" +
    "\001\002\000\026\030\030\050\045\051\046\054\051\060" +
    "\042\070\054\072\047\073\044\074\052\075\043\001\002" +
    "\000\040\004\061\005\056\037\uff49\053\065\054\070\055" +
    "\066\056\067\057\064\062\060\063\071\064\062\065\072" +
    "\066\057\067\063\100\uff49\001\002\000\032\003\uff65\030" +
    "\uff65\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65\071\uff65" +
    "\073\uff65\076\uff65\077\uff65\102\uff65\001\002\000\004\073" +
    "\154\001\002\000\004\037\uff4c\001\002\000\004\102\uff6d" +
    "\001\002\000\032\003\024\030\030\043\013\044\031\045" +
    "\026\046\017\047\012\071\020\073\015\076\016\077\011" +
    "\102\uff68\001\002\000\004\102\uff69\001\002\000\026\030" +
    "\030\050\045\051\046\054\051\060\042\070\054\072\047" +
    "\073\044\074\052\075\043\001\002\000\036\004\061\005" +
    "\056\053\065\054\070\055\066\056\067\057\064\061\167" +
    "\062\060\063\071\064\062\065\072\066\057\067\063\001" +
    "\002\000\004\037\170\001\002\000\032\003\uff5f\030\uff5f" +
    "\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\071\uff5f\073" +
    "\uff5f\076\uff5f\077\uff5f\102\uff5f\001\002\000\004\102\uff6c" +
    "\001\002\000\026\030\030\050\045\051\046\054\051\060" +
    "\042\070\054\072\047\073\044\074\052\075\043\001\002" +
    "\000\004\064\210\001\002\000\006\054\204\064\203\001" +
    "\002\000\006\053\177\064\176\001\002\000\026\030\030" +
    "\050\045\051\046\054\051\060\042\070\054\072\047\073" +
    "\044\074\052\075\043\001\002\000\004\037\200\001\002" +
    "\000\032\003\uff44\030\uff44\043\uff44\044\uff44\045\uff44\046" +
    "\uff44\047\uff44\071\uff44\073\uff44\076\uff44\077\uff44\102\uff44" +
    "\001\002\000\036\004\061\005\056\037\202\053\065\054" +
    "\070\055\066\056\067\057\064\062\060\063\071\064\062" +
    "\065\072\066\057\067\063\001\002\000\032\003\uff47\030" +
    "\uff47\043\uff47\044\uff47\045\uff47\046\uff47\047\uff47\071\uff47" +
    "\073\uff47\076\uff47\077\uff47\102\uff47\001\002\000\026\030" +
    "\030\050\045\051\046\054\051\060\042\070\054\072\047" +
    "\073\044\074\052\075\043\001\002\000\004\037\205\001" +
    "\002\000\032\003\uff43\030\uff43\043\uff43\044\uff43\045\uff43" +
    "\046\uff43\047\uff43\071\uff43\073\uff43\076\uff43\077\uff43\102" +
    "\uff43\001\002\000\036\004\061\005\056\037\207\053\065" +
    "\054\070\055\066\056\067\057\064\062\060\063\071\064" +
    "\062\065\072\066\057\067\063\001\002\000\032\003\uff46" +
    "\030\uff46\043\uff46\044\uff46\045\uff46\046\uff46\047\uff46\071" +
    "\uff46\073\uff46\076\uff46\077\uff46\102\uff46\001\002\000\026" +
    "\030\030\050\045\051\046\054\051\060\042\070\054\072" +
    "\047\073\044\074\052\075\043\001\002\000\036\004\061" +
    "\005\056\037\212\053\065\054\070\055\066\056\067\057" +
    "\064\062\060\063\071\064\062\065\072\066\057\067\063" +
    "\001\002\000\032\003\uff45\030\uff45\043\uff45\044\uff45\045" +
    "\uff45\046\uff45\047\uff45\071\uff45\073\uff45\076\uff45\077\uff45" +
    "\102\uff45\001\002\000\036\004\061\005\056\037\214\053" +
    "\065\054\070\055\066\056\067\057\064\062\060\063\071" +
    "\064\062\065\072\066\057\067\063\001\002\000\032\003" +
    "\uff48\030\uff48\043\uff48\044\uff48\045\uff48\046\uff48\047\uff48" +
    "\071\uff48\073\uff48\076\uff48\077\uff48\102\uff48\001\002\000" +
    "\004\102\uff6e\001\002\000\004\102\uff6b\001\002\000\006" +
    "\003\223\005\222\001\002\000\006\002\uff6f\102\006\001" +
    "\002\000\004\002\ufff8\001\002\000\006\007\u03b4\010\240" +
    "\001\002\000\010\004\u038b\005\uff6f\102\006\001\002\000" +
    "\006\005\uff6f\102\006\001\002\000\010\003\uff6f\005\uff6f" +
    "\102\006\001\002\000\006\003\227\005\230\001\002\000" +
    "\004\004\u0381\001\002\000\006\010\240\103\241\001\002" +
    "\000\006\005\uff6f\102\006\001\002\000\004\005\233\001" +
    "\002\000\004\103\234\001\002\000\004\006\235\001\002" +
    "\000\004\004\236\001\002\000\006\002\uff6f\102\006\001" +
    "\002\000\004\002\ufffb\001\002\000\016\003\245\004\uff72" +
    "\023\252\024\250\025\251\026\247\001\002\000\004\006" +
    "\242\001\002\000\004\004\243\001\002\000\006\002\uff6f" +
    "\102\006\001\002\000\004\002\ufffa\001\002\000\016\003" +
    "\245\004\uff72\023\252\024\250\025\251\026\247\001\002" +
    "\000\004\004\267\001\002\000\004\052\264\001\002\000" +
    "\004\052\261\001\002\000\004\052\256\001\002\000\004" +
    "\052\253\001\002\000\004\075\254\001\002\000\016\003" +
    "\245\004\uff72\023\252\024\250\025\251\026\247\001\002" +
    "\000\004\004\uff76\001\002\000\004\075\257\001\002\000" +
    "\016\003\245\004\uff72\023\252\024\250\025\251\026\247" +
    "\001\002\000\004\004\uff75\001\002\000\004\075\262\001" +
    "\002\000\016\003\245\004\uff72\023\252\024\250\025\251" +
    "\026\247\001\002\000\004\004\uff73\001\002\000\004\075" +
    "\265\001\002\000\016\003\245\004\uff72\023\252\024\250" +
    "\025\251\026\247\001\002\000\004\004\uff74\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\272\005\271\101\273\001\002\000\020\011\u0359\013" +
    "\u035a\017\u035c\020\u035e\021\u035b\022\u035d\103\u035f\001\002" +
    "\000\016\003\uff6f\004\301\005\uff6f\010\300\101\uff6f\102" +
    "\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\006\005\uffee\102\uffee\001\002\000\010\003" +
    "\272\005\271\101\273\001\002\000\006\005\uffe6\102\uffe6" +
    "\001\002\000\010\003\272\005\271\101\273\001\002\000" +
    "\004\004\u0357\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\305\005\304\101\310\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\022\011\u0336\013\u0337\016\375\017\u0339\020\u033b\021" +
    "\u0338\022\u033a\103\u033c\001\002\000\024\003\uff6f\004\332" +
    "\005\uff6f\011\325\013\326\017\330\020\331\101\uff6f\102" +
    "\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\010\003\272\005\271\101\273\001\002\000\006\005\uffe3" +
    "\102\uffe3\001\002\000\010\003\305\005\304\101\310\001" +
    "\002\000\012\003\uffd8\005\uffd8\101\uffd8\102\uffd8\001\002" +
    "\000\012\003\uffca\005\uffca\101\uffca\102\uffca\001\002\000" +
    "\012\003\uff7e\005\uff7e\101\uff7e\102\uff7e\001\002\000\012" +
    "\003\uffbb\005\uffbb\101\uffbb\102\uffbb\001\002\000\010\003" +
    "\272\005\271\101\273\001\002\000\006\005\uffe4\102\uffe4" +
    "\001\002\000\010\003\272\005\271\101\273\001\002\000" +
    "\006\005\uffe1\102\uffe1\001\002\000\004\004\u0335\001\002" +
    "\000\004\004\u0334\001\002\000\010\003\305\005\304\101" +
    "\310\001\002\000\004\004\u0333\001\002\000\004\004\u0332" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\336\005\335\101\342\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\026\011" +
    "\u0314\013\u0315\014\u010b\015\u010c\016\375\017\u0318\020\u0317" +
    "\021\u0313\022\u0312\103\u0316\001\002\000\026\003\uff6f\004" +
    "\u02da\005\uff6f\011\325\013\326\016\u0266\017\330\020\331" +
    "\101\uff6f\102\006\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\305\005\304\101\310\001\002\000\012" +
    "\003\uffd5\005\uffd5\101\uffd5\102\uffd5\001\002\000\012\003" +
    "\uffc7\005\uffc7\101\uffc7\102\uffc7\001\002\000\012\003\uff7b" +
    "\005\uff7b\101\uff7b\102\uff7b\001\002\000\012\003\uffb7\005" +
    "\uffb7\101\uffb7\102\uffb7\001\002\000\010\003\336\005\335" +
    "\101\342\001\002\000\012\003\uffaa\005\uffaa\101\uffaa\102" +
    "\uffaa\001\002\000\010\003\305\005\304\101\310\001\002" +
    "\000\012\003\uffd6\005\uffd6\101\uffd6\102\uffd6\001\002\000" +
    "\012\003\uffc8\005\uffc8\101\uffc8\102\uffc8\001\002\000\012" +
    "\003\uff7c\005\uff7c\101\uff7c\102\uff7c\001\002\000\012\003" +
    "\uffb8\005\uffb8\101\uffb8\102\uffb8\001\002\000\010\003\361" +
    "\005\362\101\363\001\002\000\016\003\uff6f\004\u02ce\005" +
    "\uff6f\013\326\101\uff6f\102\006\001\002\000\022\011\366" +
    "\013\367\016\375\017\371\020\373\021\370\022\372\103" +
    "\374\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\012\003\uffb9\005\uffb9\101\uffb9\102\uffb9\001" +
    "\002\000\010\003\361\005\362\101\363\001\002\000\016" +
    "\003\245\004\uff72\023\252\024\250\025\251\026\247\001" +
    "\002\000\016\003\245\004\uff72\023\252\024\250\025\251" +
    "\026\247\001\002\000\004\004\u02c1\001\002\000\016\003" +
    "\245\004\uff72\023\252\024\250\025\251\026\247\001\002" +
    "\000\004\004\u02ba\001\002\000\016\003\245\004\uff72\023" +
    "\252\024\250\025\251\026\247\001\002\000\004\013\u0291" +
    "\001\002\000\016\003\245\004\uff72\023\252\024\250\025" +
    "\251\026\247\001\002\000\004\004\377\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003" +
    "\u0101\005\u0102\101\u0104\001\002\000\016\003\uff6f\004\u0265" +
    "\005\uff6f\016\u0266\101\uff6f\102\006\001\002\000\024\011" +
    "\u0109\013\u010d\014\u010b\015\u010c\017\u0110\020\u010f\021\u010a" +
    "\022\u0108\103\u010e\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\u0101\005\u0102\101\u0104\001" +
    "\002\000\010\003\361\005\362\101\363\001\002\000\012" +
    "\003\uffc2\005\uffc2\101\uffc2\102\uffc2\001\002\000\004\004" +
    "\u0261\001\002\000\016\003\245\004\uff72\023\252\024\250" +
    "\025\251\026\247\001\002\000\004\004\u0258\001\002\000" +
    "\016\003\245\004\uff72\023\252\024\250\025\251\026\247" +
    "\001\002\000\016\003\245\004\uff72\023\252\024\250\025" +
    "\251\026\247\001\002\000\016\003\245\004\uff72\023\252" +
    "\024\250\025\251\026\247\001\002\000\004\016\u01c8\001" +
    "\002\000\016\003\245\004\uff72\023\252\024\250\025\251" +
    "\026\247\001\002\000\016\003\245\004\uff72\023\252\024" +
    "\250\025\251\026\247\001\002\000\004\004\u0112\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\010\003\u0116\005\u0115\101\u0117\001\002\000\012\003\uff6f" +
    "\005\uff6f\101\uff6f\102\006\001\002\000\020\011\u0127\013" +
    "\u0128\017\u012a\020\u012c\021\u0129\022\u012b\103\u012d\001\002" +
    "\000\016\003\uff6f\004\u011a\005\uff6f\017\330\101\uff6f\102" +
    "\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\010\003\u0116\005\u0115\101\u0117\001\002\000" +
    "\010\003\u0116\005\u0115\101\u0117\001\002\000\012\003\uff6f" +
    "\005\uff6f\101\uff6f\102\006\001\002\000\010\003\305\005" +
    "\304\101\310\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\u0116\005\u0115\101\u0117\001\002\000\010" +
    "\003\u0116\005\u0115\101\u0117\001\002\000\010\003\u0116\005" +
    "\u0115\101\u0117\001\002\000\012\003\uffd3\005\uffd3\101\uffd3" +
    "\102\uffd3\001\002\000\010\003\u0116\005\u0115\101\u0117\001" +
    "\002\000\012\003\uffd4\005\uffd4\101\uffd4\102\uffd4\001\002" +
    "\000\012\003\uffd2\005\uffd2\101\uffd2\102\uffd2\001\002\000" +
    "\016\003\245\004\uff72\023\252\024\250\025\251\026\247" +
    "\001\002\000\016\003\245\004\uff72\023\252\024\250\025" +
    "\251\026\247\001\002\000\004\004\u01b1\001\002\000\016" +
    "\003\245\004\uff72\023\252\024\250\025\251\026\247\001" +
    "\002\000\004\004\u01a8\001\002\000\016\003\245\004\uff72" +
    "\023\252\024\250\025\251\026\247\001\002\000\004\017" +
    "\u012e\001\002\000\004\004\u012f\001\002\000\012\003\uffd7" +
    "\005\uffd7\101\uffd7\102\uffd7\001\002\000\004\004\u0131\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\u0134\005\u0133\101\u0136\001\002\000\020\011" +
    "\u0148\013\u0149\017\u014c\020\u014b\021\u014a\022\u014d\103\u014e" +
    "\001\002\000\016\003\uff6f\004\u013b\005\uff6f\020\331\101" +
    "\uff6f\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\u0134\005\u0133\101\u0136\001\002" +
    "\000\010\003\u0116\005\u0115\101\u0117\001\002\000\012\003" +
    "\uffdb\005\uffdb\101\uffdb\102\uffdb\001\002\000\010\003\u0134" +
    "\005\u0133\101\u0136\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\010\003\305\005\304\101\310" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\u0134\005\u0133\101\u0136\001\002\000\010\003\u0134\005" +
    "\u0133\101\u0136\001\002\000\010\003\u0134\005\u0133\101\u0136" +
    "\001\002\000\012\003\uffc5\005\uffc5\101\uffc5\102\uffc5\001" +
    "\002\000\010\003\u0134\005\u0133\101\u0136\001\002\000\012" +
    "\003\uffc6\005\uffc6\101\uffc6\102\uffc6\001\002\000\012\003" +
    "\uffc4\005\uffc4\101\uffc4\102\uffc4\001\002\000\016\003\245" +
    "\004\uff72\023\252\024\250\025\251\026\247\001\002\000" +
    "\016\003\245\004\uff72\023\252\024\250\025\251\026\247" +
    "\001\002\000\004\004\u0160\001\002\000\016\003\245\004" +
    "\uff72\023\252\024\250\025\251\026\247\001\002\000\016" +
    "\003\245\004\uff72\023\252\024\250\025\251\026\247\001" +
    "\002\000\004\004\u0151\001\002\000\004\020\u014f\001\002" +
    "\000\004\004\u0150\001\002\000\012\003\uffc9\005\uffc9\101" +
    "\uffc9\102\uffc9\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\u0134\005\u0133\101\u0136\001" +
    "\002\000\012\003\uffcb\005\uffcb\101\uffcb\102\uffcb\001\002" +
    "\000\004\004\u0155\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\010\003\u0116\005\u0115\101\u0117" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\u0134\005\u0133\101\u0136\001\002\000\012" +
    "\003\uffce\005\uffce\101\uffce\102\uffce\001\002\000\004\004" +
    "\u015b\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\010\003\u0134\005\u0133\101\u0136\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\u0134\005\u0133\101\u0136\001\002\000\012\003\uffcd\005" +
    "\uffcd\101\uffcd\102\uffcd\001\002\000\012\003\uff6f\005\uff6f" +
    "\101\uff6f\102\006\001\002\000\010\003\u0134\005\u0133\101" +
    "\u0136\001\002\000\012\003\uffcc\005\uffcc\101\uffcc\102\uffcc" +
    "\001\002\000\004\004\u0164\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\361\005\362" +
    "\101\363\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\u0134\005\u0133\101\u0136\001\002" +
    "\000\012\003\uffcf\005\uffcf\101\uffcf\102\uffcf\001\002\000" +
    "\004\004\u016a\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\u016d\005\u016c\101\u016f\001" +
    "\002\000\020\011\u0181\013\u0183\017\u0184\020\u0186\021\u0182" +
    "\022\u0185\103\u0187\001\002\000\016\003\uff6f\004\u0174\005" +
    "\uff6f\011\325\101\uff6f\102\006\001\002\000\012\003\uff6f" +
    "\005\uff6f\101\uff6f\102\006\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\u016d\005\u016c" +
    "\101\u016f\001\002\000\010\003\u0134\005\u0133\101\u0136\001" +
    "\002\000\012\003\uffd0\005\uffd0\101\uffd0\102\uffd0\001\002" +
    "\000\010\003\u016d\005\u016c\101\u016f\001\002\000\012\003" +
    "\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003\305" +
    "\005\304\101\310\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\010\003\u016d\005\u016c\101\u016f\001\002\000" +
    "\010\003\u016d\005\u016c\101\u016f\001\002\000\010\003\u016d" +
    "\005\u016c\101\u016f\001\002\000\012\003\uff79\005\uff79\101" +
    "\uff79\102\uff79\001\002\000\010\003\u016d\005\u016c\101\u016f" +
    "\001\002\000\012\003\uff7a\005\uff7a\101\uff7a\102\uff7a\001" +
    "\002\000\012\003\uff78\005\uff78\101\uff78\102\uff78\001\002" +
    "\000\016\003\245\004\uff72\023\252\024\250\025\251\026" +
    "\247\001\002\000\004\004\u019f\001\002\000\016\003\245" +
    "\004\uff72\023\252\024\250\025\251\026\247\001\002\000" +
    "\016\003\245\004\uff72\023\252\024\250\025\251\026\247" +
    "\001\002\000\004\004\u0190\001\002\000\016\003\245\004" +
    "\uff72\023\252\024\250\025\251\026\247\001\002\000\004" +
    "\011\u0188\001\002\000\004\004\u0189\001\002\000\012\003" +
    "\uff7d\005\uff7d\101\uff7d\102\uff7d\001\002\000\004\004\u018b" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\u0134\005\u0133\101\u0136\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003" +
    "\u016d\005\u016c\101\u016f\001\002\000\012\003\uff81\005\uff81" +
    "\101\uff81\102\uff81\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\010\003\u016d\005\u016c\101\u016f" +
    "\001\002\000\012\003\uff7f\005\uff7f\101\uff7f\102\uff7f\001" +
    "\002\000\004\004\u0194\001\002\000\012\003\uff6f\005\uff6f" +
    "\101\uff6f\102\006\001\002\000\010\003\u0116\005\u0115\101" +
    "\u0117\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\010\003\u016d\005\u016c\101\u016f\001\002\000" +
    "\012\003\uff82\005\uff82\101\uff82\102\uff82\001\002\000\004" +
    "\004\u019a\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\361\005\362\101\363\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\010\003\u016d\005\u016c\101\u016f\001\002\000\012\003\uff83" +
    "\005\uff83\101\uff83\102\uff83\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\u016d\005\u016c" +
    "\101\u016f\001\002\000\012\003\uff80\005\uff80\101\uff80\102" +
    "\uff80\001\002\000\004\004\u01a3\001\002\000\012\003\uff6f" +
    "\005\uff6f\101\uff6f\102\006\001\002\000\010\003\u016d\005" +
    "\u016c\101\u016f\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\u016d\005\u016c\101\u016f\001" +
    "\002\000\012\003\uff84\005\uff84\101\uff84\102\uff84\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\010\003\u0116\005\u0115\101\u0117\001\002\000\012\003\uffd9" +
    "\005\uffd9\101\uffd9\102\uffd9\001\002\000\004\004\u01ac\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\u0116\005\u0115\101\u0117\001\002\000\012\003" +
    "\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003\u0116" +
    "\005\u0115\101\u0117\001\002\000\012\003\uffdc\005\uffdc\101" +
    "\uffdc\102\uffdc\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\u0116\005\u0115\101\u0117\001" +
    "\002\000\012\003\uffda\005\uffda\101\uffda\102\uffda\001\002" +
    "\000\004\004\u01b5\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\010\003\361\005\362\101\363" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\u0116\005\u0115\101\u0117\001\002\000\012" +
    "\003\uffdd\005\uffdd\101\uffdd\102\uffdd\001\002\000\004\004" +
    "\u01bb\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\010\003\u016d\005\u016c\101\u016f\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\u0116\005\u0115\101\u0117\001\002\000\012\003\uffde\005" +
    "\uffde\101\uffde\102\uffde\001\002\000\010\003\u0101\005\u0102" +
    "\101\u0104\001\002\000\012\003\uffae\005\uffae\101\uffae\102" +
    "\uffae\001\002\000\004\004\u01c3\001\002\000\012\003\uff6f" +
    "\005\uff6f\101\uff6f\102\006\001\002\000\010\003\u0134\005" +
    "\u0133\101\u0136\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\u0101\005\u0102\101\u0104\001" +
    "\002\000\012\003\uffad\005\uffad\101\uffad\102\uffad\001\002" +
    "\000\004\004\u01c9\001\002\000\012\003\uffa9\005\uffa9\101" +
    "\uffa9\102\uffa9\001\002\000\004\004\u01cb\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003" +
    "\361\005\362\101\363\001\002\000\012\003\uff6f\005\uff6f" +
    "\101\uff6f\102\006\001\002\000\010\003\u0101\005\u0102\101" +
    "\u0104\001\002\000\012\003\uffaf\005\uffaf\101\uffaf\102\uffaf" +
    "\001\002\000\004\004\u01d1\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\u01d3\005\u01d4" +
    "\101\u01d5\001\002\000\016\003\uff6f\004\u0203\005\uff6f\015" +
    "\u0204\101\uff6f\102\006\001\002\000\020\011\u01db\013\u01dc" +
    "\017\u01de\020\u01e0\021\u01dd\022\u01df\103\u01e1\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003" +
    "\u0101\005\u0102\101\u0104\001\002\000\012\003\uffb1\005\uffb1" +
    "\101\uffb1\102\uffb1\001\002\000\010\003\u01d3\005\u01d4\101" +
    "\u01d5\001\002\000\012\003\uff8c\005\uff8c\101\uff8c\102\uff8c" +
    "\001\002\000\016\003\245\004\uff72\023\252\024\250\025" +
    "\251\026\247\001\002\000\016\003\245\004\uff72\023\252" +
    "\024\250\025\251\026\247\001\002\000\004\004\u01f3\001" +
    "\002\000\016\003\245\004\uff72\023\252\024\250\025\251" +
    "\026\247\001\002\000\004\004\u01ea\001\002\000\016\003" +
    "\245\004\uff72\023\252\024\250\025\251\026\247\001\002" +
    "\000\004\015\u01e2\001\002\000\004\004\u01e3\001\002\000" +
    "\012\003\uff8b\005\uff8b\101\uff8b\102\uff8b\001\002\000\004" +
    "\004\u01e5\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\u0134\005\u0133\101\u0136\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\010\003\u01d3\005\u01d4\101\u01d5\001\002\000\012\003\uff8f" +
    "\005\uff8f\101\uff8f\102\uff8f\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\u01d3\005\u01d4" +
    "\101\u01d5\001\002\000\012\003\uff8d\005\uff8d\101\uff8d\102" +
    "\uff8d\001\002\000\004\004\u01ee\001\002\000\012\003\uff6f" +
    "\005\uff6f\101\uff6f\102\006\001\002\000\010\003\u0116\005" +
    "\u0115\101\u0117\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\u01d3\005\u01d4\101\u01d5\001" +
    "\002\000\012\003\uff90\005\uff90\101\uff90\102\uff90\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\010\003\u01d3\005\u01d4\101\u01d5\001\002\000\012\003\uff8e" +
    "\005\uff8e\101\uff8e\102\uff8e\001\002\000\004\004\u01f7\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\361\005\362\101\363\001\002\000\012\003" +
    "\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003\u01d3" +
    "\005\u01d4\101\u01d5\001\002\000\012\003\uff91\005\uff91\101" +
    "\uff91\102\uff91\001\002\000\004\004\u01fd\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003" +
    "\u016d\005\u016c\101\u016f\001\002\000\012\003\uff6f\005\uff6f" +
    "\101\uff6f\102\006\001\002\000\010\003\u01d3\005\u01d4\101" +
    "\u01d5\001\002\000\012\003\uff92\005\uff92\101\uff92\102\uff92" +
    "\001\002\000\010\003\u01d3\005\u01d4\101\u01d5\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\004" +
    "\004\u0205\001\002\000\012\003\uff85\005\uff85\101\uff85\102" +
    "\uff85\001\002\000\010\003\305\005\304\101\310\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\012\003" +
    "\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003\u01d3" +
    "\005\u01d4\101\u01d5\001\002\000\012\003\uff89\005\uff89\101" +
    "\uff89\102\uff89\001\002\000\010\003\u01d3\005\u01d4\101\u01d5" +
    "\001\002\000\012\003\uff8a\005\uff8a\101\uff8a\102\uff8a\001" +
    "\002\000\010\003\u01d3\005\u01d4\101\u01d5\001\002\000\012" +
    "\003\uff87\005\uff87\101\uff87\102\uff87\001\002\000\010\003" +
    "\u01d3\005\u01d4\101\u01d5\001\002\000\012\003\uff88\005\uff88" +
    "\101\uff88\102\uff88\001\002\000\012\003\uff86\005\uff86\101" +
    "\uff86\102\uff86\001\002\000\004\004\u0215\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003" +
    "\u0218\005\u0217\101\u021a\001\002\000\020\011\u0231\013\u0232" +
    "\017\u0234\020\u0236\021\u0233\022\u0235\103\u0237\001\002\000" +
    "\016\003\uff6f\004\u0221\005\uff6f\014\u0220\101\uff6f\102\006" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\u0218\005\u0217\101\u021a\001\002\000\012\003" +
    "\uff9a\005\uff9a\101\uff9a\102\uff9a\001\002\000\010\003\u0101" +
    "\005\u0102\101\u0104\001\002\000\012\003\uffb2\005\uffb2\101" +
    "\uffb2\102\uffb2\001\002\000\010\003\u0218\005\u0217\101\u021a" +
    "\001\002\000\004\004\u022f\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\305\005\304" +
    "\101\310\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\u0218\005\u0217\101\u021a\001\002\000\012\003" +
    "\uff97\005\uff97\101\uff97\102\uff97\001\002\000\010\003\u0218" +
    "\005\u0217\101\u021a\001\002\000\012\003\uff98\005\uff98\101" +
    "\uff98\102\uff98\001\002\000\010\003\u0218\005\u0217\101\u021a" +
    "\001\002\000\012\003\uff95\005\uff95\101\uff95\102\uff95\001" +
    "\002\000\010\003\u0218\005\u0217\101\u021a\001\002\000\012" +
    "\003\uff96\005\uff96\101\uff96\102\uff96\001\002\000\012\003" +
    "\uff93\005\uff93\101\uff93\102\uff93\001\002\000\012\003\uff94" +
    "\005\uff94\101\uff94\102\uff94\001\002\000\016\003\245\004" +
    "\uff72\023\252\024\250\025\251\026\247\001\002\000\016" +
    "\003\245\004\uff72\023\252\024\250\025\251\026\247\001" +
    "\002\000\004\004\u0249\001\002\000\016\003\245\004\uff72" +
    "\023\252\024\250\025\251\026\247\001\002\000\004\004" +
    "\u0240\001\002\000\016\003\245\004\uff72\023\252\024\250" +
    "\025\251\026\247\001\002\000\004\014\u0238\001\002\000" +
    "\004\004\u0239\001\002\000\012\003\uff99\005\uff99\101\uff99" +
    "\102\uff99\001\002\000\004\004\u023b\001\002\000\012\003" +
    "\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003\u0134" +
    "\005\u0133\101\u0136\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\010\003\u0218\005\u0217\101\u021a" +
    "\001\002\000\012\003\uff9d\005\uff9d\101\uff9d\102\uff9d\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\u0218\005\u0217\101\u021a\001\002\000\012\003" +
    "\uff9b\005\uff9b\101\uff9b\102\uff9b\001\002\000\004\004\u0244" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\u0116\005\u0115\101\u0117\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003" +
    "\u0218\005\u0217\101\u021a\001\002\000\012\003\uff9e\005\uff9e" +
    "\101\uff9e\102\uff9e\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\010\003\u0218\005\u0217\101\u021a" +
    "\001\002\000\012\003\uff9c\005\uff9c\101\uff9c\102\uff9c\001" +
    "\002\000\004\004\u024d\001\002\000\012\003\uff6f\005\uff6f" +
    "\101\uff6f\102\006\001\002\000\010\003\361\005\362\101" +
    "\363\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\010\003\u0218\005\u0217\101\u021a\001\002\000" +
    "\012\003\uff9f\005\uff9f\101\uff9f\102\uff9f\001\002\000\004" +
    "\004\u0253\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\u016d\005\u016c\101\u016f\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\010\003\u0218\005\u0217\101\u021a\001\002\000\012\003\uffa0" +
    "\005\uffa0\101\uffa0\102\uffa0\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\u0101\005\u0102" +
    "\101\u0104\001\002\000\012\003\uffac\005\uffac\101\uffac\102" +
    "\uffac\001\002\000\004\004\u025c\001\002\000\012\003\uff6f" +
    "\005\uff6f\101\uff6f\102\006\001\002\000\010\003\u016d\005" +
    "\u016c\101\u016f\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\u0101\005\u0102\101\u0104\001" +
    "\002\000\012\003\uffb0\005\uffb0\101\uffb0\102\uffb0\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\010\003\u0101\005\u0102\101\u0104\001\002\000\012\003\uffab" +
    "\005\uffab\101\uffab\102\uffab\001\002\000\010\003\u0101\005" +
    "\u0102\101\u0104\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\004\004\u0267\001\002\000\012\003" +
    "\uffa1\005\uffa1\101\uffa1\102\uffa1\001\002\000\010\003\u0270" +
    "\005\u026b\101\u0269\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\022\011\u028a\013\u028b\016\375\017" +
    "\u028f\020\u028e\021\u028c\022\u028d\103\u0290\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\012\003" +
    "\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\012\003\uff6f" +
    "\005\uff6f\101\uff6f\102\006\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\030\003\uff6f\004\u0274" +
    "\005\uff6f\011\325\013\326\014\u0220\015\u0204\017\330\020" +
    "\331\101\uff6f\102\006\001\002\000\012\003\uff6f\005\uff6f" +
    "\101\uff6f\102\006\001\002\000\010\003\u0101\005\u0102\101" +
    "\u0104\001\002\000\012\003\uffa7\005\uffa7\101\uffa7\102\uffa7" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\u0270\005\u026b\101\u0269\001\002\000\012" +
    "\003\uffb4\005\uffb4\101\uffb4\102\uffb4\001\002\000\010\003" +
    "\336\005\335\101\342\001\002\000\012\003\uff6f\005\uff6f" +
    "\101\uff6f\102\006\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\u0270\005\u026b\101\u0269\001\002" +
    "\000\010\003\u0270\005\u026b\101\u0269\001\002\000\010\003" +
    "\u0270\005\u026b\101\u0269\001\002\000\012\003\uffb5\005\uffb5" +
    "\101\uffb5\102\uffb5\001\002\000\010\003\u0270\005\u026b\101" +
    "\u0269\001\002\000\012\003\uffb6\005\uffb6\101\uffb6\102\uffb6" +
    "\001\002\000\010\003\u0101\005\u0102\101\u0104\001\002\000" +
    "\012\003\uffa3\005\uffa3\101\uffa3\102\uffa3\001\002\000\010" +
    "\003\u0101\005\u0102\101\u0104\001\002\000\012\003\uffa6\005" +
    "\uffa6\101\uffa6\102\uffa6\001\002\000\010\003\u0101\005\u0102" +
    "\101\u0104\001\002\000\012\003\uffa5\005\uffa5\101\uffa5\102" +
    "\uffa5\001\002\000\010\003\u0101\005\u0102\101\u0104\001\002" +
    "\000\012\003\uffa4\005\uffa4\101\uffa4\102\uffa4\001\002\000" +
    "\016\003\245\004\uff72\023\252\024\250\025\251\026\247" +
    "\001\002\000\016\003\245\004\uff72\023\252\024\250\025" +
    "\251\026\247\001\002\000\004\004\u02a2\001\002\000\004" +
    "\004\u029f\001\002\000\016\003\245\004\uff72\023\252\024" +
    "\250\025\251\026\247\001\002\000\016\003\245\004\uff72" +
    "\023\252\024\250\025\251\026\247\001\002\000\016\011" +
    "\u0188\013\u0291\014\u0238\015\u01e2\017\u012e\020\u014f\001\002" +
    "\000\004\004\u0292\001\002\000\012\003\uffba\005\uffba\101" +
    "\uffba\102\uffba\001\002\000\004\004\u0294\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003" +
    "\u0116\005\u0115\101\u0117\001\002\000\012\003\uff6f\005\uff6f" +
    "\101\uff6f\102\006\001\002\000\010\003\u0270\005\u026b\101" +
    "\u0269\001\002\000\012\003\uffbf\005\uffbf\101\uffbf\102\uffbf" +
    "\001\002\000\004\004\u029a\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\u0134\005\u0133" +
    "\101\u0136\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\u0270\005\u026b\101\u0269\001\002" +
    "\000\012\003\uffbe\005\uffbe\101\uffbe\102\uffbe\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\u0270\005\u026b\101\u0269\001\002\000\012\003\uffbc\005" +
    "\uffbc\101\uffbc\102\uffbc\001\002\000\012\003\uff6f\005\uff6f" +
    "\101\uff6f\102\006\001\002\000\010\003\u0270\005\u026b\101" +
    "\u0269\001\002\000\012\003\uffbd\005\uffbd\101\uffbd\102\uffbd" +
    "\001\002\000\004\004\u02a6\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\361\005\362" +
    "\101\363\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\u0270\005\u026b\101\u0269\001\002" +
    "\000\012\003\uffc0\005\uffc0\101\uffc0\102\uffc0\001\002\000" +
    "\004\004\u02ac\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\u016d\005\u016c\101\u016f\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\u0270\005\u026b\101\u0269\001\002\000\012\003" +
    "\uffc1\005\uffc1\101\uffc1\102\uffc1\001\002\000\010\003\u0101" +
    "\005\u0102\101\u0104\001\002\000\012\003\uffa8\005\uffa8\101" +
    "\uffa8\102\uffa8\001\002\000\010\003\u0270\005\u026b\101\u0269" +
    "\001\002\000\012\003\uffa2\005\uffa2\101\uffa2\102\uffa2\001" +
    "\002\000\004\004\u02b6\001\002\000\012\003\uff6f\005\uff6f" +
    "\101\uff6f\102\006\001\002\000\010\003\u0134\005\u0133\101" +
    "\u0136\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\010\003\361\005\362\101\363\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\361\005\362\101\363\001\002\000\004\004\u02bd\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\u0116\005\u0115\101\u0117\001\002\000\012\003" +
    "\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003\361" +
    "\005\362\101\363\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\010\003\361\005\362\101\363" +
    "\001\002\000\004\004\u02c4\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\361\005\362" +
    "\101\363\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\361\005\362\101\363\001\002" +
    "\000\004\004\u02c9\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\010\003\u016d\005\u016c\101\u016f" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\361\005\362\101\363\001\002\000\010" +
    "\003\361\005\362\101\363\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\336\005\335" +
    "\101\342\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\361\005\362\101\363\001\002\000\010\003" +
    "\361\005\362\101\363\001\002\000\010\003\361\005\362" +
    "\101\363\001\002\000\010\003\361\005\362\101\363\001" +
    "\002\000\010\003\305\005\304\101\310\001\002\000\010" +
    "\003\336\005\335\101\342\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\u02e2\005\u02dd" +
    "\101\u02dc\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\026\011\u02f4\013\u02f5\014\u010b\015\u010c" +
    "\016\375\017\u02f8\020\u02f7\021\u02f3\022\u02f2\103\u02f6\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\032\003" +
    "\uff6f\004\u02e3\005\uff6f\011\325\013\326\014\u0220\015\u0204" +
    "\016\u0266\017\330\020\331\101\uff6f\102\006\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\u02e2\005\u02dd\101\u02dc\001\002\000\010\003\u02e2\005" +
    "\u02dd\101\u02dc\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\u02e2\005\u02dd\101\u02dc\001\002\000\010" +
    "\003\u02e2\005\u02dd\101\u02dc\001\002\000\010\003\u02e2\005" +
    "\u02dd\101\u02dc\001\002\000\010\003\u02e2\005\u02dd\101\u02dc" +
    "\001\002\000\010\003\336\005\335\101\342\001\002\000" +
    "\010\003\336\005\335\101\342\001\002\000\010\003\336" +
    "\005\335\101\342\001\002\000\010\003\336\005\335\101" +
    "\342\001\002\000\004\004\u030f\001\002\000\004\004\u030d" +
    "\001\002\000\016\003\245\004\uff72\023\252\024\250\025" +
    "\251\026\247\001\002\000\016\003\245\004\uff72\023\252" +
    "\024\250\025\251\026\247\001\002\000\020\011\u0188\013" +
    "\u0291\014\u0238\015\u01e2\016\u01c8\017\u012e\020\u014f\001\002" +
    "\000\016\003\245\004\uff72\023\252\024\250\025\251\026" +
    "\247\001\002\000\016\003\245\004\uff72\023\252\024\250" +
    "\025\251\026\247\001\002\000\004\004\u02fa\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\u0116\005\u0115\101\u0117\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\u02e2\005\u02dd" +
    "\101\u02dc\001\002\000\004\004\u02ff\001\002\000\012\003" +
    "\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003\u0134" +
    "\005\u0133\101\u0136\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\010\003\u02e2\005\u02dd\101\u02dc" +
    "\001\002\000\004\004\u0304\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\361\005\362" +
    "\101\363\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\u02e2\005\u02dd\101\u02dc\001\002" +
    "\000\004\004\u0309\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\010\003\u016d\005\u016c\101\u016f" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\u02e2\005\u02dd\101\u02dc\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003" +
    "\u02e2\005\u02dd\101\u02dc\001\002\000\012\003\uff6f\005\uff6f" +
    "\101\uff6f\102\006\001\002\000\010\003\u02e2\005\u02dd\101" +
    "\u02dc\001\002\000\010\003\u02e2\005\u02dd\101\u02dc\001\002" +
    "\000\004\004\u032f\001\002\000\004\004\u032d\001\002\000" +
    "\016\003\245\004\uff72\023\252\024\250\025\251\026\247" +
    "\001\002\000\016\003\245\004\uff72\023\252\024\250\025" +
    "\251\026\247\001\002\000\014\011\u0188\013\u0291\016\u01c8" +
    "\017\u012e\020\u014f\001\002\000\016\003\245\004\uff72\023" +
    "\252\024\250\025\251\026\247\001\002\000\016\003\245" +
    "\004\uff72\023\252\024\250\025\251\026\247\001\002\000" +
    "\004\004\u031a\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\u0116\005\u0115\101\u0117\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\336\005\335\101\342\001\002\000\004\004" +
    "\u031f\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006" +
    "\001\002\000\010\003\u0134\005\u0133\101\u0136\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\336\005\335\101\342\001\002\000\004\004\u0324\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\361\005\362\101\363\001\002\000\012\003" +
    "\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003\336" +
    "\005\335\101\342\001\002\000\004\004\u0329\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\u016d\005\u016c\101\u016f\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\336\005\335" +
    "\101\342\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\336\005\335\101\342\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\010\003\336\005\335\101\342\001\002\000\010\003\305" +
    "\005\304\101\310\001\002\000\012\003\uffc3\005\uffc3\101" +
    "\uffc3\102\uffc3\001\002\000\012\003\uffd1\005\uffd1\101\uffd1" +
    "\102\uffd1\001\002\000\012\003\uffb3\005\uffb3\101\uffb3\102" +
    "\uffb3\001\002\000\012\003\uff77\005\uff77\101\uff77\102\uff77" +
    "\001\002\000\016\003\245\004\uff72\023\252\024\250\025" +
    "\251\026\247\001\002\000\016\003\245\004\uff72\023\252" +
    "\024\250\025\251\026\247\001\002\000\004\004\u0349\001" +
    "\002\000\016\003\245\004\uff72\023\252\024\250\025\251" +
    "\026\247\001\002\000\004\004\u0342\001\002\000\016\003" +
    "\245\004\uff72\023\252\024\250\025\251\026\247\001\002" +
    "\000\012\011\u0188\013\u0291\017\u012e\020\u014f\001\002\000" +
    "\004\004\u033e\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\u0134\005\u0133\101\u0136\001" +
    "\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002" +
    "\000\010\003\305\005\304\101\310\001\002\000\012\003" +
    "\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003\305" +
    "\005\304\101\310\001\002\000\004\004\u0345\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\u0116\005\u0115\101\u0117\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\305\005\304" +
    "\101\310\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\305\005\304\101\310\001\002" +
    "\000\004\004\u034c\001\002\000\012\003\uff6f\005\uff6f\101" +
    "\uff6f\102\006\001\002\000\010\003\361\005\362\101\363" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\305\005\304\101\310\001\002\000\004" +
    "\004\u0351\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\u016d\005\u016c\101\u016f\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\010\003\305\005\304\101\310\001\002\000\010\003\272" +
    "\005\271\101\273\001\002\000\006\005\uffe2\102\uffe2\001" +
    "\002\000\006\005\uffdf\102\uffdf\001\002\000\006\005\uffe0" +
    "\102\uffe0\001\002\000\016\003\245\004\uff72\023\252\024" +
    "\250\025\251\026\247\001\002\000\016\003\245\004\uff72" +
    "\023\252\024\250\025\251\026\247\001\002\000\004\004" +
    "\u0371\001\002\000\016\003\245\004\uff72\023\252\024\250" +
    "\025\251\026\247\001\002\000\004\004\u0368\001\002\000" +
    "\016\003\245\004\uff72\023\252\024\250\025\251\026\247" +
    "\001\002\000\004\010\u0360\001\002\000\004\004\u0361\001" +
    "\002\000\006\005\uffe5\102\uffe5\001\002\000\004\004\u0363" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\u0134\005\u0133\101\u0136\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003" +
    "\272\005\271\101\273\001\002\000\006\005\uffe9\102\uffe9" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\272\005\271\101\273\001\002\000\006" +
    "\005\uffe7\102\uffe7\001\002\000\004\004\u036c\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\u0116\005\u0115\101\u0117\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\272\005\271" +
    "\101\273\001\002\000\006\005\uffea\102\uffea\001\002\000" +
    "\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010" +
    "\003\272\005\271\101\273\001\002\000\006\005\uffe8\102" +
    "\uffe8\001\002\000\004\004\u0375\001\002\000\012\003\uff6f" +
    "\005\uff6f\101\uff6f\102\006\001\002\000\010\003\361\005" +
    "\362\101\363\001\002\000\012\003\uff6f\005\uff6f\101\uff6f" +
    "\102\006\001\002\000\010\003\272\005\271\101\273\001" +
    "\002\000\006\005\uffeb\102\uffeb\001\002\000\004\004\u037b" +
    "\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001" +
    "\002\000\010\003\u016d\005\u016c\101\u016f\001\002\000\012" +
    "\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000\010\003" +
    "\272\005\271\101\273\001\002\000\006\005\uffec\102\uffec" +
    "\001\002\000\004\004\uff71\001\002\000\012\003\uff6f\005" +
    "\uff6f\101\uff6f\102\006\001\002\000\010\003\272\005\271" +
    "\101\273\001\002\000\006\005\uffed\102\uffed\001\002\000" +
    "\004\005\u0385\001\002\000\004\103\u0386\001\002\000\004" +
    "\006\u0387\001\002\000\004\004\u0388\001\002\000\006\002" +
    "\uff6f\102\006\001\002\000\004\002\ufff9\001\002\000\004" +
    "\005\u03b0\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\u038e\005\u038f\101\273\001\002" +
    "\000\006\005\uff6f\102\006\001\002\000\016\003\uff6f\004" +
    "\u039f\005\uff6f\010\300\101\uff6f\102\006\001\002\000\022" +
    "\011\u0359\012\u0390\013\u035a\017\u035c\020\u035e\021\u035b\022" +
    "\u035d\103\u035f\001\002\000\016\003\245\004\uff72\023\252" +
    "\024\250\025\251\026\247\001\002\000\004\004\u0392\001" +
    "\002\000\010\005\uff6f\101\uff6f\102\006\001\002\000\006" +
    "\005\u0394\101\u0395\001\002\000\004\103\u039b\001\002\000" +
    "\006\005\uff6f\102\006\001\002\000\004\005\u0397\001\002" +
    "\000\004\103\u0398\001\002\000\004\012\u0399\001\002\000" +
    "\004\004\u039a\001\002\000\006\005\ufff2\102\ufff2\001\002" +
    "\000\004\012\u039c\001\002\000\004\004\u039d\001\002\000" +
    "\006\005\ufff1\102\ufff1\001\002\000\010\003\272\005\u03a7" +
    "\101\273\001\002\000\012\003\uff6f\005\uff6f\101\uff6f\102" +
    "\006\001\002\000\010\003\305\005\304\101\u03a1\001\002" +
    "\000\012\003\uff6f\005\uff6f\101\uff6f\102\006\001\002\000" +
    "\010\003\305\005\u03a3\101\310\001\002\000\022\011\u0336" +
    "\013\u0337\016\375\017\u0339\020\u033b\021\u0338\022\u033a\103" +
    "\u03a4\001\002\000\014\011\u0188\012\u03a5\013\u0291\017\u012e" +
    "\020\u014f\001\002\000\004\004\u03a6\001\002\000\006\005" +
    "\ufff0\102\ufff0\001\002\000\020\011\u0359\013\u035a\017\u035c" +
    "\020\u035e\021\u035b\022\u035d\103\u03a8\001\002\000\006\010" +
    "\u0360\012\u03a9\001\002\000\004\004\u03aa\001\002\000\006" +
    "\005\uffef\102\uffef\001\002\000\004\005\u03ac\001\002\000" +
    "\004\103\u03ad\001\002\000\004\007\u03ae\001\002\000\004" +
    "\004\u03af\001\002\000\010\003\ufff4\005\ufff4\102\ufff4\001" +
    "\002\000\004\103\u03b1\001\002\000\004\007\u03b2\001\002" +
    "\000\004\004\u03b3\001\002\000\010\003\ufff3\005\ufff3\102" +
    "\ufff3\001\002\000\016\003\245\004\uff72\023\252\024\250" +
    "\025\251\026\247\001\002\000\004\004\u03b6\001\002\000" +
    "\010\003\uff6f\005\uff6f\102\006\001\002\000\006\003\u03b9" +
    "\005\u03ba\001\002\000\006\005\uff6f\102\006\001\002\000" +
    "\010\004\u03bf\005\uff6f\102\006\001\002\000\006\012\u0390" +
    "\103\u03bb\001\002\000\004\007\u03bc\001\002\000\004\004" +
    "\u03bd\001\002\000\010\003\ufff5\005\ufff5\102\ufff5\001\002" +
    "\000\004\005\u03c5\001\002\000\006\101\uff6f\102\006\001" +
    "\002\000\004\101\u03c1\001\002\000\006\005\uff6f\102\006" +
    "\001\002\000\004\005\u03c3\001\002\000\004\103\u03c4\001" +
    "\002\000\004\012\u03a5\001\002\000\004\103\u03c6\001\002" +
    "\000\004\012\u03a9\001\002\000\004\005\u03c8\001\002\000" +
    "\004\103\u03c9\001\002\000\004\007\u03ca\001\002\000\004" +
    "\004\u03cb\001\002\000\010\003\ufff6\005\ufff6\102\ufff6\001" +
    "\002\000\004\006\u03cd\001\002\000\016\003\245\004\uff72" +
    "\023\252\024\250\025\251\026\247\001\002\000\004\004" +
    "\u03cf\001\002\000\010\003\uff6f\005\uff6f\102\006\001\002" +
    "\000\006\003\223\005\u03d1\001\002\000\010\007\u03b4\010" +
    "\240\103\u03e7\001\002\000\006\005\uff6f\102\006\001\002" +
    "\000\010\003\uff6f\005\uff6f\102\006\001\002\000\006\003" +
    "\227\005\u03d5\001\002\000\006\010\240\103\u03dd\001\002" +
    "\000\006\005\uff6f\102\006\001\002\000\004\005\u03d8\001" +
    "\002\000\004\103\u03d9\001\002\000\004\006\u03da\001\002" +
    "\000\004\004\u03db\001\002\000\006\002\uff6f\102\006\001" +
    "\002\000\004\002\000\001\002\000\004\006\u03de\001\002" +
    "\000\004\004\u03df\001\002\000\006\002\uff6f\102\006\001" +
    "\002\000\004\002\ufffe\001\002\000\004\005\u03e2\001\002" +
    "\000\004\103\u03e3\001\002\000\004\006\u03e4\001\002\000" +
    "\004\004\u03e5\001\002\000\006\002\uff6f\102\006\001\002" +
    "\000\004\002\ufffd\001\002\000\004\006\u03e8\001\002\000" +
    "\004\004\u03e9\001\002\000\006\002\uff6f\102\006\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03e8\000\006\002\006\015\003\001\001\000\002\001" +
    "\001\000\004\015\216\001\001\000\016\003\026\004\013" +
    "\005\021\006\022\007\024\010\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\215\004\013\005\021" +
    "\006\022\007\024\010\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\214\004\013\005\021\006\022" +
    "\007\024\010\020\001\001\000\002\001\001\000\016\003" +
    "\170\004\013\005\021\006\022\007\024\010\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\161\004\013\005\021\006\022\007\024\010\020" +
    "\001\001\000\006\041\151\042\152\001\001\000\016\003" +
    "\147\004\013\005\021\006\022\007\024\010\020\001\001" +
    "\000\016\003\145\004\013\005\021\006\022\007\024\010" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\036\012\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\047\040\052\001\001\000\006\010\047\040\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\047\040\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\047\040\054\001\001\000\002" +
    "\001\001\000\006\010\047\040\111\001\001\000\006\010" +
    "\047\040\110\001\001\000\006\010\047\040\107\001\001" +
    "\000\006\010\047\040\106\001\001\000\006\010\047\040" +
    "\105\001\001\000\006\010\047\040\104\001\001\000\006" +
    "\010\047\040\103\001\001\000\006\010\047\040\102\001" +
    "\001\000\006\010\047\040\100\001\001\000\006\010\047" +
    "\040\077\001\001\000\006\010\047\040\075\001\001\000" +
    "\006\010\047\040\073\001\001\000\006\010\047\040\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\047\040\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\047\040\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\047\040\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\150\004\013\005\021\006\022\007\024" +
    "\010\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\047\040\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\151\042\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\163\004\013\005\021\006" +
    "\022\007\024\010\020\001\001\000\002\001\001\000\006" +
    "\010\047\040\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\047" +
    "\040\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\047\040\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\047\040\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\047\040\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\224\016\223\001\001" +
    "\000\004\015\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0389\001\001\000\004\015\u0383\001\001" +
    "\000\004\015\225\001\001\000\004\016\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\236\001\001\000\002\001\001" +
    "\000\004\021\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\243\001\001\000\002\001\001\000\004" +
    "\021\u037f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\265\001\001\000\002" +
    "\001\001\000\004\015\267\001\001\000\004\017\273\001" +
    "\001\000\002\001\001\000\004\015\276\001\001\000\004" +
    "\015\274\001\001\000\002\001\001\000\004\017\275\001" +
    "\001\000\002\001\001\000\004\017\u0357\001\001\000\002" +
    "\001\001\000\004\015\301\001\001\000\012\023\305\024" +
    "\306\025\310\035\302\001\001\000\004\015\u0354\001\001" +
    "\000\002\001\001\000\004\015\326\001\001\000\004\015" +
    "\322\001\001\000\004\015\320\001\001\000\004\015\313" +
    "\001\001\000\004\015\311\001\001\000\004\017\312\001" +
    "\001\000\002\001\001\000\012\023\315\024\316\025\317" +
    "\035\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\321\001\001" +
    "\000\002\001\001\000\004\017\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\u0146" +
    "\024\u017f\025\u0275\035\u0125\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\332\001\001\000\014\023\336" +
    "\024\340\025\342\034\337\035\333\001\001\000\004\015" +
    "\u0330\001\001\000\002\001\001\000\004\015\u02d8\001\001" +
    "\000\004\015\u02d7\001\001\000\004\015\357\001\001\000" +
    "\004\015\352\001\001\000\004\015\350\001\001\000\004" +
    "\015\343\001\001\000\012\023\345\024\346\025\347\035" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\315\024\316\025" +
    "\317\034\351\035\314\001\001\000\002\001\001\000\012" +
    "\023\354\024\355\025\356\035\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\363\001\001\000\004\015\u02cc\001\001\000" +
    "\002\001\001\000\004\015\364\001\001\000\002\001\001" +
    "\000\004\025\317\001\001\000\004\021\u02c7\001\001\000" +
    "\004\021\u02c2\001\001\000\002\001\001\000\004\021\u02bb" +
    "\001\001\000\002\001\001\000\004\021\u02b4\001\001\000" +
    "\002\001\001\000\004\021\375\001\001\000\002\001\001" +
    "\000\004\015\377\001\001\000\004\034\u0102\001\001\000" +
    "\004\015\u0263\001\001\000\002\001\001\000\004\015\u0105" +
    "\001\001\000\004\015\u0104\001\001\000\004\034\351\001" +
    "\001\000\004\025\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u025a\001\001\000\002\001\001\000" +
    "\004\021\u0213\001\001\000\004\021\u01cf\001\001\000\004" +
    "\021\u01c9\001\001\000\002\001\001\000\004\021\u01c1\001" +
    "\001\000\004\021\u0110\001\001\000\002\001\001\000\004" +
    "\015\u0112\001\001\000\004\035\u0113\001\001\000\004\015" +
    "\u01bf\001\001\000\002\001\001\000\004\015\u0118\001\001" +
    "\000\004\015\u0117\001\001\000\004\035\314\001\001\000" +
    "\004\035\u0125\001\001\000\004\015\u011a\001\001\000\012" +
    "\023\u011c\024\u011d\025\u011e\035\u011b\001\001\000\004\015" +
    "\u0123\001\001\000\004\015\u0121\001\001\000\004\015\u0120" +
    "\001\001\000\004\015\u011f\001\001\000\004\035\344\001" +
    "\001\000\004\035\353\001\001\000\004\035\u0122\001\001" +
    "\000\002\001\001\000\004\035\u0124\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u01b9\001\001\000\004" +
    "\021\u01b3\001\001\000\002\001\001\000\004\021\u01aa\001" +
    "\001\000\002\001\001\000\004\021\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0131\001\001\000\004\023\u0134\001\001" +
    "\000\002\001\001\000\004\015\u0139\001\001\000\004\015" +
    "\u0137\001\001\000\004\015\u0136\001\001\000\004\023\315" +
    "\001\001\000\004\035\u0138\001\001\000\002\001\001\000" +
    "\004\023\u0146\001\001\000\004\015\u013b\001\001\000\012" +
    "\023\u013d\024\u013e\025\u013f\035\u013c\001\001\000\004\015" +
    "\u0144\001\001\000\004\015\u0142\001\001\000\004\015\u0141" +
    "\001\001\000\004\015\u0140\001\001\000\004\023\345\001" +
    "\001\000\004\023\354\001\001\000\004\023\u0143\001\001" +
    "\000\002\001\001\000\004\023\u0145\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u0168\001\001\000\004" +
    "\021\u0162\001\001\000\002\001\001\000\004\021\u0159\001" +
    "\001\000\004\021\u0153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u0151\001\001\000\004\023\u0152\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u0155\001\001\000\004\035" +
    "\u0156\001\001\000\004\015\u0157\001\001\000\004\023\u0158" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u015b\001\001\000\004\023\u015c\001\001\000\004\015\u015d" +
    "\001\001\000\004\023\u015e\001\001\000\002\001\001\000" +
    "\004\015\u0160\001\001\000\004\023\u0161\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0164\001\001\000" +
    "\004\025\u0165\001\001\000\004\015\u0166\001\001\000\004" +
    "\023\u0167\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u016a\001\001\000\004\024\u016d\001\001\000\002" +
    "\001\001\000\004\015\u0172\001\001\000\004\015\u0170\001" +
    "\001\000\004\015\u016f\001\001\000\004\024\316\001\001" +
    "\000\004\023\u0171\001\001\000\002\001\001\000\004\024" +
    "\u017f\001\001\000\004\015\u0174\001\001\000\012\023\u0176" +
    "\024\u0177\025\u0178\035\u0175\001\001\000\004\015\u017d\001" +
    "\001\000\004\015\u017b\001\001\000\004\015\u017a\001\001" +
    "\000\004\015\u0179\001\001\000\004\024\346\001\001\000" +
    "\004\024\355\001\001\000\004\024\u017c\001\001\000\002" +
    "\001\001\000\004\024\u017e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u01a1\001\001\000\002\001\001" +
    "\000\004\021\u0198\001\001\000\004\021\u0192\001\001\000" +
    "\002\001\001\000\004\021\u0189\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u018b\001\001\000\004\023\u018c\001\001\000\004" +
    "\015\u018d\001\001\000\004\024\u018e\001\001\000\002\001" +
    "\001\000\004\015\u0190\001\001\000\004\024\u0191\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u0194\001" +
    "\001\000\004\035\u0195\001\001\000\004\015\u0196\001\001" +
    "\000\004\024\u0197\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u019a\001\001\000\004\025\u019b\001\001" +
    "\000\004\015\u019c\001\001\000\004\024\u019d\001\001\000" +
    "\002\001\001\000\004\015\u019f\001\001\000\004\024\u01a0" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u01a3\001\001\000\004\024\u01a4\001\001\000\004\015\u01a5" +
    "\001\001\000\004\024\u01a6\001\001\000\002\001\001\000" +
    "\004\015\u01a8\001\001\000\004\035\u01a9\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u01ac\001\001\000" +
    "\004\035\u01ad\001\001\000\004\015\u01ae\001\001\000\004" +
    "\035\u01af\001\001\000\002\001\001\000\004\015\u01b1\001" +
    "\001\000\004\035\u01b2\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u01b5\001\001\000\004\025\u01b6\001" +
    "\001\000\004\015\u01b7\001\001\000\004\035\u01b8\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u01bb\001" +
    "\001\000\004\024\u01bc\001\001\000\004\015\u01bd\001\001" +
    "\000\004\035\u01be\001\001\000\002\001\001\000\004\034" +
    "\u01c0\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u01c3\001\001\000\004\023\u01c4\001\001\000\004\015" +
    "\u01c5\001\001\000\004\034\u01c6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u01cb\001\001\000\004\025\u01cc\001\001\000\004" +
    "\015\u01cd\001\001\000\004\034\u01ce\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u01d1\001\001\000\004" +
    "\027\u01d5\001\001\000\004\015\u0201\001\001\000\002\001" +
    "\001\000\004\015\u01d8\001\001\000\004\015\u01d6\001\001" +
    "\000\004\034\u01d7\001\001\000\002\001\001\000\004\027" +
    "\u01d9\001\001\000\002\001\001\000\004\021\u01fb\001\001" +
    "\000\004\021\u01f5\001\001\000\002\001\001\000\004\021" +
    "\u01ec\001\001\000\002\001\001\000\004\021\u01e3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u01e5\001\001\000\004\023\u01e6" +
    "\001\001\000\004\015\u01e7\001\001\000\004\027\u01e8\001" +
    "\001\000\002\001\001\000\004\015\u01ea\001\001\000\004" +
    "\027\u01eb\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u01ee\001\001\000\004\035\u01ef\001\001\000\004" +
    "\015\u01f0\001\001\000\004\027\u01f1\001\001\000\002\001" +
    "\001\000\004\015\u01f3\001\001\000\004\027\u01f4\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u01f7\001" +
    "\001\000\004\025\u01f8\001\001\000\004\015\u01f9\001\001" +
    "\000\004\027\u01fa\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u01fd\001\001\000\004\024\u01fe\001\001" +
    "\000\004\015\u01ff\001\001\000\004\027\u0200\001\001\000" +
    "\002\001\001\000\004\027\u0212\001\001\000\004\015\u0205" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\u0207\024\u0208\025\u0209\035\u0206\001\001\000\004\015\u0210" +
    "\001\001\000\004\015\u020e\001\001\000\004\015\u020c\001" +
    "\001\000\004\015\u020a\001\001\000\004\027\u020b\001\001" +
    "\000\002\001\001\000\004\027\u020d\001\001\000\002\001" +
    "\001\000\004\027\u020f\001\001\000\002\001\001\000\004" +
    "\027\u0211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0215\001\001\000\004\026\u0218" +
    "\001\001\000\002\001\001\000\004\015\u021e\001\001\000" +
    "\004\015\u021c\001\001\000\004\015\u021a\001\001\000\004" +
    "\026\u021b\001\001\000\002\001\001\000\004\034\u021d\001" +
    "\001\000\002\001\001\000\004\026\u022f\001\001\000\002" +
    "\001\001\000\004\015\u0221\001\001\000\012\023\u0223\024" +
    "\u0224\025\u0225\035\u0222\001\001\000\004\015\u022c\001\001" +
    "\000\004\015\u022a\001\001\000\004\015\u0228\001\001\000" +
    "\004\015\u0226\001\001\000\004\026\u0227\001\001\000\002" +
    "\001\001\000\004\026\u0229\001\001\000\002\001\001\000" +
    "\004\026\u022b\001\001\000\002\001\001\000\004\026\u022d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0251\001\001\000\004\021\u024b\001\001" +
    "\000\002\001\001\000\004\021\u0242\001\001\000\002\001" +
    "\001\000\004\021\u0239\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u023b\001\001\000\004\023\u023c\001\001\000\004\015\u023d" +
    "\001\001\000\004\026\u023e\001\001\000\002\001\001\000" +
    "\004\015\u0240\001\001\000\004\026\u0241\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0244\001\001\000" +
    "\004\035\u0245\001\001\000\004\015\u0246\001\001\000\004" +
    "\026\u0247\001\001\000\002\001\001\000\004\015\u0249\001" +
    "\001\000\004\026\u024a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u024d\001\001\000\004\025\u024e\001" +
    "\001\000\004\015\u024f\001\001\000\004\026\u0250\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u0253\001" +
    "\001\000\004\024\u0254\001\001\000\004\015\u0255\001\001" +
    "\000\004\026\u0256\001\001\000\002\001\001\000\004\015" +
    "\u0258\001\001\000\004\034\u0259\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u025c\001\001\000\004\024" +
    "\u025d\001\001\000\004\015\u025e\001\001\000\004\034\u025f" +
    "\001\001\000\002\001\001\000\004\015\u0261\001\001\000" +
    "\004\034\u0262\001\001\000\002\001\001\000\004\034\u02b3" +
    "\001\001\000\004\015\u0267\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\u026e\024\u026d\025\u026c\026\u0269" +
    "\027\u0270\035\u026b\001\001\000\004\015\u02b2\001\001\000" +
    "\004\015\u02b0\001\001\000\002\001\001\000\004\015\u0287" +
    "\001\001\000\004\015\u0285\001\001\000\004\015\u0283\001" +
    "\001\000\004\015\u0281\001\001\000\004\015\u0274\001\001" +
    "\000\004\015\u0271\001\001\000\004\034\u0272\001\001\000" +
    "\002\001\001\000\004\015\u0276\001\001\000\016\023\u0146" +
    "\024\u017f\025\u0275\026\u022f\027\u0212\035\u0125\001\001\000" +
    "\002\001\001\000\014\023\u0278\024\u0279\025\u027a\034\337" +
    "\035\u0277\001\001\000\004\015\u027f\001\001\000\004\015" +
    "\u027d\001\001\000\004\015\u027c\001\001\000\004\015\u027b" +
    "\001\001\000\016\023\345\024\346\025\347\026\u0227\027" +
    "\u020b\035\344\001\001\000\016\023\354\024\355\025\356" +
    "\026\u0229\027\u020d\035\353\001\001\000\016\023\u0143\024" +
    "\u017c\025\u027e\026\u022b\027\u020f\035\u0122\001\001\000\002" +
    "\001\001\000\016\023\u0145\024\u017e\025\u0280\026\u022d\027" +
    "\u0211\035\u0124\001\001\000\002\001\001\000\004\034\u0282" +
    "\001\001\000\002\001\001\000\004\034\u0284\001\001\000" +
    "\002\001\001\000\004\034\u0286\001\001\000\002\001\001" +
    "\000\004\034\u0288\001\001\000\002\001\001\000\004\021" +
    "\u02aa\001\001\000\004\021\u02a4\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u0298\001\001\000\004\021" +
    "\u0292\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0294\001\001\000" +
    "\004\035\u0295\001\001\000\004\015\u0296\001\001\000\016" +
    "\023\u0158\024\u0197\025\u0297\026\u0247\027\u01f1\035\u01af\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u029a" +
    "\001\001\000\004\023\u029b\001\001\000\004\015\u029c\001" +
    "\001\000\016\023\u015e\024\u018e\025\u029d\026\u023e\027\u01e8" +
    "\035\u0138\001\001\000\002\001\001\000\004\015\u029f\001" +
    "\001\000\016\023\u0152\024\u0191\025\u02a0\026\u0241\027\u01eb" +
    "\035\u01a9\001\001\000\002\001\001\000\004\015\u02a2\001" +
    "\001\000\016\023\u0161\024\u01a0\025\u02a3\026\u024a\027\u01f4" +
    "\035\u01b2\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u02a6\001\001\000\004\025\u02a7\001\001\000\004" +
    "\015\u02a8\001\001\000\016\023\u0167\024\u019d\025\u02a9\026" +
    "\u0250\027\u01fa\035\u01b8\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u02ac\001\001\000\004\024\u02ad\001" +
    "\001\000\004\015\u02ae\001\001\000\016\023\u0171\024\u01a6" +
    "\025\u02af\026\u0256\027\u0200\035\u01be\001\001\000\002\001" +
    "\001\000\004\034\u02b1\001\001\000\002\001\001\000\016" +
    "\023\315\024\316\025\317\026\u021b\027\u01d9\035\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u02b6" +
    "\001\001\000\004\023\u02b7\001\001\000\004\015\u02b8\001" +
    "\001\000\004\025\u029d\001\001\000\004\015\u02ba\001\001" +
    "\000\004\025\u02a0\001\001\000\002\001\001\000\004\015" +
    "\u02bd\001\001\000\004\035\u02be\001\001\000\004\015\u02bf" +
    "\001\001\000\004\025\u0297\001\001\000\004\015\u02c1\001" +
    "\001\000\004\025\u02a3\001\001\000\002\001\001\000\004" +
    "\015\u02c4\001\001\000\004\025\u02c5\001\001\000\004\015" +
    "\u02c6\001\001\000\004\025\u02a9\001\001\000\002\001\001" +
    "\000\004\015\u02c9\001\001\000\004\024\u02ca\001\001\000" +
    "\004\015\u02cb\001\001\000\004\025\u02af\001\001\000\004" +
    "\025\u0275\001\001\000\004\015\u02ce\001\001\000\014\023" +
    "\u02d0\024\u02d1\025\u02d2\034\337\035\u02cf\001\001\000\004" +
    "\015\u02d6\001\001\000\004\015\u02d5\001\001\000\004\015" +
    "\u02d4\001\001\000\004\015\u02d3\001\001\000\004\025\347" +
    "\001\001\000\004\025\356\001\001\000\004\025\u027e\001" +
    "\001\000\004\025\u0280\001\001\000\012\023\u0143\024\u017c" +
    "\025\u027e\035\u0122\001\001\000\014\023\u0146\024\u017f\025" +
    "\u0275\034\u02b3\035\u0125\001\001\000\004\015\u02da\001\001" +
    "\000\020\023\u02e0\024\u02df\025\u02de\026\u0269\027\u0270\034" +
    "\337\035\u02dd\001\001\000\004\015\u0310\001\001\000\002" +
    "\001\001\000\004\015\u02f0\001\001\000\004\015\u02ef\001" +
    "\001\000\004\015\u02ee\001\001\000\004\015\u02ed\001\001" +
    "\000\004\015\u02e3\001\001\000\004\015\u02e4\001\001\000" +
    "\020\023\u0146\024\u017f\025\u0275\026\u022f\027\u0212\034\u02b3" +
    "\035\u0125\001\001\000\020\023\u02e8\024\u02e7\025\u02e6\026" +
    "\u0269\027\u0270\034\337\035\u02e5\001\001\000\004\015\u02ec" +
    "\001\001\000\004\015\u02eb\001\001\000\004\015\u02ea\001" +
    "\001\000\004\015\u02e9\001\001\000\020\023\u0143\024\u017c" +
    "\025\u027e\026\u022b\027\u020f\034\u0282\035\u0122\001\001\000" +
    "\020\023\354\024\355\025\356\026\u0229\027\u020d\034\u0284" +
    "\035\353\001\001\000\020\023\345\024\346\025\347\026" +
    "\u0227\027\u020b\034\u0286\035\344\001\001\000\020\023\u0145" +
    "\024\u017e\025\u0280\026\u022d\027\u0211\034\u0288\035\u0124\001" +
    "\001\000\014\023\u0143\024\u017c\025\u027e\034\u0282\035\u0122" +
    "\001\001\000\014\023\354\024\355\025\356\034\u0284\035" +
    "\353\001\001\000\014\023\345\024\346\025\347\034\u0286" +
    "\035\344\001\001\000\014\023\u0145\024\u017e\025\u0280\034" +
    "\u0288\035\u0124\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u0307\001\001\000\004\021\u0302\001\001\000" +
    "\002\001\001\000\004\021\u02fd\001\001\000\004\021\u02f8" +
    "\001\001\000\002\001\001\000\004\015\u02fa\001\001\000" +
    "\004\035\u02fb\001\001\000\004\015\u02fc\001\001\000\020" +
    "\023\u0158\024\u0197\025\u0297\026\u0247\027\u01f1\034\u01c0\035" +
    "\u01af\001\001\000\002\001\001\000\004\015\u02ff\001\001" +
    "\000\004\023\u0300\001\001\000\004\015\u0301\001\001\000" +
    "\020\023\u015e\024\u018e\025\u029d\026\u023e\027\u01e8\034\u01c6" +
    "\035\u0138\001\001\000\002\001\001\000\004\015\u0304\001" +
    "\001\000\004\025\u0305\001\001\000\004\015\u0306\001\001" +
    "\000\020\023\u0167\024\u019d\025\u02a9\026\u0250\027\u01fa\034" +
    "\u01ce\035\u01b8\001\001\000\002\001\001\000\004\015\u0309" +
    "\001\001\000\004\024\u030a\001\001\000\004\015\u030b\001" +
    "\001\000\020\023\u0171\024\u01a6\025\u02af\026\u0256\027\u0200" +
    "\034\u025f\035\u01be\001\001\000\004\015\u030d\001\001\000" +
    "\020\023\u0161\024\u01a0\025\u02a3\026\u024a\027\u01f4\034\u0259" +
    "\035\u01b2\001\001\000\004\015\u030f\001\001\000\020\023" +
    "\u0152\024\u0191\025\u02a0\026\u0241\027\u01eb\034\u0262\035\u01a9" +
    "\001\001\000\020\023\315\024\316\025\317\026\u021b\027" +
    "\u01d9\034\351\035\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u0327\001\001\000\004\021\u0322\001" +
    "\001\000\002\001\001\000\004\021\u031d\001\001\000\004" +
    "\021\u0318\001\001\000\002\001\001\000\004\015\u031a\001" +
    "\001\000\004\035\u031b\001\001\000\004\015\u031c\001\001" +
    "\000\014\023\u0158\024\u0197\025\u0297\034\u01c0\035\u01af\001" +
    "\001\000\002\001\001\000\004\015\u031f\001\001\000\004" +
    "\023\u0320\001\001\000\004\015\u0321\001\001\000\014\023" +
    "\u015e\024\u018e\025\u029d\034\u01c6\035\u0138\001\001\000\002" +
    "\001\001\000\004\015\u0324\001\001\000\004\025\u0325\001" +
    "\001\000\004\015\u0326\001\001\000\014\023\u0167\024\u019d" +
    "\025\u02a9\034\u01ce\035\u01b8\001\001\000\002\001\001\000" +
    "\004\015\u0329\001\001\000\004\024\u032a\001\001\000\004" +
    "\015\u032b\001\001\000\014\023\u0171\024\u01a6\025\u02af\034" +
    "\u025f\035\u01be\001\001\000\004\015\u032d\001\001\000\014" +
    "\023\u0161\024\u01a0\025\u02a3\034\u0259\035\u01b2\001\001\000" +
    "\004\015\u032f\001\001\000\014\023\u0152\024\u0191\025\u02a0" +
    "\034\u0262\035\u01a9\001\001\000\012\023\u0145\024\u017e\025" +
    "\u0280\035\u0124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u034f\001" +
    "\001\000\004\021\u034a\001\001\000\002\001\001\000\004" +
    "\021\u0343\001\001\000\002\001\001\000\004\021\u033c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u033e" +
    "\001\001\000\004\023\u033f\001\001\000\004\015\u0340\001" +
    "\001\000\012\023\u015e\024\u018e\025\u029d\035\u0138\001\001" +
    "\000\004\015\u0342\001\001\000\012\023\u0152\024\u0191\025" +
    "\u02a0\035\u01a9\001\001\000\002\001\001\000\004\015\u0345" +
    "\001\001\000\004\035\u0346\001\001\000\004\015\u0347\001" +
    "\001\000\012\023\u0158\024\u0197\025\u0297\035\u01af\001\001" +
    "\000\004\015\u0349\001\001\000\012\023\u0161\024\u01a0\025" +
    "\u02a3\035\u01b2\001\001\000\002\001\001\000\004\015\u034c" +
    "\001\001\000\004\025\u034d\001\001\000\004\015\u034e\001" +
    "\001\000\012\023\u0167\024\u019d\025\u02a9\035\u01b8\001\001" +
    "\000\002\001\001\000\004\015\u0351\001\001\000\004\024" +
    "\u0352\001\001\000\004\015\u0353\001\001\000\012\023\u0171" +
    "\024\u01a6\025\u02af\035\u01be\001\001\000\004\017\u0355\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u0379\001\001\000\004\021\u0373\001\001\000" +
    "\002\001\001\000\004\021\u036a\001\001\000\002\001\001" +
    "\000\004\021\u0361\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u0363" +
    "\001\001\000\004\023\u0364\001\001\000\004\015\u0365\001" +
    "\001\000\004\017\u0366\001\001\000\002\001\001\000\004" +
    "\015\u0368\001\001\000\004\017\u0369\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u036c\001\001\000\004" +
    "\035\u036d\001\001\000\004\015\u036e\001\001\000\004\017" +
    "\u036f\001\001\000\002\001\001\000\004\015\u0371\001\001" +
    "\000\004\017\u0372\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0375\001\001\000\004\025\u0376\001\001" +
    "\000\004\015\u0377\001\001\000\004\017\u0378\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u037b\001\001" +
    "\000\004\024\u037c\001\001\000\004\015\u037d\001\001\000" +
    "\004\017\u037e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0381\001\001\000\004\017\u0382\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0388\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u038b\001\001" +
    "\000\006\014\u038c\017\u0382\001\001\000\004\015\u03aa\001" +
    "\001\000\004\015\u039d\001\001\000\002\001\001\000\004" +
    "\021\u0390\001\001\000\002\001\001\000\004\015\u0392\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u0395" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u0357\001" +
    "\001\000\004\015\u039f\001\001\000\012\023\305\024\306" +
    "\025\310\035\302\001\001\000\004\015\u03a1\001\001\000" +
    "\012\023\315\024\316\025\317\035\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u03b4\001\001\000\002\001\001\000\004" +
    "\015\u03b6\001\001\000\004\014\u03b7\001\001\000\004\015" +
    "\u03c6\001\001\000\004\015\u03bd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u03bf\001\001\000\002\001\001" +
    "\000\004\015\u03c1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u03cd\001\001\000\002\001\001\000\004\015\u03cf\001" +
    "\001\000\006\013\u03d2\016\u03d1\001\001\000\002\001\001" +
    "\000\004\015\u03e0\001\001\000\004\015\u03d3\001\001\000" +
    "\004\016\u03d5\001\001\000\002\001\001\000\004\015\u03d6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u03db\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u03df\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u03e5\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u03e9\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico_cp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico_cp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico_cp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/* *Metodo que se llama automaticamente ante algun error sintactico */
public void syntax_error(Symbol s){
    //System.out.println("Error en la linea: " + (s.right + 1) + ", columna: " + (s.left + 1) + ". Identificador " + s.value + " no reconocido");
    Ventana.errores.add("Sintactico-" + s.value +". No reconocido -" + String.valueOf((s.left + 1)) + "-" + String.valueOf((s.right + 1)));
}

/* *Metodo que se llama en el momento que ya no es posible una recuperacion de errores */
public void unrecovered_syntax_error(Symbol s){
    //System.out.println("Error en la linea: " + (s.right + 1) + ", columna: " + (s.left + 1) + ". Identificador " + s.value + " no reconocido");
}

    Result datosresult = null;
    boolean yahaycolor, yahaytextcolor, yahayfont, yahayalign;

    ArrayList<Variables> variables = new ArrayList();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico_cp$actions {


    public boolean VerificarDatosResult(){
        if (datosresult == null){
            return true;
        }else{
            return false;
        }
    }

    public String DevolverBGColor(String color){
        color = color.replace("\"", "");
        if(color.equalsIgnoreCase("rojo")){
            return "style=background-color: red";
        }else if(color.equalsIgnoreCase("amarillo")){
            return "style=background-color: yellow";
        }else if(color.equalsIgnoreCase("azul")){
            return "style=background-color: blue";
        }else if(color.equalsIgnoreCase("verde")){
            return "style=background-color: green";
        }else if(color.equalsIgnoreCase("gris")){
            return "style=background-color: gray";
        }else if(color.equalsIgnoreCase("anaranjado")){
            return "style=background-color: orange";
        }else if(color.equalsIgnoreCase("morado")){
            return "style=background-color: purple";
        }else{
            return "error";
        }
    }

    public String DevolverColor(String tipo, String color){
        color = color.replace("\"", "");
        if(color.equalsIgnoreCase("rojo")){
            return tipo + "=red";
        }else if(color.equalsIgnoreCase("amarillo")){
            return tipo + "= yellow";
        }else if(color.equalsIgnoreCase("azul")){
            return tipo + "=blue";
        }else if(color.equalsIgnoreCase("verde")){
            return tipo + "=green";
        }else if(color.equalsIgnoreCase("gris")){
            return tipo + "=gray";
        }else if(color.equalsIgnoreCase("anaranjado")){
            return tipo + "= orange";
        }else if(color.equalsIgnoreCase("morado")){
            return tipo + "=purple";
        }else{
            return "error";
        }
    }

    public boolean ExisteVariable(Variables var){
        for(int i = 0; i < variables.size(); i++){
            if(variables.get(i).getNombre().equalsIgnoreCase(var.getNombre())){
                return true;
            }
        }
        return false;
    }

    public boolean ExisteVariable(String id){
        for(int i = 0; i < variables.size(); i++){
            if(variables.get(i).getNombre().equalsIgnoreCase(id)){
                return true;
            }
        }
        return false;
    }

    public Valor ObtenerValorVariable(String id){
        for(int i = 0; i < variables.size(); i++){
            if(variables.get(i).getNombre().equalsIgnoreCase(id)){
                return variables.get(i).getValor();
            }
        }
        return null;
    }

    public void MostrarVariables(){
        for(int i = 0; i < variables.size(); i++){
            //System.out.println("Nombre: " + variables.get(i).getNombre() + " Tipo: " + variables.get(i).getTipo() + " Valor: " + variables.get(i).getValor().getValor());
        }
    }

    public Variables ObtenerVariable(String id){
        for(int i = 0; i < variables.size(); i++){
            if(variables.get(i).getNombre().equalsIgnoreCase(id)){
                return variables.get(i);
            }
        }
        return null;
    }

  private final sintactico_cp parser;

  /** Constructor */
  CUP$sintactico_cp$actions(sintactico_cp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico_cp$do_action_part00000000(
    int                        CUP$sintactico_cp$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_cp$parser,
    java.util.Stack            CUP$sintactico_cp$stack,
    int                        CUP$sintactico_cp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico_cp$result;

      /* select the action based on the action number */
      switch (CUP$sintactico_cp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		RESULT = start_val;
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico_cp$parser.done_parsing();
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CPREPORT tmenor thtml AUXETIQUETA tmayor CPREPORT HEAD CPREPORT BODY CPREPORT tmenor tdiagonal thtml tmayor CPREPORT 
            {
              String RESULT =null;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-14)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-14)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-14)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-11)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-11)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-11)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-9)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-9)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-9)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)).right;
		String head = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)).value;
		int cpreport3left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).left;
		int cpreport3right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).right;
		String cpreport3 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String body = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int cpreport4left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int cpreport4right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String cpreport4 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport5left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int cpreport5right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String cpreport5 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            MostrarVariables();
            String respuesta = "<!DOCTYPE html>" + cpreport1 + "\n<html ";

            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }

            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }

            respuesta += cpreport2 + head + cpreport3 + body + cpreport4;

            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n"; 
            }

            respuesta += "</html>\n" + cpreport5;
            Ventana.html = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-14)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CPREPORT tmenor thtml AUXETIQUETA tmayor CPREPORT tmenor tdiagonal thtml tmayor CPREPORT 
            {
              String RESULT =null;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-10)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-10)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-10)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport3left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int cpreport3right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String cpreport3 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            MostrarVariables();

            String respuesta = "<!DOCTYPE html>" + cpreport1 + "\n<html ";

            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }

            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }

            respuesta += cpreport2;

            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n"; 
            }

            respuesta += "</html> \n" + cpreport3;
            Ventana.html = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CPREPORT tmenor thtml AUXETIQUETA tmayor CPREPORT HEAD CPREPORT tmenor tdiagonal thtml tmayor CPREPORT 
            {
              String RESULT =null;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-12)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-12)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-12)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-9)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-9)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-9)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).value;
		int headleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String head = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int cpreport3left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int cpreport3right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String cpreport3 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport4left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int cpreport4right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String cpreport4 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            MostrarVariables();
            String respuesta = "<!DOCTYPE html>" + cpreport1 + "\n<html ";

            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }

            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }

            respuesta += cpreport2 + head + cpreport3;

            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n"; 
            }

            respuesta += "</html> \n" + cpreport4;
            Ventana.html = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-12)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= CPREPORT tmenor thtml AUXETIQUETA tmayor CPREPORT BODY CPREPORT tmenor tdiagonal thtml tmayor CPREPORT 
            {
              String RESULT =null;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-12)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-12)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-12)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-9)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-9)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-9)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String body = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int cpreport3left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int cpreport3right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String cpreport3 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport4left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int cpreport4right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String cpreport4 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            MostrarVariables();
            String respuesta = "<!DOCTYPE html>" + cpreport1 + "\n<html ";

            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }

            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }

            respuesta += cpreport2 + body + cpreport3;

            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n"; 
            }

            respuesta += "</html> \n" + cpreport4;
            Ventana.html = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-12)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= CPREPORT 
            {
              String RESULT =null;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            Ventana.html = "<!DOCTYPE html>" + cpreport;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error CPREPORT HEAD CPREPORT BODY CPREPORT tmenor tdiagonal thtml tmayor CPREPORT 
            {
              String RESULT =null;
		

              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= error CPREPORT HEAD CPREPORT tmenor tdiagonal thtml tmayor CPREPORT 
            {
              String RESULT =null;

              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= error CPREPORT BODY CPREPORT tmenor tdiagonal thtml tmayor CPREPORT 
            {
              String RESULT =null;

              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= error tmayor CPREPORT 
            {
              String RESULT =null;

              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= error 
            {
              String RESULT =null;

              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // HEAD ::= tmenor thead AUXETIQUETA tmayor CPREPORT TITULO CPREPORT tmenor tdiagonal thead tmayor 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).value;
		
            String respuesta = "<head ";
            
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + titulo + cpreport2;

            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n"; 
            }
            respuesta += "</head>\n";
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("HEAD",9, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // HEAD ::= tmenor thead AUXETIQUETA tmayor CPREPORT tmenor tdiagonal thead tmayor 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).value;
		
            String respuesta = "<head ";
            
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport;

            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n"; 
            }
            respuesta += "</head>\n";
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("HEAD",9, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // HEAD ::= error tmayor CPREPORT TITULO CPREPORT tmenor tdiagonal thead tmayor 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("HEAD",9, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // HEAD ::= error CPREPORT tmenor tdiagonal thead tmayor 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("HEAD",9, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TITULO ::= tmenor ttitle AUXETIQUETA tmayor CPREPORT ttexto CPREPORT tmenor tdiagonal ttitle tmayor 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).value;
		
            String respuesta = "<title ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">"; 
            }
            respuesta += cpreport1 + texto + cpreport;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>"; 
            }
            respuesta += "</title>\n";
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TITULO",10, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TITULO ::= tmenor ttitle AUXETIQUETA tmayor CPREPORT tmenor tdiagonal ttitle tmayor 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).value;
		
            String respuesta = "<title ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">"; 
            }
            respuesta += cpreport;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>"; 
            }
            respuesta += "</title>\n";
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TITULO",10, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TITULO ::= error tmayor CPREPORT ttexto CPREPORT tmenor tdiagonal ttitle tmayor 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TITULO",10, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TITULO ::= error CPREPORT tmenor tdiagonal ttitle tmayor 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TITULO",10, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BODY ::= tmenor tbody AUXETIQUETA tmayor CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<body ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport;
            String aux[] = sentencias.split("</body");
            for(int i = 0; i < aux.length; i++){
                if(i == aux.length-1){
                    if(!font.equals("") || !textcolor.equals("")){
                       respuesta += "</font>"; 
                    }
                    respuesta+="</body>\n";
                }else{
                    respuesta+=aux[i];
                }
            }
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("BODY",12, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BODY ::= error tmayor CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("BODY",12, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIASBODY ::= tmenor ttitulo AUXETIQUETA tmayor CPREPORT AUXTITULO CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxtituloleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxtituloright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String auxtitulo = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		  
                    String respuesta = "<" + tit + " ";
                    String background = "";
                    String font = "";
                    String align = "";
                    String textcolor = "";
                    String auxetiquetas[] = auxetiqueta.split("-");
                    for(int i = 0; i < auxetiquetas.length; i++){
                        if(auxetiquetas[i].contains("background")){
                            background = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("face")){
                            font = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("align")){
                            align = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("=")){
                            textcolor = auxetiquetas[i];
                        }
                    }
                    respuesta += background + " " + align + ">\n";
                    if(!font.equals("") || !textcolor.equals("")){
                        respuesta += "<font " + font + " " + textcolor + ">\n"; 
                    }
                    respuesta += cpreport + auxtitulo;
                    if(!font.equals("") || !textcolor.equals("")){
                        respuesta += "</font>\n";
                    }
                    respuesta += cpreport1 + sentencias;
                    RESULT = respuesta;
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIASBODY ::= tmenor ttable AUXETIQUETA tmayor CPREPORT AUXTABLA CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxtablaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxtablaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String auxtabla = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        String respuesta = "<table border = \"2px\" ";
                        String background = "";
                        String font = "";
                        String align = "";
                        String textcolor = "";
                        String auxetiquetas[] = auxetiqueta.split("-");
                        for(int i = 0; i < auxetiquetas.length; i++){
                        if(auxetiquetas[i].contains("background")){
                            background = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("face")){
                            font = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("align")){
                            align = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("=")){
                            textcolor = auxetiquetas[i];
                        }
                    }
                    respuesta += background + " " + align + ">\n";
                    if(!font.equals("") || !textcolor.equals("")){
                        respuesta += "<font " + font + " " + textcolor + ">\n"; 
                    }
                    respuesta += cpreport1 + auxtabla;
                    if(!font.equals("") || !textcolor.equals("")){
                        respuesta += "</font>\n";
                    }
                    respuesta += cpreport2 + sentencias;
                    RESULT = respuesta;
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIASBODY ::= tmenor tdiv AUXETIQUETA tmayor CPREPORT AUXDIV CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxdivleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxdivright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String auxdiv = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                    String respuesta = "<div ";
                    String background = "";
                        String font = "";
                        String align = "";
                        String textcolor = "";
                        String auxetiquetas[] = auxetiqueta.split("-");
                        for(int i = 0; i < auxetiquetas.length; i++){
                        if(auxetiquetas[i].contains("background")){
                            background = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("face")){
                            font = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("align")){
                            align = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("=")){
                            textcolor = auxetiquetas[i];
                        }
                    }
                    respuesta += background + " " + align + ">\n";
                    if(!font.equals("") || !textcolor.equals("")){
                        respuesta += "<font " + font + " " + textcolor + ">\n"; 
                    }
                    respuesta += cpreport + auxdiv;
                    if(!font.equals("") || !textcolor.equals("")){
                        respuesta += "</font>\n";
                    }
                    respuesta += cpreport1 + sentencias;
                    RESULT = respuesta;
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIASBODY ::= tmenor tparrafo AUXETIQUETA tmayor CPREPORT AUXPARRAFO CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxparrafoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxparraforight = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String auxparrafo = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                    String respuesta = "<p ";
                    String background = "";
                        String font = "";
                        String align = "";
                        String textcolor = "";
                        String auxetiquetas[] = auxetiqueta.split("-");
                        for(int i = 0; i < auxetiquetas.length; i++){
                        if(auxetiquetas[i].contains("background")){
                            background = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("face")){
                            font = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("align")){
                            align = auxetiquetas[i];
                        }else if(auxetiquetas[i].contains("=")){
                            textcolor = auxetiquetas[i];
                        }
                    }
                    respuesta += background + " " + align + ">\n";
                    if(!font.equals("") || !textcolor.equals("")){
                        respuesta += "<font " + font + " " + textcolor + ">\n"; 
                    }
                    respuesta += cpreport1 + auxparrafo;
                    if(!font.equals("") || !textcolor.equals("")){
                        respuesta += "</font>\n";
                    }
                    respuesta += cpreport2 + sentencias;
                    RESULT = respuesta;
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIASBODY ::= tmenor tbr tmayor CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                    RESULT = "<br>\n" + cpreport + sentencias;
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIASBODY ::= tmenor thr tmayor CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                    RESULT = "<hr>\n" + cpreport + sentencias;
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIASBODY ::= ttexto CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                    RESULT = texto + "\n" + cpreport + sentencias;
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIASBODY ::= tmenor tdiagonal tbody tmayor 
            {
              String RESULT =null;
		
                    RESULT = "</body>";
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIASBODY ::= error tmayor CPREPORT AUXTITULO CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		
                    RESULT = "";
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIASBODY ::= error tmayor CPREPORT AUXTABLA CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		
                    RESULT = "";
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIASBODY ::= error tmayor CPREPORT AUXDIV CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		
                    RESULT = "";
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIASBODY ::= error tmayor CPREPORT AUXPARRAFO CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		
                    RESULT = "";
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIASBODY ::= error CPREPORT SENTENCIASBODY 
            {
              String RESULT =null;
		
                    RESULT = "";
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIASBODY ::= error tbody tmayor 
            {
              String RESULT =null;
		
                    RESULT = "";
                
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("SENTENCIASBODY",13, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AUXDIV ::= tmenor ttitulo AUXETIQUETA tmayor CPREPORT AUXTITULO CPREPORT AUXDIV 
            {
              String RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<" + tit + " ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AUXDIV ::= tmenor ttable AUXETIQUETA tmayor CPREPORT AUXTABLA CPREPORT AUXDIV 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<table ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AUXDIV ::= tmenor tdiv AUXETIQUETA tmayor CPREPORT AUXDIV CPREPORT AUXDIV 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<div ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AUXDIV ::= tmenor tparrafo AUXETIQUETA tmayor CPREPORT AUXPARRAFO CPREPORT AUXDIV 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<p ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AUXDIV ::= tmenor tbr tmayor CPREPORT AUXDIV 
            {
              String RESULT =null;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            RESULT = "<br>\n" + cpreport + aux;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AUXDIV ::= tmenor thr tmayor CPREPORT AUXDIV 
            {
              String RESULT =null;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            RESULT = "<hr>\n" + cpreport + aux;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AUXDIV ::= ttexto CPREPORT AUXDIV 
            {
              String RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            RESULT = texto + "\n" + cpreport + aux;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AUXDIV ::= tmenor tdiagonal tdiv tmayor 
            {
              String RESULT =null;
		
            RESULT = "</div";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AUXDIV ::= error tmayor CPREPORT AUXTITULO CPREPORT AUXDIV 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AUXDIV ::= error tmayor CPREPORT AUXTABLA CPREPORT AUXDIV 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AUXDIV ::= error tmayor CPREPORT AUXDIV CPREPORT AUXDIV 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AUXDIV ::= error tmayor CPREPORT AUXPARRAFO CPREPORT AUXDIV 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AUXDIV ::= error CPREPORT AUXDIV 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AUXDIV ::= error tdiv tmayor 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXDIV",27, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AUXPARRAFO ::= tmenor ttitulo AUXETIQUETA tmayor CPREPORT AUXTITULO CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                String respuesta = "<" + tit + " ";
                String background = "";
                String font = "";
                String align = "";
                String textcolor = "";
                String auxetiquetas[] = auxetiqueta.split("-");
                for(int i = 0; i < auxetiquetas.length; i++){
                    if(auxetiquetas[i].contains("background")){
                        background = auxetiquetas[i];
                    }else if(auxetiquetas[i].contains("face")){
                        font = auxetiquetas[i];
                    }else if(auxetiquetas[i].contains("align")){
                        align = auxetiquetas[i];
                    }else if(auxetiquetas[i].contains("=")){
                        textcolor = auxetiquetas[i];
                    }
                }
                respuesta += background + " " + align + ">\n";
                if(!font.equals("") || !textcolor.equals("")){
                    respuesta += "<font " + font + " " + textcolor + ">\n"; 
                }
                respuesta += cpreport1 + aux;
                if(!font.equals("") || !textcolor.equals("")){
                    respuesta += "</font>\n";
                }
                respuesta += cpreport2 + aux2;
                RESULT = respuesta;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AUXPARRAFO ::= tmenor ttable AUXETIQUETA tmayor CPREPORT AUXTABLA CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<table ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AUXPARRAFO ::= tmenor tdiv AUXETIQUETA tmayor CPREPORT AUXDIV CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<div ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AUXPARRAFO ::= tmenor tparrafo AUXETIQUETA tmayor CPREPORT AUXPARRAFO CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<p ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AUXPARRAFO ::= tmenor tbr tmayor CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxparrafoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxparraforight = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String auxparrafo = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                RESULT = "<br>\n" + cpreport + auxparrafo; 
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AUXPARRAFO ::= tmenor thr tmayor CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                RESULT = "<hr>\n" + cpreport + aux;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AUXPARRAFO ::= ttexto CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                RESULT = texto + " " + cpreport + aux;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AUXPARRAFO ::= tmenor tdiagonal tparrafo tmayor 
            {
              String RESULT =null;
		
                RESULT = "</p>\n";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AUXPARRAFO ::= error tmayor CPREPORT AUXTITULO CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AUXPARRAFO ::= error tmayor CPREPORT AUXTABLA CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AUXPARRAFO ::= error tmayor CPREPORT AUXDIV CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AUXPARRAFO ::= error tmayor CPREPORT AUXPARRAFO CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AUXPARRAFO ::= error CPREPORT AUXPARRAFO 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AUXPARRAFO ::= error tparrafo tmayor 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXPARRAFO",17, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AUXTABLA ::= tmenor ttr AUXETIQUETA tmayor CPREPORT AUXENCABEZADOSTABLA CPREPORT AUXTABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<tr ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AUXTABLA ::= tmenor ttitulo AUXETIQUETA tmayor CPREPORT AUXTITULO CPREPORT AUXTABLA 
            {
              String RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<" + tit + " ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AUXTABLA ::= tmenor ttable AUXETIQUETA tmayor CPREPORT AUXTABLA CPREPORT AUXTABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<table ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AUXTABLA ::= tmenor tdiv AUXETIQUETA tmayor CPREPORT AUXDIV CPREPORT AUXTABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<div ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AUXTABLA ::= tmenor tparrafo AUXETIQUETA tmayor CPREPORT AUXPARRAFO CPREPORT AUXTABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<p ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AUXTABLA ::= tmenor tbr tmayor CPREPORT AUXTABLA 
            {
              String RESULT =null;
		int cpreportleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreportright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                RESULT = "<br>\n" + cpreport + aux;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AUXTABLA ::= tmenor thr tmayor CPREPORT AUXTABLA 
            {
              String RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                RESULT = "<th>\n" + cp + aux;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AUXTABLA ::= ttexto CPREPORT AUXTABLA 
            {
              String RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                RESULT = texto + " " + cp + " " + aux;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AUXTABLA ::= tmenor tdiagonal ttable tmayor 
            {
              String RESULT =null;
		
                RESULT = "</table>\n";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // AUXTABLA ::= error tmayor CPREPORT AUXENCABEZADOSTABLA CPREPORT AUXTABLA 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AUXTABLA ::= error tmayor CPREPORT AUXTITULO CPREPORT AUXTABLA 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AUXTABLA ::= error tmayor CPREPORT AUXTABLA CPREPORT AUXTABLA 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AUXTABLA ::= error tmayor CPREPORT AUXDIV CPREPORT AUXTABLA 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AUXTABLA ::= error tmayor CPREPORT AUXPARRAFO CPREPORT AUXTABLA 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AUXTABLA ::= error CPREPORT AUXTABLA 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // AUXTABLA ::= error ttable tmayor 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTABLA",19, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // AUXENCABEZADOSTABLA ::= tmenor tth AUXETIQUETA tmayor CPREPORT ENCABEZADOS CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<th ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // AUXENCABEZADOSTABLA ::= tmenor ttd AUXETIQUETA tmayor CPREPORT TABLA CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<td ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // AUXENCABEZADOSTABLA ::= tmenor ttitulo AUXETIQUETA tmayor CPREPORT AUXTITULO CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<" + tit + " ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // AUXENCABEZADOSTABLA ::= tmenor ttable AUXETIQUETA tmayor CPREPORT AUXTABLA CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<table ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // AUXENCABEZADOSTABLA ::= tmenor tdiv AUXETIQUETA tmayor CPREPORT AUXDIV CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<div ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AUXENCABEZADOSTABLA ::= tmenor tparrafo AUXETIQUETA tmayor CPREPORT AUXPARRAFO CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<p ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AUXENCABEZADOSTABLA ::= tmenor tbr tmayor CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        RESULT = "<br>\n" + cp + aux;
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AUXENCABEZADOSTABLA ::= tmenor thr tmayor CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        RESULT = "<hr>\n" + cp + aux;
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AUXENCABEZADOSTABLA ::= ttexto CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        RESULT = texto + " " + cp + aux;
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AUXENCABEZADOSTABLA ::= tmenor tdiagonal ttr tmayor 
            {
              String RESULT =null;
		
                        RESULT = "</tr>\n";
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AUXENCABEZADOSTABLA ::= error tmayor CPREPORT ENCABEZADOS CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		
                        RESULT = "";
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AUXENCABEZADOSTABLA ::= error tmayor CPREPORT TABLA CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		
                        RESULT = "";
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AUXENCABEZADOSTABLA ::= error tmayor CPREPORT AUXTITULO CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		
                        RESULT = "";
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AUXENCABEZADOSTABLA ::= error tmayor CPREPORT AUXTABLA CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		
                        RESULT = "";
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AUXENCABEZADOSTABLA ::= error tmayor CPREPORT AUXDIV CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		
                        RESULT = "";
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AUXENCABEZADOSTABLA ::= error tmayor CPREPORT AUXPARRAFO CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		
                        RESULT = "";
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AUXENCABEZADOSTABLA ::= error CPREPORT AUXENCABEZADOSTABLA 
            {
              String RESULT =null;
		
                        RESULT = "";
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AUXENCABEZADOSTABLA ::= error ttr tmayor 
            {
              String RESULT =null;
		
                        RESULT = "";
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXENCABEZADOSTABLA",26, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ENCABEZADOS ::= tmenor ttitulo AUXETIQUETA tmayor CPREPORT AUXTITULO CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<" + tit + " ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ENCABEZADOS ::= tmenor ttable AUXETIQUETA tmayor CPREPORT AUXTABLA CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<table ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ENCABEZADOS ::= tmenor tdiv AUXETIQUETA tmayor CPREPORT AUXDIV CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<div ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ENCABEZADOS ::= tmenor tparrafo AUXETIQUETA tmayor CPREPORT AUXPARRAFO CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<p ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ENCABEZADOS ::= tmenor tbr tmayor CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                RESULT = "<br>\n" + cp + aux;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ENCABEZADOS ::= tmenor thr tmayor CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                RESULT = "<th\n>" + cp + aux;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ENCABEZADOS ::= ttexto CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                RESULT = texto + " " + cp + aux;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ENCABEZADOS ::= tmenor tdiagonal tth tmayor 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ENCABEZADOS ::= error tmayor CPREPORT AUXTITULO CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ENCABEZADOS ::= error tmayor CPREPORT AUXTABLA CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ENCABEZADOS ::= error tmayor CPREPORT AUXDIV CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ENCABEZADOS ::= error tmayor CPREPORT AUXPARRAFO CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ENCABEZADOS ::= error CPREPORT ENCABEZADOS 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ENCABEZADOS ::= error tth tmayor 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS",20, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TABLA ::= tmenor ttitulo AUXETIQUETA tmayor CPREPORT AUXTITULO CPREPORT TABLA 
            {
              String RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<" + tit + " ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TABLA ::= tmenor ttable AUXETIQUETA tmayor CPREPORT AUXTABLA CPREPORT TABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<table ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TABLA ::= tmenor tdiv AUXETIQUETA tmayor CPREPORT AUXDIV CPREPORT TABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<div ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TABLA ::= tmenor tparrafo AUXETIQUETA tmayor CPREPORT AUXPARRAFO CPREPORT TABLA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<p ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TABLA ::= tmenor tbr tmayor CPREPORT TABLA 
            {
              String RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		RESULT = "<br>\n" + cp + aux;
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TABLA ::= tmenor thr tmayor CPREPORT TABLA 
            {
              String RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		RESULT = "<hr>\n" + cp + aux;
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TABLA ::= ttexto CPREPORT TABLA 
            {
              String RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		RESULT = texto + " " + cp + aux;
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TABLA ::= tmenor tdiagonal ttd tmayor 
            {
              String RESULT =null;
		RESULT = "</td>\n";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TABLA ::= error tmayor CPREPORT AUXTITULO CPREPORT TABLA 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TABLA ::= error tmayor CPREPORT AUXTABLA CPREPORT TABLA 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TABLA ::= error tmayor CPREPORT AUXDIV CPREPORT TABLA 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TABLA ::= error tmayor CPREPORT AUXPARRAFO CPREPORT TABLA 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TABLA ::= error CPREPORT TABLA 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TABLA ::= error ttd tmayor 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TABLA",21, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AUXTITULO ::= tmenor ttitulo AUXETIQUETA tmayor CPREPORT AUXTITULO CPREPORT AUXTITULO 
            {
              String RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-6)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<" + tit + " ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AUXTITULO ::= tmenor ttable AUXETIQUETA tmayor CPREPORT AUXTABLA CPREPORT AUXTITULO 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<table ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AUXTITULO ::= tmenor tdiv AUXETIQUETA tmayor CPREPORT AUXDIV CPREPORT AUXTITULO 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<div ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AUXTITULO ::= tmenor tparrafo AUXETIQUETA tmayor CPREPORT AUXPARRAFO CPREPORT AUXTITULO 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)).value;
		int cpreport1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int cpreport1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String cpreport1 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpreport2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpreport2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cpreport2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int aux2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int aux2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux2 = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            String respuesta = "<p ";
            String background = "";
            String font = "";
            String align = "";
            String textcolor = "";
            String auxetiquetas[] = auxetiqueta.split("-");
            for(int i = 0; i < auxetiquetas.length; i++){
                if(auxetiquetas[i].contains("background")){
                    background = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("face")){
                    font = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("align")){
                    align = auxetiquetas[i];
                }else if(auxetiquetas[i].contains("=")){
                    textcolor = auxetiquetas[i];
                }
            }
            respuesta += background + " " + align + ">\n";
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "<font " + font + " " + textcolor + ">\n"; 
            }
            respuesta += cpreport1 + aux;
            if(!font.equals("") || !textcolor.equals("")){
                respuesta += "</font>\n";
            }
            respuesta += cpreport2 + aux2;
            RESULT = respuesta;
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AUXTITULO ::= tmenor tbr tmayor CPREPORT AUXTITULO 
            {
              String RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		RESULT = "<br>\n" + cp + aux;
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // AUXTITULO ::= tmenor thr tmayor CPREPORT AUXTITULO 
            {
              String RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		RESULT = "<hr>\n" + cp + aux;
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // AUXTITULO ::= ttexto CPREPORT AUXTITULO 
            {
              String RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cp = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		RESULT = texto + " " + cp + aux;
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // AUXTITULO ::= tmenor tdiagonal ttitulo tmayor 
            {
              String RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String tit = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		RESULT = "</" + tit + ">";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // AUXTITULO ::= error tmayor CPREPORT AUXTITULO CPREPORT AUXTITULO 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // AUXTITULO ::= error tmayor CPREPORT AUXTABLA CPREPORT AUXTITULO 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // AUXTITULO ::= error tmayor CPREPORT AUXDIV CPREPORT AUXTITULO 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // AUXTITULO ::= error tmayor CPREPORT AUXPARRAFO CPREPORT AUXTITULO 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // AUXTITULO ::= error CPREPORT AUXTITULO 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // AUXTITULO ::= error ttitulo tmayor 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXTITULO",18, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // AUXETIQUETA ::= tcolor tasignar tcadena AUXETIQUETA 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                if(!yahaycolor){
                    if(!DevolverBGColor(cadena).equals("error")){
                        RESULT = DevolverBGColor(cadena) + "-" + auxetiqueta;
                    }else{
                        RESULT = "";
                        /*ERROR SEMANTICO*/
                        Ventana.errores.add("Semantico-Valor " + cadena + " no es aceptado como color de fondo.-" + String.valueOf((cadenaleft + 1)) + "-" + String.valueOf((cadenaright+1)));
                    }
                    yahaycolor = true;
                }else{
                    /*ERROR SEMANTICO*/
                    Ventana.errores.add("Semantico-Ya se encuentra en uso el atributo: " + aux + ", en la etiqueta actual.-" + String.valueOf((auxleft + 1)) + "-" + String.valueOf((auxright+1)));
                    RESULT = "";
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXETIQUETA",15, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // AUXETIQUETA ::= talign tasignar tcadena AUXETIQUETA 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                if(!yahayalign){
                    cadena = cadena.replace("\"", "");
                    if(cadena.equalsIgnoreCase("izquierda")){
                        RESULT = "align = left;" + "-" + auxetiqueta;
                    }else if(cadena.equalsIgnoreCase("derecha")){
                        RESULT = "align = right;" + "-" + auxetiqueta;
                    }else if(cadena.equalsIgnoreCase("centrado")){
                        RESULT = "align = center;" + "-" + auxetiqueta;
                    }else{
                        RESULT = "";
                        /*ERROR SEMANTICO*/
                        Ventana.errores.add("Semantico-Valor " + cadena + " no es aceptado como una alineacion correcta.-" + String.valueOf((cadenaleft + 1)) + "-" + String.valueOf((cadenaright+1)));
                    }
                    yahayalign = true;
                }else{
                    /*ERROR SEMANTICO*/
                    Ventana.errores.add("Semantico-Ya se encuentra en uso el atributo: " + aux + ", en la etiqueta actual.-" + String.valueOf((auxleft+ 1)) + "-" + String.valueOf((auxright+1)));
                    RESULT = "";
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXETIQUETA",15, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AUXETIQUETA ::= tfont tasignar tcadena AUXETIQUETA 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                if(!yahayfont){
                    cadena = cadena.replace("\"", "");
                    if(cadena.equalsIgnoreCase("Agency FB") || cadena.equalsIgnoreCase("Antiqua") || cadena.equalsIgnoreCase("Architect") || cadena.equalsIgnoreCase("Arial") || cadena.equalsIgnoreCase("BankFuturistic")){
                        RESULT = "face:\"" + cadena + "\"-" + auxetiqueta;
                    }else if(cadena.equalsIgnoreCase("BankGothic") || cadena.equalsIgnoreCase("Blackletter") || cadena.equalsIgnoreCase("Calibri") || cadena.equalsIgnoreCase("Comic Sans") || cadena.equalsIgnoreCase("Courier")){
                        RESULT = "face:\"" + cadena + "\"-" + auxetiqueta;
                    }else if(cadena.equalsIgnoreCase("Cursiva") || cadena.equalsIgnoreCase("Decorativa") || cadena.equalsIgnoreCase("Fantasia") || cadena.equalsIgnoreCase("Fraktur") || cadena.equalsIgnoreCase("Frosty")){
                        RESULT = "face:\"" + cadena + "\"-" + auxetiqueta;
                    }else if(cadena.equalsIgnoreCase("Garamond") || cadena.equalsIgnoreCase("Georgia") || cadena.equalsIgnoreCase("Helvetica") || cadena.equalsIgnoreCase("Impact") || cadena.equalsIgnoreCase("Minion")){
                        RESULT = "face:\"" + cadena + "\"-" + auxetiqueta;
                    }else if(cadena.equalsIgnoreCase("Modern") || cadena.equalsIgnoreCase("Monoespaciado") || cadena.equalsIgnoreCase("Palatino") || cadena.equalsIgnoreCase("Romana") || cadena.equalsIgnoreCase("Palo seco")){
                        RESULT = "face:\"" + cadena + "\"-" + auxetiqueta;
                    }else if(cadena.equalsIgnoreCase("Gracia") || cadena.equalsIgnoreCase("Script") || cadena.equalsIgnoreCase("Suiza") || cadena.equalsIgnoreCase("Times") || cadena.equalsIgnoreCase("Times New Roman")){
                        RESULT = "face:\"" + cadena + "\"-" + auxetiqueta;
                    }else if(cadena.equalsIgnoreCase("Tw Cen MT") || cadena.equalsIgnoreCase("Verdana")){
                        RESULT = "face:\"" + cadena + "\"-" + auxetiqueta;
                    }else{
                        RESULT = "";
                        /*ERROR SEMANTICO*/
                        Ventana.errores.add("Semantico-Valor " + cadena + " no es aceptado como tipo de letra.-" + String.valueOf((cadenaleft + 1)) + "-" + String.valueOf((cadenaright+1)));
                    }
                    yahayfont = true;
                }else{
                    /*ERROR SEMANTICO*/
                    Ventana.errores.add("Semantico-Ya se encuentra en uso el atributo: " + aux + ", en la etiqueta actual.-" + String.valueOf((auxleft+ 1)) + "-" + String.valueOf((auxright+1)));
                    RESULT = "";
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXETIQUETA",15, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // AUXETIQUETA ::= ttextcolor tasignar tcadena AUXETIQUETA 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                if(!yahaytextcolor){
                    if(!DevolverColor("textcolor", cadena).equals("error")){
                        RESULT = DevolverColor("textcolor", cadena) + auxetiqueta;
                    }else{
                        RESULT = "";
                        /*ERROR SEMANTICO*/
                        Ventana.errores.add("Semantico-Valor " + cadena + " no es aceptado como color de texto.-" + String.valueOf((cadenaleft + 1)) + "-" + String.valueOf((cadenaright+1)));
                    }
                    yahaytextcolor = true;
                }else{
                    /*ERROR SEMANTICO*/
                    Ventana.errores.add("Semantico-Ya se encuentra en uso el atributo: " + aux + ", en la etiqueta actual.-" + String.valueOf((auxleft+ 1)) + "-" + String.valueOf((auxright+1)));
                    RESULT = "";
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXETIQUETA",15, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // AUXETIQUETA ::= 
            {
              String RESULT =null;
		
                RESULT = "";
                yahaycolor = false;
                yahayalign = false;
                yahayfont = false;
                yahaytextcolor = false;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXETIQUETA",15, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // AUXETIQUETA ::= error AUXETIQUETA 
            {
              String RESULT =null;
		int auxetiquetaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxetiquetaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String auxetiqueta = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                RESULT = auxetiqueta;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXETIQUETA",15, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CPREPORT ::= tiniciocpreport LSENTENCIASCPREPORT tiniciocpreport CPREPORT 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int cprleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int cprright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String cpr = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                RESULT = sentencias + cpr;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("CPREPORT",11, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CPREPORT ::= 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("CPREPORT",11, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LSENTENCIASCPREPORT ::= DECLARACION LSENTENCIASCPREPORT 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        RESULT = aux;
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCPREPORT",1, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LSENTENCIASCPREPORT ::= ASIGNACION LSENTENCIASCPREPORT 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        RESULT = aux;
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCPREPORT",1, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LSENTENCIASCPREPORT ::= tcomentario LSENTENCIASCPREPORT 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        RESULT = aux;
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCPREPORT",1, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LSENTENCIASCPREPORT ::= tcomentariomulti LSENTENCIASCPREPORT 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        RESULT = aux;
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCPREPORT",1, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LSENTENCIASCPREPORT ::= PRINT LSENTENCIASCPREPORT 
            {
              String RESULT =null;
		int printleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int printright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		String print = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        RESULT = print + "\n" + aux;
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCPREPORT",1, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LSENTENCIASCPREPORT ::= RESULTA tpuntoycoma LSENTENCIASCPREPORT 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        RESULT = aux;
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCPREPORT",1, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LSENTENCIASCPREPORT ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCPREPORT",1, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LSENTENCIASCPREPORT ::= error tpuntoycoma LSENTENCIASCPREPORT 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        RESULT = aux;
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCPREPORT",1, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LSENTENCIASCPREPORT ::= error LSENTENCIASCPREPORT 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                        RESULT = aux;
                    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCPREPORT",1, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DECLARACION ::= TIPO LID tpuntoycoma 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		ArrayList<Variables> lid = (ArrayList<Variables>)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		
                for(int i = 0; i < lid.size(); i++){
                    if(!ExisteVariable(lid.get(i))){
                        if(lid.get(i).getValor() != null){
                            if(lid.get(i).getValor().getTipo().equals(tipo)){
                                lid.get(i).setTipo(tipo);
                                variables.add(lid.get(i));
                            }else if(tipo.equals("booleano") && (lid.get(i).getValor().getTipo().equals("entero") && (lid.get(i).getValor().getValor().equals("1") || lid.get(i).getValor().getValor().equals("0")))){
                                if(lid.get(i).getValor().getValor().equals("1")){
                                    lid.get(i).getValor().setValor("true");
                                    lid.get(i).getValor().setTipo("booleano");
                                    lid.get(i).setTipo(tipo);
                                    variables.add(lid.get(i));
                                }else{
                                    lid.get(i).getValor().setValor("false");
                                    lid.get(i).getValor().setTipo("booleano");
                                    lid.get(i).setTipo(tipo);
                                    variables.add(lid.get(i));
                                }
                            }else{
                                /*ERROR SEMANTICO*/
                                lid.get(i).setValor(null);
                                variables.add(lid.get(i));
                                Ventana.errores.add("Semantico-Error de tipos. No se puede convertir de: " + lid.get(i).getValor().getTipo() + " en " + tipo + "-" + String.valueOf(tipoleft) + "-" + String.valueOf(tiporight)); 
                            }
                        }else{
                            lid.get(i).setTipo(tipo);
                            variables.add(lid.get(i));
                        }
                    }else{
                        Ventana.errores.add("Semantico-La variable: " + lid.get(i).getNombre() + ", ya fue declarada.-" + String.valueOf(tipoleft) + "-" + String.valueOf(tiporight));
                    }
                }
                RESULT = "";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPO ::= tint 
            {
              String RESULT =null;
		RESULT = "entero";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPO ::= tchar 
            {
              String RESULT =null;
		RESULT = "caracter";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPO ::= tfloat 
            {
              String RESULT =null;
		RESULT = "decimal";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO ::= tstring 
            {
              String RESULT =null;
		RESULT = "cadena";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO ::= tboolean 
            {
              String RESULT =null;
		RESULT = "booleano";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PRINT ::= tprint tparentesisabrir EXP tparentesiscerrar tpuntoycoma 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		
            //System.out.println("exp " + exp.getTipo() + " " + exp.getValor());
            if(!exp.getTipo().equals("error")){
                Ventana.impresion.add(exp.getValor());
                RESULT = exp.getValor();
            }else{
                RESULT = "";
            }
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("PRINT",5, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // RESULTA ::= tresult tpunto AUXRESULT 
            {
              String RESULT =null;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int auxresultleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxresultright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String auxresult = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
            if(VerificarDatosResult()){
                //System.out.println("result == new result");
                /*Error semantico*/
                Ventana.errores.add("Semantico-El array de resultado \"Result\" se encuentra vacio-" + String.valueOf(auxleft) + "-" + String.valueOf(auxright));
                RESULT = "error";
            }else{
                //System.out.println("result != new result");
                if(auxresult.equals("score")){
                    RESULT = "score:" + String.valueOf(datosresult.getScore());
                }else{
                    RESULT = auxresult;
                }
            }
        
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("RESULTA",6, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // AUXRESULT ::= tscore 
            {
              String RESULT =null;
		
                RESULT = "score";
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXRESULT",7, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // AUXRESULT ::= tvariables tcorcheteabrir EXP tcorchetecerrar tpunto ATRIBUTOSVARIABLES 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                if(!VerificarDatosResult()){
                    if(exp.getTipo().equals("entero")){
                        int auxexp = Integer.parseInt(exp.getValor());
                        if(auxexp >= 0 && auxexp < datosresult.getVariables().size()){
                            if(aux.equals("nombre")){
                                RESULT = datosresult.getVariables().get(auxexp).getNombre();
                            }else if(aux.equals("tipo")){
                                RESULT = datosresult.getVariables().get(auxexp).getTipo();
                            }else if(aux.equals("funcion")){
                                RESULT = datosresult.getVariables().get(auxexp).getFuncion();
                            }else if(aux.equals("clase")){
                                RESULT = datosresult.getVariables().get(auxexp).getClase();
                            }else{
                                RESULT = "";
                            }
                        }else{
                            Ventana.errores.add("Semantico-El indice se sale del tamaño del arreglo-" + String.valueOf(expleft) + "-" + String.valueOf(expright));
                            RESULT = "";
                        }
                    }else{
                        Ventana.errores.add("Semantico-Incompatibilidad de tipos, no se puede utilizar un valor de tipo: " + exp.getTipo() + ", en las posiciones de un arreglo.-" + String.valueOf(expleft) + "-" + String.valueOf(expright));
                    }
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXRESULT",7, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // AUXRESULT ::= tmetodos tcorcheteabrir EXP tcorchetecerrar tpunto ATRIBUTOSMETODOS 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int auxleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int auxright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String aux = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                if(!VerificarDatosResult()){
                    if(exp.getTipo().equals("entero")){
                        int auxexp = Integer.parseInt(exp.getValor());
                        if(auxexp >= 0 && auxexp < datosresult.getMetodos().size()){
                            if(aux.equals("nombre")){
                                RESULT = datosresult.getMetodos().get(auxexp).getNombre();
                            }else if(aux.equals("tipo")){
                                RESULT = datosresult.getMetodos().get(auxexp).getTipo();
                            }else if(aux.equals("parametros")){
                                RESULT = String.valueOf(datosresult.getMetodos().get(auxexp).getParametros());
                            }else{
                                RESULT = "";
                            }
                        }else{
                            Ventana.errores.add("Semantico-El indice se sale del tamaño del arreglo-" + String.valueOf(expleft) + "-" + String.valueOf(expright));
                            RESULT = "";
                        }
                    }else{
                        Ventana.errores.add("Semantico-Incompatibilidad de tipos, no se puede utilizar un valor de tipo: " + exp.getTipo() + ", en las posiciones de un arreglo.-" + String.valueOf(expleft) + "-" + String.valueOf(expright));
                    }
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXRESULT",7, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AUXRESULT ::= tclases tcorcheteabrir EXP tcorchetecerrar tpunto tnombre 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		
                if(!VerificarDatosResult()){
                    if(exp.getTipo().equals("entero")){
                        int auxexp = Integer.parseInt(exp.getValor());
                        if(auxexp >= 0 && auxexp < datosresult.getClases().size()){
                            RESULT = datosresult.getClases().get(auxexp).getNombre();
                        }else{
                            Ventana.errores.add("Semantico-El indice se sale del tamaño del arreglo-" + String.valueOf(expleft) + "-" + String.valueOf(expright));
                            RESULT = "";
                        }
                    }else{
                        Ventana.errores.add("Semantico-Incompatibilidad de tipos, no se puede utilizar un valor de tipo: " + exp.getTipo() + ", en las posiciones de un arreglo.-" + String.valueOf(expleft) + "-" + String.valueOf(expright));
                    }
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXRESULT",7, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // AUXRESULT ::= VALORESRESULT 
            {
              String RESULT =null;
		int valoresresultleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int valoresresultright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String valoresresult = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
                String datos = "";
                if(valoresresult.equals("metodos")){
                    for(int i = 0; i < datosresult.getMetodos().size(); i++){
                        if(i == datosresult.getMetodos().size() - 1){
                            datos += "NOMBRE: " + datosresult.getMetodos().get(i).getNombre() + " TIPO: " + datosresult.getMetodos().get(i).getTipo() + " PARAMETROS: " + datosresult.getMetodos().get(i).getParametros();
                        }else{
                            datos += "NOMBRE: " + datosresult.getMetodos().get(i).getNombre() + " TIPO: " + datosresult.getMetodos().get(i).getTipo() + " PARAMETROS: " + datosresult.getMetodos().get(i).getParametros() + ", ";
                        }
                    }
                }else if(valoresresult.equals("variables")){
                    for(int i = 0; i < datosresult.getVariables().size(); i++){
                        if(i == datosresult.getVariables().size() - 1){
                            datos += "NOMBRE: " + datosresult.getVariables().get(i).getNombre() + " TIPO: " + datosresult.getVariables().get(i).getTipo() + " FUNCION PADRE: " + datosresult.getVariables().get(i).getFuncion() + " CLASE A LA QUE PERTENECE: " + datosresult.getVariables().get(i).getClase();
                        }else{
                            datos += "NOMBRE: " + datosresult.getVariables().get(i).getNombre() + " TIPO: " + datosresult.getVariables().get(i).getTipo() + " FUNCION PADRE: " + datosresult.getVariables().get(i).getFuncion() + " CLASE A LA QUE PERTENECE: " + datosresult.getVariables().get(i).getClase() + ", ";
                        }
                    }
                }else if(valoresresult.equals("clases")){
                    for(int i = 0; i < datosresult.getClases().size(); i++){
                        if(i == datosresult.getClases().size() - 1){
                            datos += "NOMBRE: " + datosresult.getClases().get(i).getNombre();
                        }else{
                            datos += "NOMBRE: " + datosresult.getClases().get(i).getNombre() + ", ";
                        }
                    }
                }
                RESULT = datos;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXRESULT",7, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // AUXRESULT ::= VALORESRESULT tpunto tnombre 
            {
              String RESULT =null;
		int valoresresultleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int valoresresultright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String valoresresult = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		
                String datos = "";
                if(valoresresult.equals("metodos")){
                    for(int i = 0; i < datosresult.getMetodos().size(); i++){
                        if(i == datosresult.getMetodos().size() - 1){
                            datos += datosresult.getMetodos().get(i).getNombre();
                        }else{
                            datos += datosresult.getMetodos().get(i).getNombre() + ", ";
                        }
                    }
                }else if(valoresresult.equals("variables")){
                    for(int i = 0; i < datosresult.getVariables().size(); i++){
                        if(i == datosresult.getVariables().size() - 1){
                            datos += datosresult.getVariables().get(i).getNombre();
                        }else{
                            datos += datosresult.getVariables().get(i).getNombre() + ", ";
                        }
                    }
                }else if(valoresresult.equals("clases")){
                    for(int i = 0; i < datosresult.getClases().size(); i++){
                        if(i == datosresult.getClases().size() - 1){
                            datos += datosresult.getClases().get(i).getNombre();
                        }else{
                            datos += datosresult.getClases().get(i).getNombre() + ", ";
                        }
                    }
                }else{
                    datos = "";
                }
                RESULT = datos;
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXRESULT",7, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // AUXRESULT ::= VALORESRESULT tpunto tcantidad 
            {
              String RESULT =null;
		int valoresresultleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int valoresresultright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String valoresresult = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		
                int cantidad = 0;
                if(valoresresult.equals("metodos")){
                    cantidad = datosresult.getMetodos().size();
                    RESULT = "cantidad:" + String.valueOf(cantidad);
                }else if(valoresresult.equals("variables")){
                    cantidad = datosresult.getVariables().size();
                    RESULT = "cantidad:" + String.valueOf(cantidad);
                }else if(valoresresult.equals("clases")){
                    cantidad = datosresult.getClases().size();
                    RESULT = "cantidad:" + String.valueOf(cantidad);
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("AUXRESULT",7, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ATRIBUTOSVARIABLES ::= tnombre 
            {
              String RESULT =null;
		RESULT = "nombre";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ATRIBUTOSVARIABLES",28, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ATRIBUTOSVARIABLES ::= ttipo 
            {
              String RESULT =null;
		RESULT = "tipo";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ATRIBUTOSVARIABLES",28, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ATRIBUTOSVARIABLES ::= tfuncion 
            {
              String RESULT =null;
		RESULT = "funcion";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ATRIBUTOSVARIABLES",28, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ATRIBUTOSVARIABLES ::= tclase 
            {
              String RESULT =null;
		RESULT = "clase";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ATRIBUTOSVARIABLES",28, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ATRIBUTOSMETODOS ::= tnombre 
            {
              String RESULT =null;
		RESULT = "nombre";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ATRIBUTOSMETODOS",29, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ATRIBUTOSMETODOS ::= ttipo 
            {
              String RESULT =null;
		RESULT = "tipo";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ATRIBUTOSMETODOS",29, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ATRIBUTOSMETODOS ::= tparametros 
            {
              String RESULT =null;
		RESULT = "parametros";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ATRIBUTOSMETODOS",29, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // VALORESRESULT ::= tmetodos 
            {
              String RESULT =null;
		RESULT = "metodos";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("VALORESRESULT",8, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // VALORESRESULT ::= tvariables 
            {
              String RESULT =null;
		RESULT = "variables";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("VALORESRESULT",8, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // VALORESRESULT ::= tclases 
            {
              String RESULT =null;
		RESULT = "clases";
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("VALORESRESULT",8, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // LID ::= ID tcoma LID 
            {
              ArrayList<Variables> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Variables id = (Variables)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		ArrayList<Variables> lid = (ArrayList<Variables>)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        ArrayList<Variables> aux = new ArrayList();
        aux.add(id);
        for(int i = 0; i < lid.size(); i++){
            aux.add(lid.get(i));
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("LID",32, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // LID ::= ID 
            {
              ArrayList<Variables> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Variables id = (Variables)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        ArrayList<Variables> aux = new ArrayList();
        aux.add(id);
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("LID",32, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ID ::= tid 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Variables aux = new Variables();
        aux.setNombre(id);
        aux.setValor(null);
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ID",31, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ID ::= tid tasignar EXP 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Variables aux = new Variables();
        aux.setNombre(id);
        aux.setValor(exp);
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ID",31, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ASIGNACION ::= tid tasignar EXP tpuntoycoma 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		
                if(ExisteVariable(id) && !exp.getTipo().equals("error")){
                    Variables aux = ObtenerVariable(id);
                    if(aux.getTipo().equals(exp.getTipo())){
                        aux.setValor(exp);
                    }else if(aux.getTipo().equals("booleano") && (exp.getTipo().equals("entero") && (exp.getValor().equals("1") || exp.getValor().equals("0")))){
                        if(exp.getValor().equals("1")){
                            exp.setValor("true");
                            exp.setTipo("booleano");
                        }else{
                            exp.setValor("false");
                            exp.setTipo("booleano");
                        }
                        aux.setValor(exp);
                    }else{
                        Ventana.errores.add("Semantico-Error de tipos. No se puede convertir: " + exp.getTipo() + " en " + aux.getTipo() + "-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                    }
                }else{
                    Ventana.errores.add("Semantico-La variable: " + id + ", no fue declarada anteriormente.-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ASIGNACION ::= tid tmas tigual EXP tpuntoycoma 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		
                if(ExisteVariable(id) && !exp.getTipo().equals("error")){
                    Variables aux = ObtenerVariable(id);
                    if(aux.getTipo().equals(exp.getTipo())){
                        if(aux.getTipo().equals("entero")){
                            if(aux.getValor().getValor().isEmpty()){
                                aux.setValor(exp);
                            }else{
                                int auxid = Integer.parseInt(aux.getValor().getValor());
                                int exp1 = Integer.parseInt(exp.getValor());
                                int resultado = auxid + exp1;
                                exp.setValor(String.valueOf(resultado));
                                aux.setValor(exp);
                            }
                        }else if(aux.getTipo().equals("decimal")){
                            if(aux.getValor().getValor().isEmpty()){
                                aux.setValor(exp);
                            }else{
                                float auxid = Float.parseFloat(aux.getValor().getValor());
                                float exp1 = Float.parseFloat(exp.getValor());
                                float resultado = auxid + exp1;
                                exp.setValor(String.valueOf(resultado));
                                aux.setValor(exp);
                            }
                        }else if(aux.getTipo().equals("cadena")){
                            String conca = aux.getValor().getValor() + exp.getValor();
                            exp.setValor(conca);
                            aux.setValor(exp);
                        }else{
                            Ventana.errores.add("Semantico-No se pueden sumar tipos que no sean int o float o String-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                       }
                    }else if(aux.getTipo().equals("decimal") && (exp.getTipo().equals("entero") || exp.getTipo().equals("decimal"))){
                        if(aux.getValor().getValor().isEmpty()){
                            aux.setValor(exp);
                        }else{
                            float auxid = Float.parseFloat(aux.getValor().getValor());
                            float auxexp = Float.parseFloat(exp.getValor());
                            float resultado = auxid + auxexp;
                            exp.setValor(String.valueOf(resultado));
                            aux.setValor(exp);
                        }
                    }else if(aux.getTipo().equals("cadena") && (exp.getTipo().equals("entero") || exp.getTipo().equals("decimal") || exp.getTipo().equals("cadena"))){
                        String auxid = aux.getValor().getValor();
                        String auxexp = exp.getValor();
                        exp.setValor(auxid + auxexp);
                        aux.setValor(exp);
                    }else{
                        Ventana.errores.add("Semantico-No se pueden sumar tipos que no sean int o float o String-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                    }
                }else{
                    Ventana.errores.add("Semantico-La variable: " + id + ", no fue declarada anteriormente.-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ASIGNACION ::= tid tresta tigual EXP tpuntoycoma 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		
                if(ExisteVariable(id) && !exp.getTipo().equals("error")){
                    Variables aux = ObtenerVariable(id);
                    if(aux.getTipo().equals(exp.getTipo())){
                        if(aux.getTipo().equals("entero")){
                            if(aux.getValor().getValor().isEmpty()){
                                int auxexp = Integer.parseInt(exp.getValor());
                                int resultado = 0 - auxexp;
                                exp.setValor(String.valueOf(resultado));
                                aux.setValor(exp);
                            }else{
                                int auxid = Integer.parseInt(aux.getValor().getValor());
                                int exp1 = Integer.parseInt(exp.getValor());
                                int resultado = auxid - exp1;
                                exp.setValor(String.valueOf(resultado));
                                aux.setValor(exp);
                            }
                        }else if(aux.getTipo().equals("decimal")){
                            if(aux.getValor().getValor().isEmpty()){
                                float auxexp = Float.parseFloat(exp.getValor());
                                float resultado = 0 - auxexp;
                                exp.setValor(String.valueOf(resultado));
                                aux.setValor(exp);
                            }else{
                                float auxid = Float.parseFloat(aux.getValor().getValor());
                                float exp1 = Float.parseFloat(exp.getValor());
                                float resultado = auxid - exp1;
                                exp.setValor(String.valueOf(resultado));
                                aux.setValor(exp);
                            }
                        }else{
                            Ventana.errores.add("Semantico-No se pueden sumar tipos que no sean int o float-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                       }
                    }else if(aux.getTipo().equals("decimal") && (exp.getTipo().equals("entero") || exp.getTipo().equals("decimal"))){
                        if(aux.getValor().getValor().isEmpty()){
                            float auxexp = Integer.parseInt(exp.getValor());
                            float resultado = 0- auxexp;
                            exp.setValor(String.valueOf(resultado));
                            aux.setValor(exp);
                        }else{
                            float auxid = Float.parseFloat(aux.getValor().getValor());
                            float auxexp = Float.parseFloat(exp.getValor());
                            float resultado = auxid - auxexp;
                            exp.setValor(String.valueOf(resultado));
                            aux.setValor(exp);
                        }
                    }else{
                        Ventana.errores.add("Semantico-No se pueden sumar tipos que no sean int o float o String-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                    }
                }else{
                    Ventana.errores.add("Semantico-La variable: " + id + ", no fue declarada anteriormente.-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ASIGNACION ::= tid tmultiplicacion tigual EXP tpuntoycoma 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		
                if(ExisteVariable(id) && !exp.getTipo().equals("error")){
                    Variables aux = ObtenerVariable(id);
                    if(aux.getTipo().equals(exp.getTipo())){
                        if(aux.getTipo().equals("entero")){
                            if(aux.getValor().getValor().isEmpty()){
                                exp.setValor("0");
                                aux.setValor(exp);
                            }else{
                                int auxid = Integer.parseInt(aux.getValor().getValor());
                                int exp1 = Integer.parseInt(exp.getValor());
                                int resultado = auxid * exp1;
                                exp.setValor(String.valueOf(resultado));
                                aux.setValor(exp);
                            }
                        }else if(aux.getTipo().equals("decimal")){
                            if(aux.getValor().getValor().isEmpty()){
                                exp.setValor("0");
                                aux.setValor(exp);
                            }else{
                                float auxid = Float.parseFloat(aux.getValor().getValor());
                                float exp1 = Float.parseFloat(exp.getValor());
                                float resultado = auxid * exp1;
                                exp.setValor(String.valueOf(resultado));
                                aux.setValor(exp);
                            }
                        }else{
                            Ventana.errores.add("Semantico-No se pueden sumar tipos que no sean int o float-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                       }
                    }else if(aux.getTipo().equals("decimal") && (exp.getTipo().equals("entero") || exp.getTipo().equals("decimal"))){
                        if(aux.getValor().getValor().isEmpty()){
                            exp.setValor("0");
                            aux.setValor(exp);
                        }else{
                            float auxid = Float.parseFloat(aux.getValor().getValor());
                            float auxexp = Float.parseFloat(exp.getValor());
                            float resultado = auxid * auxexp;
                            exp.setValor(String.valueOf(resultado));
                            aux.setValor(exp);
                        }
                    }else{
                        Ventana.errores.add("Semantico-No se pueden multiplicar tipos que no sean int o float-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                    }
                }else{
                    Ventana.errores.add("Semantico-La variable: " + id + ", no fue declarada anteriormente.-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ASIGNACION ::= tid tmas tmas tpuntoycoma 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		
                if(ExisteVariable(id)){
                    Variables aux = ObtenerVariable(id);
                    if(aux.getTipo().equals("entero")){
                        if(aux.getValor().getValor().isEmpty()){
                            aux.getValor().setValor("1");
                        }else{
                            int auxid = Integer.parseInt(aux.getValor().getValor());
                            auxid = auxid++;
                            aux.getValor().setValor(String.valueOf(auxid));
                        }
                    }else if(aux.getTipo().equals("decimal")){
                        if(aux.getValor().getValor().isEmpty()){
                            aux.getValor().setValor("1");
                        }else{
                            float auxid = Float.parseFloat(aux.getValor().getValor());
                            auxid = auxid++;
                            aux.getValor().setValor(String.valueOf(auxid));
                        }
                    }else{
                        Ventana.errores.add("Semantico-El operador de incremento(++). Solo puede usarse con valores numericos.-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                    }
                }else{
                    Ventana.errores.add("Semantico-La variable: " + id + ", no fue declarada anteriormente.-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ASIGNACION ::= tid tresta tresta tpuntoycoma 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)).value;
		
                if(ExisteVariable(id)){
                    Variables aux = ObtenerVariable(id);
                    if(aux.getTipo().equals("entero")){
                        if(aux.getValor().getValor().isEmpty()){
                            aux.getValor().setValor("-1");
                        }else{
                            int auxid = Integer.parseInt(aux.getValor().getValor());
                            auxid = auxid--;
                            aux.getValor().setValor(String.valueOf(auxid));
                        }
                    }else if(aux.getTipo().equals("decimal")){
                        if(aux.getValor().getValor().isEmpty()){
                            aux.getValor().setValor("-1");
                        }else{
                            float auxid = Float.parseFloat(aux.getValor().getValor());
                            auxid = auxid--;
                            aux.getValor().setValor(String.valueOf(auxid));
                        }
                    }else{
                        Ventana.errores.add("Semantico-El operador de decremento(--). Solo puede usarse con valores numericos.-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                    }
                }else{
                    Ventana.errores.add("Semantico-La variable: " + id + ", no fue declarada anteriormente.-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
                }
            
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXP ::= EXP tmultiplicacion EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals(exp2.getTipo())){
                if(exp1.getTipo().equals("entero")){
                    int aux1 = Integer.parseInt(exp1.getValor());
                    int aux2 = Integer.parseInt(exp2.getValor());
                    int resultado = aux1 * aux2;
                    aux.setTipo("entero");
                    aux.setValor(String.valueOf(resultado));
                }else if(exp1.getTipo().equals("decimal")){
                    float aux1 = Float.parseFloat(exp1.getValor());
                    float aux2 = Float.parseFloat(exp2.getValor());
                    float resultado = aux1 * aux2;
                    aux.setTipo("decimal");
                    aux.setValor(String.valueOf(resultado));
                }else{
                    Ventana.errores.add("Semantico-No se puede multiplicar tipos que no sean int o float-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setTipo("error");
                    aux.setValor("error");
                }
            }else if((exp1.getTipo().equals("entero") && exp2.getTipo().equals("decimal")) || (exp1.getTipo().equals("decimal") && exp2.getTipo().equals("entero"))){
                float aux1 = Float.parseFloat(exp1.getValor());
                float aux2 = Float.parseFloat(exp2.getValor());
                float resultado = aux1 * aux2;
                aux.setTipo("decimal");
                aux.setValor(String.valueOf(resultado));
            }else{
                Ventana.errores.add("Semantico-No se puede multiplicar tipos que no sean int o float-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setTipo("error");
                aux.setValor("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }

        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXP ::= EXP tdivision EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals(exp2.getTipo())){
                if(exp1.getTipo().equals("entero")){
                    int aux1 = Integer.parseInt(exp1.getValor());
                    int aux2 = Integer.parseInt(exp2.getValor());
                    if(aux2 != 0){
                        int resultado = aux1 / aux2;
                        aux.setTipo("entero");
                        aux.setValor(String.valueOf(resultado));
                    }else{
                        aux.setTipo("error");
                        aux.setValor("error");
                        Ventana.errores.add("Semantico-Division por cero-" + String.valueOf(exp2left) + "-" + String.valueOf(exp2right));
                    }
                }else if(exp1.getTipo().equals("decimal")){
                    float aux1 = Float.parseFloat(exp1.getValor());
                    float aux2 = Float.parseFloat(exp2.getValor());
                    if(aux2 != 0){
                        float resultado = aux1 / aux2;
                        aux.setTipo("decimal");
                        aux.setValor(String.valueOf(resultado));
                    }else{
                        aux.setTipo("error");
                        aux.setValor("error");
                        Ventana.errores.add("Semantico-Division por cero-" + String.valueOf(exp2left) + "-" + String.valueOf(exp2right));
                    }
                }else{
                    Ventana.errores.add("Semantico-No se puede multiplicar tipos que no sean int o float-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setTipo("error");
                    aux.setValor("error");
                }
            }else if((exp1.getTipo().equals("entero") && exp2.getTipo().equals("decimal")) || (exp1.getTipo().equals("decimal") && exp2.getTipo().equals("entero"))){
                float aux1 = Float.parseFloat(exp1.getValor());
                float aux2 = Float.parseFloat(exp2.getValor());
                if(aux2 > 0){
                    float resultado = aux1 / aux2;
                    aux.setTipo("decimal");
                    aux.setValor(String.valueOf(resultado));
                }else{
                        aux.setTipo("error");
                        aux.setValor("error");
                        Ventana.errores.add("Semantico-Division por cero-" + String.valueOf(exp2left) + "-" + String.valueOf(exp2right));
                    }
            }else{
                Ventana.errores.add("Semantico-No se puede multiplicar tipos que no sean int o float-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setTipo("error");
                aux.setValor("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }

        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXP ::= EXP tmodulo EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals(exp2.getTipo())){
                if(exp1.getTipo().equals("entero")){
                    int aux1 = Integer.parseInt(exp1.getValor());
                    int aux2 = Integer.parseInt(exp2.getValor());
                    if(aux2 != 0){
                        int resultado = aux1 % aux2;
                        aux.setTipo("entero");
                        aux.setValor(String.valueOf(resultado));
                    }else{
                        aux.setTipo("error");
                        aux.setValor("error");
                        Ventana.errores.add("Semantico-Division por cero-" + String.valueOf(exp2left) + "-" + String.valueOf(exp2right));
                    }
                }else if(exp1.getTipo().equals("decimal")){
                    float aux1 = Float.parseFloat(exp1.getValor());
                    float aux2 = Float.parseFloat(exp2.getValor());
                    if(aux2 != 0){
                        float resultado = aux1 % aux2;
                        aux.setTipo("decimal");
                        aux.setValor(String.valueOf(resultado));
                    }else{
                        aux.setTipo("error");
                        aux.setValor("error");
                        Ventana.errores.add("Semantico-Division por cero-" + String.valueOf(exp2left) + "-" + String.valueOf(exp2right));
                    }
                }else{
                    Ventana.errores.add("Semantico-No se puede multiplicar tipos que no sean int o float-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setTipo("error");
                    aux.setValor("error");
                }
            }else if((exp1.getTipo().equals("entero") && exp2.getTipo().equals("decimal")) || (exp1.getTipo().equals("decimal") && exp2.getTipo().equals("entero"))){
                float aux1 = Float.parseFloat(exp1.getValor());
                float aux2 = Float.parseFloat(exp2.getValor());
                if(aux2 > 0){
                    float resultado = aux1 % aux2;
                    aux.setTipo("decimal");
                    aux.setValor(String.valueOf(resultado));
                }else{
                        aux.setTipo("error");
                        aux.setValor("error");
                        Ventana.errores.add("Semantico-Division por cero-" + String.valueOf(exp2left) + "-" + String.valueOf(exp2right));
                    }
            }else{
                Ventana.errores.add("Semantico-No se puede multiplicar tipos que no sean int o float-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setTipo("error");
                aux.setValor("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }

        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXP ::= EXP tmas EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        //System.out.println("Suma de cadenas");
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals(exp2.getTipo())){
                if(exp1.getTipo().equals("entero")){
                    int aux1 = Integer.parseInt(exp1.getValor());
                    int aux2 = Integer.parseInt(exp2.getValor());
                    int resultado = aux1 + aux2;
                    aux.setValor(String.valueOf(resultado));
                    aux.setTipo("entero");
                }else if(exp1.getTipo().equals("decimal")){
                    float aux1 = Float.parseFloat(exp1.getValor());
                    float aux2 = Float.parseFloat(exp2.getValor());
                    float resultado = aux1 + aux2;
                    aux.setValor(String.valueOf(resultado));
                    aux.setTipo("decimal");
                }else if(exp1.getTipo().equals("cadena")){
                    String resultado = exp1.getValor() + exp2.getValor();
                    aux.setValor(resultado);
                    aux.setTipo("cadena");
                }else{
                    Ventana.errores.add("Semantico-No se pueden sumar tipos que no sean int o float o String-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setTipo("error");
                    aux.setValor("error");
                }
            }else if((exp1.getTipo().equals("entero") && exp2.getTipo().equals("decimal")) || (exp1.getTipo().equals("decimal") && exp2.getTipo().equals("entero"))){
                float aux1 = Float.parseFloat(exp1.getValor());
                float aux2 = Float.parseFloat(exp2.getValor());
                float resultado = aux1 + aux2;
                aux.setTipo("decimal");
                aux.setValor(String.valueOf(resultado));
            }else if((exp1.getTipo().equals("cadena") && (exp2.getTipo().equals("decimal") || exp2.getTipo().equals("entero"))) || ((exp1.getTipo().equals("decimal") || exp1.getTipo().equals("entero")) && exp2.getTipo().equals("cadena"))){
                String resultado = exp1.getValor() + exp2.getValor();
                aux.setTipo("cadena");
                aux.setValor(resultado);
            }else{
                Ventana.errores.add("Semantico-No se pueden sumar tipos que no sean int o float o String-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setTipo("error");
                aux.setValor("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXP ::= EXP tresta EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals(exp2.getTipo())){
                if(exp1.getTipo().equals("entero")){
                    int aux1 = Integer.parseInt(exp1.getValor());
                    int aux2 = Integer.parseInt(exp2.getValor());
                    int resultado = aux1 - aux2;
                    aux.setTipo("entero");
                    aux.setValor(String.valueOf(resultado));
                }else if(exp1.getTipo().equals("decimal")){
                    float aux1 = Float.parseFloat(exp1.getValor());
                    float aux2 = Float.parseFloat(exp2.getValor());
                    float resultado = aux1 - aux2;
                    aux.setTipo("decimal");
                    aux.setValor(String.valueOf(resultado));
                }else{
                    Ventana.errores.add("Semantico-No se pueden sumar tipos que no sean int o float-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else if((exp1.getTipo().equals("entero") && exp2.getTipo().equals("decimal")) || (exp1.getTipo().equals("decimal") && exp2.getTipo().equals("entero"))){
                float aux1 = Float.parseFloat(exp1.getValor());
                float aux2 = Float.parseFloat(exp2.getValor());
                float resultado = aux1 - aux2;
                aux.setTipo("decimal");
                aux.setValor(String.valueOf(resultado));
            }else{
                Ventana.errores.add("Semantico-No se pueden sumar tipos que no sean int o float-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXP ::= EXP tand EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals("booleano") && exp2.getTipo().equals("booleano")){
                boolean aux1, aux2;
                if(exp1.getValor().equals("true")){
                    aux1 = true;
                }else{
                    aux1 = false;
                }
                if(exp2.getValor().equals("true")){
                    aux2 = true;
                }else{
                    aux2 = false;
                }
                if(aux1 && aux2){
                    aux.setValor("true");
                    aux.setTipo("booleano");
                }else{
                    aux.setValor("false");
                    aux.setTipo("booleano");
                }
            }else if((exp1.getTipo().equals("entero") || exp1.getTipo().equals("booleano")) && (exp2.getTipo().equals("entero") || exp2.getTipo().equals("booleano"))){
                boolean aux1 = false;
                boolean aux2= false;
                boolean paso1, paso2;
                if(exp1.getValor().equals("1") || exp1.getValor().equals("true")){
                    aux1 = true;
                    paso1 = true;
                }else if(exp1.getValor().equals("0") || exp1.getValor().equals("false")){
                    aux1 = false;
                    paso1 = true;
                }else{
                    paso1 = false;
                }

                if(exp2.getValor().equals("1") || exp2.getValor().equals("true")){
                    aux2 = true;
                    paso2 = true;
                }else if(exp2.getValor().equals("0") || exp2.getValor().equals("false")){
                    aux2 = false;
                    paso2 = true;
                }else{
                    paso2 = false;
                }

                if(paso1 && paso2){
                    if(aux1 && aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else{
                    Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean boolean en un and-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else{
                Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean boolean en un and-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXP ::= EXP tor EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        //System.out.println("exp1");
        //System.out.println(exp1.getTipo());
        //System.out.println(exp1.getValor());
        //System.out.println("exp2");
        //System.out.println(exp2.getTipo());
        //System.out.println(exp2.getValor());
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals("booleano") && exp2.getTipo().equals("booleano")){
                boolean aux1, aux2;
                if(exp1.getValor().equals("true")){
                    aux1 = true;
                }else{
                    aux1 = false;
                }
                if(exp2.getValor().equals("true")){
                    aux2 = true;
                }else{
                    aux2 = false;
                }
                if(aux1 || aux2){
                    aux.setValor("true");
                    aux.setTipo("booleano");
                }else{
                    aux.setValor("false");
                    aux.setTipo("booleano");
                }
            }else if((exp1.getTipo().equals("entero") || exp1.getTipo().equals("booleano")) && (exp2.getTipo().equals("entero") || exp2.getTipo().equals("booleano"))){
                boolean aux1 = false;
                boolean aux2= false;
                boolean paso1, paso2;
                if(exp1.getValor().equals("1") || exp1.getValor().equals("true")){
                    aux1 = true;
                    paso1 = true;
                }else if(exp1.getValor().equals("0") || exp1.getValor().equals("false")){
                    aux1 = false;
                    paso1 = true;
                }else{
                    paso1 = false;
                }

                if(exp2.getValor().equals("1") || exp2.getValor().equals("true")){
                    aux2 = true;
                    paso2 = true;
                }else if(exp2.getValor().equals("0") || exp2.getValor().equals("false")){
                    aux2 = false;
                    paso2 = true;
                }else{
                    paso2 = false;
                }

                if(paso1 && paso2){
                    if(aux1 || aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else{
                    Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean boolean en un or-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else{
                Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean boolean en un or-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EXP ::= tnot EXP 
            {
              Valor RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp.getTipo().equals("error")){
            if(exp.getTipo().equals("booleano") || exp.getTipo().equals("entero")){
                if(exp.getValor().equals("true") || exp.getValor().equals("1")){
                    aux.setValor("false");
                    aux.setTipo("booleano");
                }else if(exp.getValor().equals("false") || exp.getValor().equals("0")){
                    aux.setValor("true");
                    aux.setTipo("booleano");
                }else{
                    Ventana.errores.add("Semantico-Tipos incompatibles, se necesita un boolean-" + String.valueOf(expleft) + "-" + String.valueOf(expright));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else{
                Ventana.errores.add("Semantico-Tipos incompatibles, se necesita un boolean-" + String.valueOf(expleft) + "-" + String.valueOf(expright));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setValor("error");
            aux.setTipo("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXP ::= tresta EXP 
            {
              Valor RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp.getTipo().equals("error")){
            if(exp.getTipo().equals("entero") || exp.getTipo().equals("decimal")){
                aux.setValor("-" + exp.getValor());
                aux.setTipo(exp.getTipo());
            }else{
                Ventana.errores.add("Semantico-Tipos incompatibles, se necesita un int o float-" + String.valueOf(expleft) + "-" + String.valueOf(expright));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setValor("error");
            aux.setTipo("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EXP ::= EXP tmenor EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals(exp2.getTipo())){
                if(exp1.getTipo().equals("entero")){
                    int aux1 = Integer.parseInt(exp1.getValor());
                    int aux2 = Integer.parseInt(exp2.getValor());
                    if(aux1 < aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("decimal")){
                    float aux1 = Float.parseFloat(exp1.getValor());
                    float aux2 = Float.parseFloat(exp2.getValor());
                    if(aux1 < aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("caracter")){
                    char aux1 = exp1.getValor().charAt(0);
                    char aux2 = exp2.getValor().charAt(0);
                    if(aux1 < aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else{
                    Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float o char con <-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else if((exp1.getTipo().equals("entero") || exp1.getTipo().equals("decimal") || exp1.getTipo().equals("caracter")) && (exp2.getTipo().equals("entero") || exp2.getTipo().equals("decimal") || exp2.getTipo().equals("caracter"))){
                float aux1 = 0;
                float aux2 = 0;
                if(exp1.getTipo().equals("caracter")){
                    char ayuda = exp1.getValor().charAt(0);
                    aux1 = ayuda;
                }else{
                    aux1 = Float.parseFloat(exp1.getValor());
                }

                if(exp2.getTipo().equals("caracter")){
                    char ayuda = exp2.getValor().charAt(0);
                    aux2 = ayuda;
                }else{
                    aux2 = Float.parseFloat(exp2.getValor());
                }

                if(aux1 < aux2){
                    aux.setTipo("booleano");
                    aux.setValor("true");
                }else{
                    aux.setTipo("booleano");
                    aux.setValor("false");
                }
            }else{
                Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float o char con <-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXP ::= EXP tmayor EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals(exp2.getTipo())){
                if(exp1.getTipo().equals("entero")){
                    int aux1 = Integer.parseInt(exp1.getValor());
                    int aux2 = Integer.parseInt(exp2.getValor());
                    if(aux1 > aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("decimal")){
                    float aux1 = Float.parseFloat(exp1.getValor());
                    float aux2 = Float.parseFloat(exp2.getValor());
                    if(aux1 > aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("caracter")){
                    char aux1 = exp1.getValor().charAt(0);
                    char aux2 = exp2.getValor().charAt(0);
                    if(aux1 > aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else{
                    Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float o char con >-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else if((exp1.getTipo().equals("entero") || exp1.getTipo().equals("decimal") || exp1.getTipo().equals("caracter")) && (exp2.getTipo().equals("entero") || exp2.getTipo().equals("decimal") || exp2.getTipo().equals("caracter"))){
                float aux1 = 0;
                float aux2 = 0;
                if(exp1.getTipo().equals("caracter")){
                    char ayuda = exp1.getValor().charAt(0);
                    aux1 = ayuda;
                }else{
                    aux1 = Float.parseFloat(exp1.getValor());
                }

                if(exp2.getTipo().equals("caracter")){
                    char ayuda = exp2.getValor().charAt(0);
                    aux2 = ayuda;
                }else{
                    aux2 = Float.parseFloat(exp2.getValor());
                }

                if(aux1 > aux2){
                    aux.setTipo("booleano");
                    aux.setValor("true");
                }else{
                    aux.setTipo("booleano");
                    aux.setValor("false");
                }
            }else{
                Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float o char con >-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // EXP ::= EXP tmenorigual EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals(exp2.getTipo())){
                if(exp1.getTipo().equals("entero")){
                    int aux1 = Integer.parseInt(exp1.getValor());
                    int aux2 = Integer.parseInt(exp2.getValor());
                    if(aux1 <= aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("decimal")){
                    float aux1 = Float.parseFloat(exp1.getValor());
                    float aux2 = Float.parseFloat(exp2.getValor());
                    if(aux1 <= aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("caracter")){
                    char aux1 = exp1.getValor().charAt(0);
                    char aux2 = exp2.getValor().charAt(0);
                    if(aux1 <= aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else{
                    Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float o char con <=-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else if((exp1.getTipo().equals("entero") || exp1.getTipo().equals("decimal") || exp1.getTipo().equals("caracter")) && (exp2.getTipo().equals("entero") || exp2.getTipo().equals("decimal") || exp2.getTipo().equals("caracter"))){
                float aux1 = 0;
                float aux2 = 0;
                if(exp1.getTipo().equals("caracter")){
                    char ayuda = exp1.getValor().charAt(0);
                    aux1 = ayuda;
                }else{
                    aux1 = Float.parseFloat(exp1.getValor());
                }

                if(exp2.getTipo().equals("caracter")){
                    char ayuda = exp2.getValor().charAt(0);
                    aux2 = ayuda;
                }else{
                    aux2 = Float.parseFloat(exp2.getValor());
                }

                if(aux1 <= aux2){
                    aux.setTipo("booleano");
                    aux.setValor("true");
                }else{
                    aux.setTipo("booleano");
                    aux.setValor("false");
                }
            }else{
                Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float o char con <=-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXP ::= EXP tmayorigual EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals(exp2.getTipo())){
                if(exp1.getTipo().equals("entero")){
                    int aux1 = Integer.parseInt(exp1.getValor());
                    int aux2 = Integer.parseInt(exp2.getValor());
                    if(aux1 >= aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("decimal")){
                    float aux1 = Float.parseFloat(exp1.getValor());
                    float aux2 = Float.parseFloat(exp2.getValor());
                    if(aux1 >= aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("caracter")){
                    char aux1 = exp1.getValor().charAt(0);
                    char aux2 = exp2.getValor().charAt(0);
                    if(aux1 >= aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else{
                    Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float o char con >=-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else if((exp1.getTipo().equals("entero") || exp1.getTipo().equals("decimal") || exp1.getTipo().equals("caracter")) && (exp2.getTipo().equals("entero") || exp2.getTipo().equals("decimal") || exp2.getTipo().equals("caracter"))){
                float aux1 = 0;
                float aux2 = 0;
                if(exp1.getTipo().equals("caracter")){
                    char ayuda = exp1.getValor().charAt(0);
                    aux1 = ayuda;
                }else{
                    aux1 = Float.parseFloat(exp1.getValor());
                }

                if(exp2.getTipo().equals("caracter")){
                    char ayuda = exp2.getValor().charAt(0);
                    aux2 = ayuda;
                }else{
                    aux2 = Float.parseFloat(exp2.getValor());
                }

                if(aux1 >= aux2){
                    aux.setTipo("booleano");
                    aux.setValor("true");
                }else{
                    aux.setTipo("booleano");
                    aux.setValor("false");
                }
            }else{
                Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float o char con >=-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // EXP ::= EXP tigual EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals(exp2.getTipo())){
                if(exp1.getTipo().equals("entero")){
                    int aux1 = Integer.parseInt(exp1.getValor());
                    int aux2 = Integer.parseInt(exp2.getValor());
                    if(aux1 == aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("decimal")){
                    float aux1 = Float.parseFloat(exp1.getValor());
                    float aux2 = Float.parseFloat(exp2.getValor());
                    if(aux1 == aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("caracter")){
                    char aux1 = exp1.getValor().charAt(0);
                    char aux2 = exp2.getValor().charAt(0);
                    if(aux1 == aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("boolean")){
                    boolean aux1, aux2;
                    if(exp1.getValor().equals("true")){
                        aux1 =  true;
                    }else{
                        aux1 = false;
                    }

                    if(exp2.getValor().equals("false")){
                        aux2 = true;
                    }else{
                        aux2 = false;
                    }
                    if(aux1 == aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else{
                    Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float, char, boolean con == entre ellos-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else if((exp1.getTipo().equals("entero") || exp1.getTipo().equals("decimal") || exp1.getTipo().equals("caracter")) && (exp2.getTipo().equals("entero") || exp2.getTipo().equals("decimal") || exp2.getTipo().equals("caracter"))){
                float aux1 = 0;
                float aux2 = 0;
                if(exp1.getTipo().equals("caracter")){
                    char ayuda = exp1.getValor().charAt(0);
                    aux1 = ayuda;
                }else{
                    aux1 = Float.parseFloat(exp1.getValor());
                }

                if(exp2.getTipo().equals("caracter")){
                    char ayuda = exp2.getValor().charAt(0);
                    aux2 = ayuda;
                }else{
                    aux2 = Float.parseFloat(exp2.getValor());
                }

                if(aux1 == aux2){
                    aux.setTipo("booleano");
                    aux.setValor("true");
                }else{
                    aux.setTipo("booleano");
                    aux.setValor("false");
                }
            }else if((exp1.getTipo().equals("entero") || exp1.getTipo().equals("booleano")) && (exp2.getTipo().equals("entero") || exp2.getTipo().equals("booleano"))){
                boolean aux1 = false;
                boolean aux2 = false;
                boolean paso1 = false;
                boolean paso2 = false;
                if(exp1.getValor().equals("1") || exp1.getValor().equals("true")){
                    aux1 = true;
                    paso1 = true;
                }else if(exp1.getValor().equals("0") || exp1.getValor().equals("false")){
                    aux1 = false;
                    paso1 = true;
                }else{
                    paso1 = false;
                }
                if(exp2.getValor().equals("1") || exp2.getValor().equals("true")){
                    aux2 = true;
                    paso2 = true;
                }else if(exp2.getValor().equals("0") || exp2.getValor().equals("false")){
                    aux2 = false;
                    paso2 = true;
                }else{
                    paso2 = false;
                }

                if(paso1 && paso2){
                    if(aux1 == aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else{
                    Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float, char, boolean con == entre ellos-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else{
                Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float, char, boolean con == entre ellos-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXP ::= EXP tnoigual EXP 
            {
              Valor RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp1 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		Valor exp2 = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(!exp1.getTipo().equals("error") && !exp2.getTipo().equals("error")){
            if(exp1.getTipo().equals(exp2.getTipo())){
                if(exp1.getTipo().equals("entero")){
                    int aux1 = Integer.parseInt(exp1.getValor());
                    int aux2 = Integer.parseInt(exp2.getValor());
                    if(aux1 != aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("decimal")){
                    float aux1 = Float.parseFloat(exp1.getValor());
                    float aux2 = Float.parseFloat(exp2.getValor());
                    if(aux1 != aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("caracter")){
                    char aux1 = exp1.getValor().charAt(0);
                    char aux2 = exp2.getValor().charAt(0);
                    if(aux1 != aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else if(exp1.getTipo().equals("boolean")){
                    boolean aux1, aux2;
                    if(exp1.getValor().equals("true")){
                        aux1 =  true;
                    }else{
                        aux1 = false;
                    }

                    if(exp2.getValor().equals("false")){
                        aux2 = true;
                    }else{
                        aux2 = false;
                    }
                    if(aux1 != aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else{
                    Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float, char, boolean con != entre ellos-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else if((exp1.getTipo().equals("entero") || exp1.getTipo().equals("decimal") || exp1.getTipo().equals("caracter")) && (exp2.getTipo().equals("entero") || exp2.getTipo().equals("decimal") || exp2.getTipo().equals("caracter"))){
                float aux1 = 0;
                float aux2 = 0;
                if(exp1.getTipo().equals("caracter")){
                    char ayuda = exp1.getValor().charAt(0);
                    aux1 = ayuda;
                }else{
                    aux1 = Float.parseFloat(exp1.getValor());
                }

                if(exp2.getTipo().equals("caracter")){
                    char ayuda = exp2.getValor().charAt(0);
                    aux2 = ayuda;
                }else{
                    aux2 = Float.parseFloat(exp2.getValor());
                }

                if(aux1 != aux2){
                    aux.setTipo("booleano");
                    aux.setValor("true");
                }else{
                    aux.setTipo("booleano");
                    aux.setValor("false");
                }
            }else if((exp1.getTipo().equals("entero") || exp1.getTipo().equals("booleano")) && (exp2.getTipo().equals("entero") || exp2.getTipo().equals("booleano"))){
                boolean aux1 = false;
                boolean aux2 = false;
                boolean paso1 = false;
                boolean paso2 = false;
                if(exp1.getValor().equals("1") || exp1.getValor().equals("true")){
                    aux1 = true;
                    paso1 = true;
                }else if(exp1.getValor().equals("0") || exp1.getValor().equals("false")){
                    aux1 = false;
                    paso1 = true;
                }else{
                    paso1 = false;
                }
                if(exp2.getValor().equals("1") || exp2.getValor().equals("true")){
                    aux2 = true;
                    paso2 = true;
                }else if(exp2.getValor().equals("0") || exp2.getValor().equals("false")){
                    aux2 = false;
                    paso2 = true;
                }else{
                    paso2 = false;
                }

                if(paso1 && paso2){
                    if(aux1 != aux2){
                        aux.setTipo("booleano");
                        aux.setValor("true");
                    }else{
                        aux.setTipo("booleano");
                        aux.setValor("false");
                    }
                }else{
                    Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float, char, boolean con != entre ellos-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                    aux.setValor("error");
                    aux.setTipo("error");
                }
            }else{
                Ventana.errores.add("Semantico-No se pueden comparar tipos que no sean int, float, char, boolean con != entre ellos-" + String.valueOf(exp1left) + "-" + String.valueOf(exp1right));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // EXP ::= tparentesisabrir EXP tparentesiscerrar 
            {
              Valor RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-1)).value;
		
        Valor aux = new Valor();
        aux.setTipo(exp.getTipo());
        aux.setValor(exp.getValor());
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // EXP ::= EXP tmas tmas 
            {
              Valor RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		
        Valor aux = new Valor();
        if(!exp.getTipo().equals("error")){
            if(exp.getTipo().equals("entero") || exp.getTipo().equals("decimal")){
                float aux1 = Float.parseFloat(exp.getValor());
                aux1 = aux1 + 1;
                aux.setValor(String.valueOf(aux1));
                aux.setTipo(exp.getTipo());
            }else{
                Ventana.errores.add("Semantico-El operador de incremento(++). Solo puede usarse con valores numericos.-" + String.valueOf(expleft) + "-" + String.valueOf(expright));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // EXP ::= EXP tresta tresta 
            {
              Valor RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).right;
		Valor exp = (Valor)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)).value;
		
        Valor aux = new Valor();
        if(!exp.getTipo().equals("error")){
            if(exp.getTipo().equals("entero") || exp.getTipo().equals("decimal")){
                float aux1 = Float.parseFloat(exp.getValor());
                aux1 = aux1 - 1;
                aux.setValor(String.valueOf(aux1));
                aux.setTipo(exp.getTipo());
            }else{
                Ventana.errores.add("Semantico-El operador de decremento(--). Solo puede usarse con valores numericos.-" + String.valueOf(expleft) + "-" + String.valueOf(expright));
                aux.setValor("error");
                aux.setTipo("error");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.elementAt(CUP$sintactico_cp$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // EXP ::= tnumero 
            {
              Valor RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(num.contains(".")){
            aux.setTipo("decimal");
            aux.setValor(num);
        }else{
            aux.setTipo("entero");
            aux.setValor(num);
        }
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // EXP ::= tcadena 
            {
              Valor RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        cadena = cadena.replace("\"", "");
        aux.setTipo("cadena");
        aux.setValor(cadena);
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EXP ::= tcaracter 
            {
              Valor RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        caracter = caracter.replace("'", "");
        aux.setTipo("caracter");
        aux.setValor(caracter);
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EXP ::= tid 
            {
              Valor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        if(ExisteVariable(id)){
            aux = ObtenerValorVariable(id);
        }else{
            Ventana.errores.add("Semantico-La variable: " + id + ", no fue declarada.-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
            aux.setTipo("error");
            aux.setValor("error");
        }
        if(aux == null){
            Ventana.errores.add("Semantico-La variable: " + id + ", no fue inicializada con anterioridad.-" + String.valueOf(idleft) + "-" + String.valueOf(idright));
            aux.setTipo("error");
            aux.setValor("error");
        }

        //System.out.println("Existe");
        //System.out.println(id);
        //System.out.println(aux.getValor());
        //System.out.println(aux.getTipo());
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // EXP ::= ttrue 
            {
              Valor RESULT =null;
		
        Valor aux = new Valor();
        aux.setValor("true");
        aux.setTipo("booleano");
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // EXP ::= tfalse 
            {
              Valor RESULT =null;
		
        Valor aux = new Valor();
        aux.setValor("false");
        aux.setTipo("booleano");
        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // EXP ::= RESULTA 
            {
              Valor RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()).right;
		String result = (String)((java_cup.runtime.Symbol) CUP$sintactico_cp$stack.peek()).value;
		
        Valor aux = new Valor();
        //System.out.println("result" + result);
        if(!result.equals("error") && !VerificarDatosResult()){
            if(result.contains("score:")){
                String aux1[] = result.split(":");
                aux.setValor(aux1[1]);
                aux.setTipo("decimal");
            }else if(result.contains("cantidad:")){
                String aux1[] = result.split(":");
                aux.setValor(aux1[1]);
                aux.setTipo("entero");
            }else{
                aux.setValor(result);
                aux.setTipo("cadena");
            }
        }else{
            aux.setTipo("error");
            aux.setValor("error");
        }

        RESULT = aux;
    
              CUP$sintactico_cp$result = parser.getSymbolFactory().newSymbol("EXP",30, ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico_cp$stack.peek()), RESULT);
            }
          return CUP$sintactico_cp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico_cp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico_cp$do_action(
    int                        CUP$sintactico_cp$act_num,
    java_cup.runtime.lr_parser CUP$sintactico_cp$parser,
    java.util.Stack            CUP$sintactico_cp$stack,
    int                        CUP$sintactico_cp$top)
    throws java.lang.Exception
    {
              return CUP$sintactico_cp$do_action_part00000000(
                               CUP$sintactico_cp$act_num,
                               CUP$sintactico_cp$parser,
                               CUP$sintactico_cp$stack,
                               CUP$sintactico_cp$top);
    }
}

}
