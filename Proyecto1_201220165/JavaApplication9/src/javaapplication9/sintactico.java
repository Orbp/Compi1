
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package javaapplication9;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return tabla_simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\003\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\010\010\006\013\011\014\004\001\002\000" +
    "\020\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1" +
    "\012\ufff1\001\002\000\016\002\000\004\036\005\032\006" +
    "\033\007\035\012\034\001\002\000\010\010\006\013\011" +
    "\014\004\001\002\000\016\002\uffff\004\017\005\013\006" +
    "\014\007\016\012\015\001\002\000\004\002\012\001\002" +
    "\000\020\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\012\ufff8\001\002\000\004\002\001\001\002\000\006" +
    "\010\020\014\004\001\002\000\006\010\020\014\004\001" +
    "\002\000\006\010\020\014\004\001\002\000\006\010\020" +
    "\014\004\001\002\000\006\010\020\014\004\001\002\000" +
    "\006\010\020\014\004\001\002\000\020\002\ufff7\004\ufff7" +
    "\005\ufff7\006\014\007\016\011\ufff7\012\015\001\002\000" +
    "\016\004\017\005\013\006\014\007\016\011\023\012\015" +
    "\001\002\000\020\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\011\ufff2\012\ufff2\001\002\000\020\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\015\001\002\000" +
    "\020\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\012\ufff3\001\002\000\020\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\011\ufff5\012\015\001\002\000\020\002\ufff6" +
    "\004\ufff6\005\ufff6\006\014\007\016\011\ufff6\012\015\001" +
    "\002\000\016\004\036\005\032\006\033\007\035\011\031" +
    "\012\034\001\002\000\020\002\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\001\002\000\006\010\040" +
    "\013\011\001\002\000\006\010\040\013\011\001\002\000" +
    "\006\010\040\013\011\001\002\000\006\010\040\013\011" +
    "\001\002\000\006\010\040\013\011\001\002\000\020\002" +
    "\ufffe\004\ufffe\005\ufffe\006\033\007\035\011\ufffe\012\034" +
    "\001\002\000\006\010\040\013\011\001\002\000\020\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb\012\034" +
    "\001\002\000\020\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\011\ufffa\012\ufffa\001\002\000\020\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\011\ufffc\012\034\001\002\000" +
    "\020\002\ufffd\004\ufffd\005\ufffd\006\033\007\035\011\ufffd" +
    "\012\034\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\010\002\007\003\004\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\027\004\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\026\001\001\000\004" +
    "\004\025\001\001\000\004\004\024\001\001\000\004\004" +
    "\023\001\001\000\004\004\020\001\001\000\004\004\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\043\001\001\000\004\003\042\001\001\000\004" +
    "\003\041\001\001\000\004\003\040\001\001\000\004\003" +
    "\036\001\001\000\002\001\001\000\004\003\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* *Metodo que se llama automaticamente ante algun error sintactico */
public void syntax_error(Symbol s){
    System.out.println("Error en la linea: " + (s.right + 1) + ", columna: " + (s.left + 1) + ". Identificador " + s.value + " no reconocido");
    //Ventana.errores.add("Sintactico-" + s.value +". No reconocido -" + String.valueOf((s.left + 1)) + "-" + String.valueOf((s.right + 1)));
}

/* *Metodo que se llama en el momento que ya no es posible una recuperacion de errores */
public void unrecovered_syntax_error(Symbol s){
    System.out.println("Error en la linea: " + (s.right + 1) + ", columna: " + (s.left + 1) + ". Identificador " + s.value + " no reconocido");
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {




  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= OPERACIONENTERO 
            {
              String RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                System.out.println("El resultado es: " + res);
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= OPERACIONDECIMAL 
            {
              String RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                System.out.println("El resultaddo es: " + res);
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPERACIONENTERO ::= OPERACIONENTERO tmas OPERACIONENTERO 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    int val1 = Integer.valueOf(op1);
                    int val2 = Integer.valueOf(op2);
                    RESULT = String.valueOf(val1 + val2);
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONENTERO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPERACIONENTERO ::= OPERACIONENTERO tmenos OPERACIONENTERO 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    int val1 = Integer.valueOf(op1);
                    int val2 = Integer.valueOf(op2);
                    RESULT = String.valueOf(val1 - val2);
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONENTERO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPERACIONENTERO ::= OPERACIONENTERO tpor OPERACIONENTERO 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    int val1 = Integer.valueOf(op1);
                    int val2 = Integer.valueOf(op2);
                    RESULT = String.valueOf(val1 * val2);
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONENTERO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPERACIONENTERO ::= OPERACIONENTERO tdivision OPERACIONENTERO 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    int val1 = Integer.valueOf(op1);
                    int val2 = Integer.valueOf(op2);
                    RESULT = String.valueOf(Integer.valueOf(val1 / val2));
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONENTERO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPERACIONENTERO ::= OPERACIONENTERO televar OPERACIONENTERO 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    int val1 = Integer.valueOf(op1);
                    int val2 = Integer.valueOf(op2);
                    RESULT = String.valueOf(Math.pow(Double.valueOf(val1), Double.valueOf(val2)));
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONENTERO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPERACIONENTERO ::= tpa OPERACIONENTERO tpc 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                    RESULT = op;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONENTERO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPERACIONENTERO ::= tnumero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    RESULT = num;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONENTERO",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPERACIONDECIMAL ::= OPERACIONDECIMAL tmas OPERACIONDECIMAL 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    double val1 = Double.valueOf(op1);
                    double val2 = Double.valueOf(op2);
                    RESULT = String.valueOf(val1 + val2);
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONDECIMAL",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPERACIONDECIMAL ::= OPERACIONDECIMAL tmenos OPERACIONDECIMAL 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    double val1 = Double.valueOf(op1);
                    double val2 = Double.valueOf(op2);
                    RESULT = String.valueOf(val1 - val2);
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONDECIMAL",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPERACIONDECIMAL ::= OPERACIONDECIMAL tpor OPERACIONDECIMAL 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    double val1 = Double.valueOf(op1);
                    double val2 = Double.valueOf(op2);
                    RESULT = String.valueOf(val1 * val2);
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONDECIMAL",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPERACIONDECIMAL ::= OPERACIONDECIMAL tdivision OPERACIONDECIMAL 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    double val1 = Double.valueOf(op1);
                    double val2 = Double.valueOf(op2);
                    RESULT = String.valueOf(val1 + val2);
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONDECIMAL",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPERACIONDECIMAL ::= OPERACIONDECIMAL televar OPERACIONDECIMAL 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    double val1 = Double.valueOf(op1);
                    double val2 = Double.valueOf(op2);
                    RESULT = String.valueOf(Math.pow(val1, val2));
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONDECIMAL",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPERACIONDECIMAL ::= tpa OPERACIONDECIMAL tpc 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                    RESULT = op;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONDECIMAL",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERACIONDECIMAL ::= tdecimal 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    RESULT = num;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONDECIMAL",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
