
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package servidor;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return tabla_simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s, Proyecto proyecto1, Proyecto proyecto2, String claseactual, String proyectoactual, String proy) {
      super(s);
      this.proyecto1 = proyecto1;
      this.proyecto2 = proyecto2;
      this.clase = claseactual;
      this.proyectoactual = proyectoactual;
      this.proyectoactualnombre = proy;
  }

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\004\000" +
    "\002\007\005\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\010\010\000\002\010\007\000\002\010" +
    "\006\000\002\010\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\004\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\004\000\002\013" +
    "\006\000\002\013\005\000\002\014\006\000\002\014\005" +
    "\000\002\016\006\000\002\016\005\000\002\016\004\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\015" +
    "\005\000\002\015\003\000\002\047\007\000\002\047\010" +
    "\000\002\047\010\000\002\047\007\000\002\047\007\000" +
    "\002\047\007\000\002\047\007\000\002\047\013\000\002" +
    "\047\012\000\002\047\007\000\002\047\007\000\002\047" +
    "\005\000\002\047\005\000\002\047\006\000\002\047\006" +
    "\000\002\047\005\000\002\047\005\000\002\047\005\000" +
    "\002\047\005\000\002\047\011\000\002\047\010\000\002" +
    "\047\005\000\002\022\012\000\002\022\011\000\002\022" +
    "\011\000\002\022\010\000\002\022\011\000\002\022\010" +
    "\000\002\022\010\000\002\022\007\000\002\043\016\000" +
    "\002\043\015\000\002\043\016\000\002\043\015\000\002" +
    "\043\013\000\002\043\012\000\002\043\012\000\002\043" +
    "\011\000\002\043\012\000\002\043\011\000\002\043\011" +
    "\000\002\043\010\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\004\000\002\051\004\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\037\006" +
    "\000\002\037\005\000\002\037\004\000\002\046\005\000" +
    "\002\046\007\000\002\046\006\000\002\046\004\000\002" +
    "\042\005\000\002\042\003\000\002\023\006\000\002\023" +
    "\004\000\002\026\004\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\004\000\002\027\005\000\002\027\004\000\002\027" +
    "\004\000\002\027\004\000\002\030\012\000\002\030\011" +
    "\000\002\031\013\000\002\031\012\000\002\031\006\000" +
    "\002\031\005\000\002\031\002\000\002\035\011\000\002" +
    "\036\007\000\002\036\006\000\002\036\005\000\002\036" +
    "\004\000\002\036\002\000\002\034\013\000\002\034\012" +
    "\000\002\033\011\000\002\033\010\000\002\032\011\000" +
    "\002\032\010\000\002\040\012\000\002\040\011\000\002" +
    "\040\004\000\002\041\005\000\002\041\005\000\002\041" +
    "\006\000\002\041\006\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0176\000\016\003\013\012\017\030\006\031\007\032" +
    "\014\033\015\001\002\000\014\003\013\030\006\031\007" +
    "\032\014\033\015\001\002\000\004\013\u0172\001\002\000" +
    "\020\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\062\uffef\001\002\000\020\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\062\ufff0\001\002\000\004\002\u0171" +
    "\001\002\000\020\002\ufffc\003\ufffc\012\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\001\002\000\020\002\ufffe\003\013" +
    "\012\017\030\006\031\007\032\014\033\015\001\002\000" +
    "\004\005\033\001\002\000\020\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\062\uffee\001\002\000\020\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\062\uffed" +
    "\001\002\000\016\003\ufffa\012\017\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\001\002\000\010\003\021\006\022\062\024" +
    "\001\002\000\004\002\000\001\002\000\004\004\031\001" +
    "\002\000\004\004\030\001\002\000\016\003\ufff9\012\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\001\002\000\006\004" +
    "\025\007\026\001\002\000\016\003\ufff6\012\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\001\002\000\010\003\021\006" +
    "\022\062\024\001\002\000\016\003\ufff8\012\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\001\002\000\016\003\ufff7\012" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\001\002\000\016" +
    "\003\ufff5\012\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\001" +
    "\002\000\014\003\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\001\002\000\036\003\054\014\042\015\034\016\050\017" +
    "\044\020\046\030\006\031\043\032\014\033\015\041\035" +
    "\042\055\062\056\110\057\001\002\000\014\041\uffdc\042" +
    "\uffdc\062\uffdc\104\uffdc\107\uffdc\001\002\000\004\041\u016c" +
    "\001\002\000\036\003\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\041\uffe7" +
    "\042\uffe7\062\uffe7\110\uffe7\001\002\000\004\110\u016b\001" +
    "\002\000\036\003\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\041\uffe9\042" +
    "\uffe9\062\uffe9\110\uffe9\001\002\000\036\003\054\014\042" +
    "\015\034\016\050\017\044\020\046\030\006\031\043\032" +
    "\014\033\015\041\035\042\055\062\056\110\uffeb\001\002" +
    "\000\014\041\uffde\042\uffde\062\uffde\104\uffde\107\uffde\001" +
    "\002\000\020\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\062\ufff0\105\u0157\001\002\000\014\041\uffdb\042\uffdb\062" +
    "\uffdb\104\uffdb\107\uffdb\001\002\000\010\041\035\042\055" +
    "\062\u014a\001\002\000\014\041\uffda\042\uffda\062\uffda\104" +
    "\uffda\107\uffda\001\002\000\004\004\u0149\001\002\000\014" +
    "\041\uffdd\042\uffdd\062\uffdd\104\uffdd\107\uffdd\001\002\000" +
    "\036\003\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\041\uffea\042\uffea\062" +
    "\uffea\110\uffea\001\002\000\016\014\042\015\034\016\050" +
    "\017\044\020\046\062\u012e\001\002\000\036\003\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\041\uffe8\042\uffe8\062\uffe8\110\uffe8\001" +
    "\002\000\006\004\u0129\005\u012a\001\002\000\004\042\u0125" +
    "\001\002\000\016\011\061\041\064\042\062\047\063\062" +
    "\uffd9\107\060\001\002\000\020\002\ufff1\003\ufff1\012\ufff1" +
    "\030\ufff1\031\ufff1\032\ufff1\033\ufff1\001\002\000\020\010" +
    "\222\014\042\015\034\016\050\017\044\020\046\062\206" +
    "\001\002\000\030\036\174\042\072\046\104\057\100\060" +
    "\075\061\101\062\175\063\074\064\102\103\176\107\073" +
    "\001\002\000\006\011\165\042\166\001\002\000\010\041" +
    "\035\042\055\062\071\001\002\000\006\011\065\041\066" +
    "\001\002\000\024\042\072\046\104\057\100\060\075\061" +
    "\101\062\076\063\074\064\102\107\073\001\002\000\006" +
    "\004\uffc7\047\067\001\002\000\010\041\035\042\055\062" +
    "\071\001\002\000\004\004\uffd3\001\002\000\012\011\061" +
    "\041\064\042\062\047\063\001\002\000\024\042\072\046" +
    "\104\057\100\060\075\061\101\062\076\063\074\064\102" +
    "\107\073\001\002\000\024\042\072\046\104\057\100\060" +
    "\075\061\101\062\076\063\074\064\102\107\073\001\002" +
    "\000\042\004\uff9a\006\uff9a\010\uff9a\027\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\047\uff9a\051\uff9a\052\uff9a" +
    "\053\uff9a\054\uff9a\055\uff9a\056\uff9a\001\002\000\042\004" +
    "\uff97\006\uff97\010\uff97\027\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\045\uff97\047\uff97\051\uff97\052\uff97\053\uff97\054" +
    "\uff97\055\uff97\056\uff97\001\002\000\046\004\uff99\006\uff99" +
    "\007\145\010\uff99\027\uff99\041\uff99\042\uff99\043\uff99\044" +
    "\uff99\045\uff99\047\uff99\051\uff99\052\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\107\143\001\002\000\042\004\uff95\006" +
    "\uff95\010\uff95\027\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\047\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055" +
    "\uff95\056\uff95\001\002\000\042\004\uff96\006\uff96\010\uff96" +
    "\027\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\047" +
    "\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96" +
    "\001\002\000\042\004\uff9b\006\uff9b\010\uff9b\027\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\047\uff9b\051\uff9b" +
    "\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\001\002\000" +
    "\042\004\uff98\006\uff98\010\uff98\027\uff98\041\uff98\042\uff98" +
    "\043\uff98\044\uff98\045\uff98\047\uff98\051\uff98\052\uff98\053" +
    "\uff98\054\uff98\055\uff98\056\uff98\001\002\000\036\004\uffc9" +
    "\006\114\041\116\042\106\043\120\044\111\045\115\047" +
    "\141\051\107\052\113\053\112\054\117\055\121\056\110" +
    "\001\002\000\024\042\072\046\104\057\100\060\075\061" +
    "\101\062\076\063\074\064\102\107\073\001\002\000\042" +
    "\004\uffa6\006\uffa6\010\uffa6\027\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\047\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\056\uffa6\001\002\000\024\042\136\046" +
    "\104\057\100\060\075\061\101\062\076\063\074\064\102" +
    "\107\073\001\002\000\024\042\072\046\104\057\100\060" +
    "\075\061\101\062\076\063\074\064\102\107\073\001\002" +
    "\000\024\042\072\046\104\057\100\060\075\061\101\062" +
    "\076\063\074\064\102\107\073\001\002\000\024\042\072" +
    "\046\104\057\100\060\075\061\101\062\076\063\074\064" +
    "\102\107\073\001\002\000\024\042\072\046\104\057\100" +
    "\060\075\061\101\062\076\063\074\064\102\107\073\001" +
    "\002\000\024\042\072\046\104\057\100\060\075\061\101" +
    "\062\076\063\074\064\102\107\073\001\002\000\024\042" +
    "\072\046\104\057\100\060\075\061\101\062\076\063\074" +
    "\064\102\107\073\001\002\000\024\042\072\046\104\057" +
    "\100\060\075\061\101\062\076\063\074\064\102\107\073" +
    "\001\002\000\026\041\125\042\072\046\104\057\100\060" +
    "\075\061\101\062\076\063\074\064\102\107\073\001\002" +
    "\000\024\042\072\046\104\057\100\060\075\061\101\062" +
    "\076\063\074\064\102\107\073\001\002\000\024\042\072" +
    "\046\104\057\100\060\075\061\101\062\076\063\074\064" +
    "\102\107\073\001\002\000\024\042\072\046\104\057\100" +
    "\060\075\061\101\062\076\063\074\064\102\107\073\001" +
    "\002\000\042\004\uffa0\006\uffa0\010\uffa0\027\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\111\045\115\047\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\001\002\000\042" +
    "\004\uffa9\006\uffa9\010\uffa9\027\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\111\045\115\047\uffa9\051\107\052\113\053\112" +
    "\054\117\055\121\056\110\001\002\000\042\004\uffa1\006" +
    "\uffa1\010\uffa1\027\uffa1\041\uffa1\042\uffa1\043\uffa1\044\111" +
    "\045\115\047\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\001\002\000\042\004\uff9d\006\uff9d\010\uff9d" +
    "\027\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\047" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\001\002\000\042\004\uffab\006\114\010\uffab\027\uffab\041" +
    "\uffab\042\uffab\043\120\044\111\045\115\047\uffab\051\107" +
    "\052\113\053\112\054\117\055\121\056\110\001\002\000" +
    "\042\004\uffa7\006\uffa7\010\uffa7\027\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\047\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\001\002\000\042\004\uffac" +
    "\006\uffac\010\uffac\027\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\111\045\115\047\uffac\051\107\052\113\053\112\054\117" +
    "\055\121\056\110\001\002\000\042\004\uffa3\006\uffa3\010" +
    "\uffa3\027\uffa3\041\uffa3\042\uffa3\043\uffa3\044\111\045\115" +
    "\047\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056" +
    "\uffa3\001\002\000\042\004\uffa2\006\uffa2\010\uffa2\027\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\111\045\115\047\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\001\002" +
    "\000\042\004\uffa8\006\uffa8\010\uffa8\027\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\047\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\056\uffa8\001\002\000\042\004" +
    "\uff9f\006\uff9f\010\uff9f\027\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\111\045\115\047\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\055\uff9f\056\uff9f\001\002\000\042\004\uffa4\006\uffa4" +
    "\010\uffa4\027\uffa4\041\uffa4\042\uffa4\043\uffa4\044\111\045" +
    "\115\047\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\056\uffa4\001\002\000\062\004\uff9c\006\uff9c\010\uff9c\027" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\104" +
    "\047\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\057\100\060\075\061\101\062\076\063\074\064\102" +
    "\107\073\001\002\000\042\004\uffaa\006\114\010\uffaa\027" +
    "\uffaa\041\uffaa\042\uffaa\043\120\044\111\045\115\047\uffaa" +
    "\051\107\052\113\053\112\054\117\055\121\056\110\001" +
    "\002\000\042\004\uffa5\006\114\010\uffa5\027\uffa5\041\uffa5" +
    "\042\uffa5\043\120\044\111\045\115\047\uffa5\051\107\052" +
    "\113\053\112\054\117\055\121\056\110\001\002\000\010" +
    "\041\035\042\055\062\071\001\002\000\004\004\uffd5\001" +
    "\002\000\026\010\160\042\072\046\104\057\100\060\075" +
    "\061\101\062\076\063\074\064\102\107\073\001\002\000" +
    "\042\004\uff92\006\uff92\010\uff92\027\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\047\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\055\uff92\056\uff92\001\002\000\004\062\146" +
    "\001\002\000\046\004\uff8e\006\uff8e\007\145\010\uff8e\027" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\047\uff8e" +
    "\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\107" +
    "\147\001\002\000\026\010\153\042\072\046\104\057\100" +
    "\060\075\061\101\062\076\063\074\064\102\107\073\001" +
    "\002\000\042\004\uff91\006\uff91\010\uff91\027\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\047\uff91\051\uff91\052" +
    "\uff91\053\uff91\054\uff91\055\uff91\056\uff91\001\002\000\004" +
    "\010\156\001\002\000\036\006\114\010\uff8c\041\116\042" +
    "\106\043\120\044\111\045\115\047\154\051\107\052\113" +
    "\053\112\054\117\055\121\056\110\001\002\000\042\004" +
    "\uff8f\006\uff8f\010\uff8f\027\uff8f\041\uff8f\042\uff8f\043\uff8f" +
    "\044\uff8f\045\uff8f\047\uff8f\051\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\055\uff8f\056\uff8f\001\002\000\024\042\072\046\104" +
    "\057\100\060\075\061\101\062\076\063\074\064\102\107" +
    "\073\001\002\000\004\010\uff8d\001\002\000\042\004\uff90" +
    "\006\uff90\010\uff90\027\uff90\041\uff90\042\uff90\043\uff90\044" +
    "\uff90\045\uff90\047\uff90\051\uff90\052\uff90\053\uff90\054\uff90" +
    "\055\uff90\056\uff90\001\002\000\004\010\161\001\002\000" +
    "\042\004\uff93\006\uff93\010\uff93\027\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\047\uff93\051\uff93\052\uff93\053" +
    "\uff93\054\uff93\055\uff93\056\uff93\001\002\000\042\004\uff94" +
    "\006\uff94\010\uff94\027\uff94\041\uff94\042\uff94\043\uff94\044" +
    "\uff94\045\uff94\047\uff94\051\uff94\052\uff94\053\uff94\054\uff94" +
    "\055\uff94\056\uff94\001\002\000\034\006\114\010\163\041" +
    "\116\042\106\043\120\044\111\045\115\051\107\052\113" +
    "\053\112\054\117\055\121\056\110\001\002\000\042\004" +
    "\uff9e\006\uff9e\010\uff9e\027\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\047\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\001\002\000\004\004\uffcb\001\002" +
    "\000\024\042\072\046\104\057\100\060\075\061\101\062" +
    "\076\063\074\064\102\107\073\001\002\000\006\004\uffc6" +
    "\047\167\001\002\000\010\041\035\042\055\062\071\001" +
    "\002\000\004\004\uffd2\001\002\000\036\004\uffc8\006\114" +
    "\041\116\042\106\043\120\044\111\045\115\047\172\051" +
    "\107\052\113\053\112\054\117\055\121\056\110\001\002" +
    "\000\010\041\035\042\055\062\071\001\002\000\004\004" +
    "\uffd4\001\002\000\016\014\042\015\034\016\050\017\044" +
    "\020\046\062\206\001\002\000\044\004\uff99\006\uff99\007" +
    "\145\011\204\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99" +
    "\047\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056" +
    "\uff99\107\143\001\002\000\006\004\uffc1\047\202\001\002" +
    "\000\036\004\uffca\006\114\041\116\042\106\043\120\044" +
    "\111\045\115\047\200\051\107\052\113\053\112\054\117" +
    "\055\121\056\110\001\002\000\010\041\035\042\055\062" +
    "\071\001\002\000\004\004\uffd6\001\002\000\010\041\035" +
    "\042\055\062\071\001\002\000\004\004\uffcd\001\002\000" +
    "\010\041\035\042\055\062\071\001\002\000\004\004\uffcc" +
    "\001\002\000\014\041\uffd9\042\uffd9\062\uffd9\104\uffd9\107" +
    "\uffd9\001\002\000\004\107\210\001\002\000\026\010\212" +
    "\042\072\046\104\057\100\060\075\061\101\062\076\063" +
    "\074\064\102\107\073\001\002\000\004\010\215\001\002" +
    "\000\006\004\uffc2\047\213\001\002\000\010\041\035\042" +
    "\055\062\071\001\002\000\004\004\uffce\001\002\000\006" +
    "\004\uffc3\047\216\001\002\000\010\041\035\042\055\062" +
    "\071\001\002\000\004\004\uffcf\001\002\000\004\062\u0122" +
    "\001\002\000\004\010\u011d\001\002\000\004\005\223\001" +
    "\002\000\054\003\242\014\042\015\034\016\050\017\044" +
    "\020\046\021\243\023\225\024\250\025\247\026\234\030" +
    "\006\031\007\032\014\033\015\034\233\035\232\041\035" +
    "\042\055\062\244\110\251\001\002\000\004\004\u011c\001" +
    "\002\000\004\107\371\001\002\000\060\003\uff84\014\uff84" +
    "\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\023\uff84\024" +
    "\uff84\025\uff84\026\uff84\030\uff84\031\uff84\032\uff84\033\uff84" +
    "\034\uff84\035\uff84\037\uff84\040\uff84\041\uff84\042\uff84\062" +
    "\uff84\110\uff84\001\002\000\004\110\370\001\002\000\060" +
    "\003\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021" +
    "\uff87\023\uff87\024\uff87\025\uff87\026\uff87\030\uff87\031\uff87" +
    "\032\uff87\033\uff87\034\uff87\035\uff87\037\uff87\040\uff87\041" +
    "\uff87\042\uff87\062\uff87\110\uff87\001\002\000\060\003\uff81" +
    "\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\023" +
    "\uff81\024\uff81\025\uff81\026\uff81\030\uff81\031\uff81\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\037\uff81\040\uff81\041\uff81\042" +
    "\uff81\062\uff81\110\uff81\001\002\000\024\042\072\046\104" +
    "\057\100\060\075\061\101\062\076\063\074\064\102\107" +
    "\073\001\002\000\004\004\365\001\002\000\004\107\346" +
    "\001\002\000\010\041\035\042\055\062\335\001\002\000" +
    "\060\003\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86" +
    "\021\uff86\023\uff86\024\uff86\025\uff86\026\uff86\030\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\035\uff86\037\uff86\040\uff86" +
    "\041\uff86\042\uff86\062\uff86\110\uff86\001\002\000\016\014" +
    "\042\015\034\016\050\017\044\020\046\062\206\001\002" +
    "\000\060\003\242\014\042\015\034\016\050\017\044\020" +
    "\046\021\243\023\225\024\250\025\247\026\234\030\006" +
    "\031\007\032\014\033\015\034\233\035\232\037\uff88\040" +
    "\uff88\041\035\042\055\062\244\110\uff88\001\002\000\060" +
    "\003\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\021" +
    "\uff82\023\uff82\024\uff82\025\uff82\026\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\037\uff82\040\uff82\041" +
    "\uff82\042\uff82\062\uff82\110\uff82\001\002\000\006\004\327" +
    "\110\330\001\002\000\004\107\277\001\002\000\020\007" +
    "\145\011\061\041\064\042\062\047\063\062\uffd9\107\143" +
    "\001\002\000\060\003\uff85\014\uff85\015\uff85\016\uff85\017" +
    "\uff85\020\uff85\021\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\037" +
    "\uff85\040\uff85\041\uff85\042\uff85\062\uff85\110\uff85\001\002" +
    "\000\060\003\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020" +
    "\uff83\021\uff83\023\uff83\024\uff83\025\uff83\026\uff83\030\uff83" +
    "\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\062\uff83\110\uff83\001\002\000\004" +
    "\005\261\001\002\000\004\107\252\001\002\000\036\003" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\041\uffb9\042\uffb9\062\uffb9\110" +
    "\uffb9\001\002\000\024\042\072\046\104\057\100\060\075" +
    "\061\101\062\076\063\074\064\102\107\073\001\002\000" +
    "\034\006\114\010\254\041\116\042\106\043\120\044\111" +
    "\045\115\051\107\052\113\053\112\054\117\055\121\056" +
    "\110\001\002\000\004\005\255\001\002\000\054\003\242" +
    "\014\042\015\034\016\050\017\044\020\046\021\243\023" +
    "\225\024\250\025\247\026\234\030\006\031\007\032\014" +
    "\033\015\034\233\035\232\041\035\042\055\062\244\110" +
    "\257\001\002\000\004\110\260\001\002\000\060\003\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\023" +
    "\uff6b\024\uff6b\025\uff6b\026\uff6b\030\uff6b\031\uff6b\032\uff6b" +
    "\033\uff6b\034\uff6b\035\uff6b\037\uff6b\040\uff6b\041\uff6b\042" +
    "\uff6b\062\uff6b\110\uff6b\001\002\000\060\003\uff6c\014\uff6c" +
    "\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c\023\uff6c\024" +
    "\uff6c\025\uff6c\026\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c" +
    "\034\uff6c\035\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\062" +
    "\uff6c\110\uff6c\001\002\000\054\003\242\014\042\015\034" +
    "\016\050\017\044\020\046\021\243\023\225\024\250\025" +
    "\247\026\234\030\006\031\007\032\014\033\015\034\233" +
    "\035\232\041\035\042\055\062\244\110\263\001\002\000" +
    "\004\110\271\001\002\000\004\024\264\001\002\000\004" +
    "\107\265\001\002\000\024\042\072\046\104\057\100\060" +
    "\075\061\101\062\076\063\074\064\102\107\073\001\002" +
    "\000\034\006\114\010\267\041\116\042\106\043\120\044" +
    "\111\045\115\051\107\052\113\053\112\054\117\055\121" +
    "\056\110\001\002\000\004\004\270\001\002\000\060\003" +
    "\uff6d\014\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d" +
    "\023\uff6d\024\uff6d\025\uff6d\026\uff6d\030\uff6d\031\uff6d\032" +
    "\uff6d\033\uff6d\034\uff6d\035\uff6d\037\uff6d\040\uff6d\041\uff6d" +
    "\042\uff6d\062\uff6d\110\uff6d\001\002\000\004\024\272\001" +
    "\002\000\004\107\273\001\002\000\024\042\072\046\104" +
    "\057\100\060\075\061\101\062\076\063\074\064\102\107" +
    "\073\001\002\000\034\006\114\010\275\041\116\042\106" +
    "\043\120\044\111\045\115\051\107\052\113\053\112\054" +
    "\117\055\121\056\110\001\002\000\004\004\276\001\002" +
    "\000\060\003\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020" +
    "\uff6e\021\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\030\uff6e" +
    "\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\037\uff6e\040" +
    "\uff6e\041\uff6e\042\uff6e\062\uff6e\110\uff6e\001\002\000\024" +
    "\042\072\046\104\057\100\060\075\061\101\062\076\063" +
    "\074\064\102\107\073\001\002\000\034\006\114\010\301" +
    "\041\116\042\106\043\120\044\111\045\115\051\107\052" +
    "\113\053\112\054\117\055\121\056\110\001\002\000\004" +
    "\005\302\001\002\000\054\003\242\014\042\015\034\016" +
    "\050\017\044\020\046\021\243\023\225\024\250\025\247" +
    "\026\234\030\006\031\007\032\014\033\015\034\233\035" +
    "\232\041\035\042\055\062\244\110\304\001\002\000\004" +
    "\110\325\001\002\000\062\003\uff75\014\uff75\015\uff75\016" +
    "\uff75\017\uff75\020\uff75\021\uff75\022\305\023\uff75\024\uff75" +
    "\025\uff75\026\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034" +
    "\uff75\035\uff75\037\uff75\040\uff75\041\uff75\042\uff75\062\uff75" +
    "\110\uff75\001\002\000\006\005\310\021\307\001\002\000" +
    "\060\003\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a" +
    "\021\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\030\uff7a\031" +
    "\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\062\uff7a\110\uff7a\001\002\000\004\107" +
    "\314\001\002\000\054\003\242\014\042\015\034\016\050" +
    "\017\044\020\046\021\243\023\225\024\250\025\247\026" +
    "\234\030\006\031\007\032\014\033\015\034\233\035\232" +
    "\041\035\042\055\062\244\110\312\001\002\000\004\110" +
    "\313\001\002\000\060\003\uff76\014\uff76\015\uff76\016\uff76" +
    "\017\uff76\020\uff76\021\uff76\023\uff76\024\uff76\025\uff76\026" +
    "\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76" +
    "\037\uff76\040\uff76\041\uff76\042\uff76\062\uff76\110\uff76\001" +
    "\002\000\060\003\uff77\014\uff77\015\uff77\016\uff77\017\uff77" +
    "\020\uff77\021\uff77\023\uff77\024\uff77\025\uff77\026\uff77\030" +
    "\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\062\uff77\110\uff77\001\002\000" +
    "\024\042\072\046\104\057\100\060\075\061\101\062\076" +
    "\063\074\064\102\107\073\001\002\000\034\006\114\010" +
    "\316\041\116\042\106\043\120\044\111\045\115\051\107" +
    "\052\113\053\112\054\117\055\121\056\110\001\002\000" +
    "\004\005\317\001\002\000\054\003\242\014\042\015\034" +
    "\016\050\017\044\020\046\021\243\023\225\024\250\025" +
    "\247\026\234\030\006\031\007\032\014\033\015\034\233" +
    "\035\232\041\035\042\055\062\244\110\321\001\002\000" +
    "\004\110\323\001\002\000\062\003\uff75\014\uff75\015\uff75" +
    "\016\uff75\017\uff75\020\uff75\021\uff75\022\305\023\uff75\024" +
    "\uff75\025\uff75\026\uff75\030\uff75\031\uff75\032\uff75\033\uff75" +
    "\034\uff75\035\uff75\037\uff75\040\uff75\041\uff75\042\uff75\062" +
    "\uff75\110\uff75\001\002\000\060\003\uff78\014\uff78\015\uff78" +
    "\016\uff78\017\uff78\020\uff78\021\uff78\023\uff78\024\uff78\025" +
    "\uff78\026\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78" +
    "\035\uff78\037\uff78\040\uff78\041\uff78\042\uff78\062\uff78\110" +
    "\uff78\001\002\000\062\003\uff75\014\uff75\015\uff75\016\uff75" +
    "\017\uff75\020\uff75\021\uff75\022\305\023\uff75\024\uff75\025" +
    "\uff75\026\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75" +
    "\035\uff75\037\uff75\040\uff75\041\uff75\042\uff75\062\uff75\110" +
    "\uff75\001\002\000\060\003\uff79\014\uff79\015\uff79\016\uff79" +
    "\017\uff79\020\uff79\021\uff79\023\uff79\024\uff79\025\uff79\026" +
    "\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79" +
    "\037\uff79\040\uff79\041\uff79\042\uff79\062\uff79\110\uff79\001" +
    "\002\000\062\003\uff75\014\uff75\015\uff75\016\uff75\017\uff75" +
    "\020\uff75\021\uff75\022\305\023\uff75\024\uff75\025\uff75\026" +
    "\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75" +
    "\037\uff75\040\uff75\041\uff75\042\uff75\062\uff75\110\uff75\001" +
    "\002\000\060\003\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b" +
    "\020\uff7b\021\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\030" +
    "\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\037\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\062\uff7b\110\uff7b\001\002\000" +
    "\060\003\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d" +
    "\021\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\030\uff7d\031" +
    "\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\037\uff7d\040\uff7d" +
    "\041\uff7d\042\uff7d\062\uff7d\110\uff7d\001\002\000\060\003" +
    "\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\026\uff7c\030\uff7c\031\uff7c\032" +
    "\uff7c\033\uff7c\034\uff7c\035\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\062\uff7c\110\uff7c\001\002\000\010\037\uff89\040" +
    "\uff89\110\uff89\001\002\000\010\041\035\042\055\062\335" +
    "\001\002\000\004\004\341\001\002\000\004\004\340\001" +
    "\002\000\014\004\uffd7\011\061\041\064\042\062\047\336" +
    "\001\002\000\010\041\035\042\055\062\335\001\002\000" +
    "\004\004\uffd8\001\002\000\060\003\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\062\uffe3\110" +
    "\uffe3\001\002\000\060\003\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\062\uffe1\110\uffe1\001" +
    "\002\000\004\004\345\001\002\000\004\004\344\001\002" +
    "\000\060\003\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\062\uffe2\110\uffe2\001\002\000\060" +
    "\003\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\062\uffe0\110\uffe0\001\002\000\024\042\072" +
    "\046\104\057\100\060\075\061\101\062\076\063\074\064" +
    "\102\107\073\001\002\000\034\006\114\010\350\041\116" +
    "\042\106\043\120\044\111\045\115\051\107\052\113\053" +
    "\112\054\117\055\121\056\110\001\002\000\004\005\351" +
    "\001\002\000\010\037\354\040\353\110\uff6f\001\002\000" +
    "\004\110\364\001\002\000\004\027\362\001\002\000\024" +
    "\042\072\046\104\057\100\060\075\061\101\062\076\063" +
    "\074\064\102\107\073\001\002\000\034\006\114\027\356" +
    "\041\116\042\106\043\120\044\111\045\115\051\107\052" +
    "\113\053\112\054\117\055\121\056\110\001\002\000\060" +
    "\003\242\014\042\015\034\016\050\017\044\020\046\021" +
    "\243\023\225\024\250\025\247\026\234\030\006\031\007" +
    "\032\014\033\015\034\233\035\232\037\354\040\353\041" +
    "\035\042\055\062\244\110\uff6f\001\002\000\004\110\uff72" +
    "\001\002\000\010\037\354\040\353\110\uff6f\001\002\000" +
    "\004\110\uff73\001\002\000\054\003\242\014\042\015\034" +
    "\016\050\017\044\020\046\021\243\023\225\024\250\025" +
    "\247\026\234\030\006\031\007\032\014\033\015\034\233" +
    "\035\232\041\035\042\055\062\244\110\uff70\001\002\000" +
    "\004\110\uff71\001\002\000\060\003\uff74\014\uff74\015\uff74" +
    "\016\uff74\017\uff74\020\uff74\021\uff74\023\uff74\024\uff74\025" +
    "\uff74\026\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74" +
    "\035\uff74\037\uff74\040\uff74\041\uff74\042\uff74\062\uff74\110" +
    "\uff74\001\002\000\060\003\uff7e\014\uff7e\015\uff7e\016\uff7e" +
    "\017\uff7e\020\uff7e\021\uff7e\023\uff7e\024\uff7e\025\uff7e\026" +
    "\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e" +
    "\037\uff7e\040\uff7e\041\uff7e\042\uff7e\062\uff7e\110\uff7e\001" +
    "\002\000\034\004\367\006\114\041\116\042\106\043\120" +
    "\044\111\045\115\051\107\052\113\053\112\054\117\055" +
    "\121\056\110\001\002\000\060\003\uff7f\014\uff7f\015\uff7f" +
    "\016\uff7f\017\uff7f\020\uff7f\021\uff7f\023\uff7f\024\uff7f\025" +
    "\uff7f\026\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\062\uff7f\110" +
    "\uff7f\001\002\000\036\003\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\041" +
    "\uffbb\042\uffbb\062\uffbb\110\uffbb\001\002\000\020\003\375" +
    "\014\042\015\034\016\050\017\044\020\046\062\373\001" +
    "\002\000\004\010\u0117\001\002\000\006\011\u0111\062\uffd9" +
    "\001\002\000\004\062\377\001\002\000\004\004\376\001" +
    "\002\000\004\010\uff66\001\002\000\004\011\u0100\001\002" +
    "\000\024\042\072\046\104\057\100\060\075\061\101\062" +
    "\076\063\074\064\102\107\073\001\002\000\034\004\u0102" +
    "\006\114\041\116\042\106\043\120\044\111\045\115\051" +
    "\107\052\113\053\112\054\117\055\121\056\110\001\002" +
    "\000\024\042\072\046\104\057\100\060\075\061\101\062" +
    "\076\063\074\064\102\107\073\001\002\000\034\004\u0104" +
    "\006\114\041\116\042\106\043\120\044\111\045\115\051" +
    "\107\052\113\053\112\054\117\055\121\056\110\001\002" +
    "\000\004\062\u0106\001\002\000\004\010\uff68\001\002\000" +
    "\010\011\u0107\041\u0109\042\u0108\001\002\000\024\042\072" +
    "\046\104\057\100\060\075\061\101\062\076\063\074\064" +
    "\102\107\073\001\002\000\006\011\u010d\042\u010e\001\002" +
    "\000\006\011\u010a\041\u010b\001\002\000\024\042\072\046" +
    "\104\057\100\060\075\061\101\062\076\063\074\064\102" +
    "\107\073\001\002\000\004\010\uff65\001\002\000\034\006" +
    "\114\010\uff63\041\116\042\106\043\120\044\111\045\115" +
    "\051\107\052\113\053\112\054\117\055\121\056\110\001" +
    "\002\000\024\042\072\046\104\057\100\060\075\061\101" +
    "\062\076\063\074\064\102\107\073\001\002\000\004\010" +
    "\uff64\001\002\000\034\006\114\010\uff62\041\116\042\106" +
    "\043\120\044\111\045\115\051\107\052\113\053\112\054" +
    "\117\055\121\056\110\001\002\000\034\006\114\010\uff61" +
    "\041\116\042\106\043\120\044\111\045\115\051\107\052" +
    "\113\053\112\054\117\055\121\056\110\001\002\000\024" +
    "\042\072\046\104\057\100\060\075\061\101\062\076\063" +
    "\074\064\102\107\073\001\002\000\034\004\u0113\006\114" +
    "\041\116\042\106\043\120\044\111\045\115\051\107\052" +
    "\113\053\112\054\117\055\121\056\110\001\002\000\024" +
    "\042\072\046\104\057\100\060\075\061\101\062\076\063" +
    "\074\064\102\107\073\001\002\000\034\004\u0115\006\114" +
    "\041\116\042\106\043\120\044\111\045\115\051\107\052" +
    "\113\053\112\054\117\055\121\056\110\001\002\000\004" +
    "\062\u0106\001\002\000\004\010\uff67\001\002\000\004\005" +
    "\u0118\001\002\000\054\003\242\014\042\015\034\016\050" +
    "\017\044\020\046\021\243\023\225\024\250\025\247\026" +
    "\234\030\006\031\007\032\014\033\015\034\233\035\232" +
    "\041\035\042\055\062\244\110\u011a\001\002\000\004\110" +
    "\u011b\001\002\000\060\003\uff69\014\uff69\015\uff69\016\uff69" +
    "\017\uff69\020\uff69\021\uff69\023\uff69\024\uff69\025\uff69\026" +
    "\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035\uff69" +
    "\037\uff69\040\uff69\041\uff69\042\uff69\062\uff69\110\uff69\001" +
    "\002\000\060\003\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a" +
    "\020\uff6a\021\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\030" +
    "\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a\037\uff6a" +
    "\040\uff6a\041\uff6a\042\uff6a\062\uff6a\110\uff6a\001\002\000" +
    "\060\003\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80" +
    "\021\uff80\023\uff80\024\uff80\025\uff80\026\uff80\030\uff80\031" +
    "\uff80\032\uff80\033\uff80\034\uff80\035\uff80\037\uff80\040\uff80" +
    "\041\uff80\042\uff80\062\uff80\110\uff80\001\002\000\004\005" +
    "\u011e\001\002\000\054\003\242\014\042\015\034\016\050" +
    "\017\044\020\046\021\243\023\225\024\250\025\247\026" +
    "\234\030\006\031\007\032\014\033\015\034\233\035\232" +
    "\041\035\042\055\062\244\110\u0120\001\002\000\004\110" +
    "\u0121\001\002\000\036\003\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\030\uffba\031\uffba\032\uffba\033\uffba\041" +
    "\uffba\042\uffba\062\uffba\110\uffba\001\002\000\036\003\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\041\uffbc\042\uffbc\062\uffbc\110\uffbc" +
    "\001\002\000\006\010\uff8a\047\u0123\001\002\000\016\014" +
    "\042\015\034\016\050\017\044\020\046\062\206\001\002" +
    "\000\004\010\uff8b\001\002\000\004\062\u0126\001\002\000" +
    "\006\004\uffc4\047\u0127\001\002\000\010\041\035\042\055" +
    "\062\071\001\002\000\004\004\uffd0\001\002\000\036\003" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\041\uffe6\042\uffe6\062\uffe6\110" +
    "\uffe6\001\002\000\054\003\242\014\042\015\034\016\050" +
    "\017\044\020\046\021\243\023\225\024\250\025\247\026" +
    "\234\030\006\031\007\032\014\033\015\034\233\035\232" +
    "\041\035\042\055\062\244\110\u012c\001\002\000\004\110" +
    "\u012d\001\002\000\036\003\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\041" +
    "\uffe4\042\uffe4\062\uffe4\110\uffe4\001\002\000\036\003\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\041\uffe5\042\uffe5\062\uffe5\110\uffe5" +
    "\001\002\000\012\041\uffd9\042\uffd9\062\uffd9\107\u013d\001" +
    "\002\000\010\041\035\042\055\062\u0130\001\002\000\016" +
    "\004\uffd7\011\061\041\064\042\062\047\336\107\u0131\001" +
    "\002\000\020\010\u0133\014\042\015\034\016\050\017\044" +
    "\020\046\062\206\001\002\000\004\010\u0138\001\002\000" +
    "\004\005\u0134\001\002\000\054\003\242\014\042\015\034" +
    "\016\050\017\044\020\046\021\243\023\225\024\250\025" +
    "\247\026\234\030\006\031\007\032\014\033\015\034\233" +
    "\035\232\041\035\042\055\062\244\110\u0136\001\002\000" +
    "\004\110\u0137\001\002\000\036\003\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\041\uffb1\042\uffb1\062\uffb1\110\uffb1\001\002\000\036" +
    "\003\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\041\uffb3\042\uffb3\062\uffb3" +
    "\110\uffb3\001\002\000\004\005\u0139\001\002\000\054\003" +
    "\242\014\042\015\034\016\050\017\044\020\046\021\243" +
    "\023\225\024\250\025\247\026\234\030\006\031\007\032" +
    "\014\033\015\034\233\035\232\041\035\042\055\062\244" +
    "\110\u013b\001\002\000\004\110\u013c\001\002\000\036\003" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\041\uffb2\042\uffb2\062\uffb2\110" +
    "\uffb2\001\002\000\036\003\uffb4\014\uffb4\015\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\041" +
    "\uffb4\042\uffb4\062\uffb4\110\uffb4\001\002\000\020\010\u013f" +
    "\014\042\015\034\016\050\017\044\020\046\062\206\001" +
    "\002\000\004\010\u0144\001\002\000\004\005\u0140\001\002" +
    "\000\054\003\242\014\042\015\034\016\050\017\044\020" +
    "\046\021\243\023\225\024\250\025\247\026\234\030\006" +
    "\031\007\032\014\033\015\034\233\035\232\041\035\042" +
    "\055\062\244\110\u0142\001\002\000\004\110\u0143\001\002" +
    "\000\036\003\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\041\uffbd\042\uffbd" +
    "\062\uffbd\110\uffbd\001\002\000\036\003\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\041\uffbf\042\uffbf\062\uffbf\110\uffbf\001\002\000" +
    "\004\005\u0145\001\002\000\054\003\242\014\042\015\034" +
    "\016\050\017\044\020\046\021\243\023\225\024\250\025" +
    "\247\026\234\030\006\031\007\032\014\033\015\034\233" +
    "\035\232\041\035\042\055\062\244\110\u0147\001\002\000" +
    "\004\110\u0148\001\002\000\036\003\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\041\uffbe\042\uffbe\062\uffbe\110\uffbe\001\002\000\036" +
    "\003\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\041\uffc0\042\uffc0\062\uffc0" +
    "\110\uffc0\001\002\000\060\003\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\062\uffdf\110\uffdf" +
    "\001\002\000\016\004\uffd7\011\061\041\064\042\062\047" +
    "\336\107\u014b\001\002\000\020\010\u014d\014\042\015\034" +
    "\016\050\017\044\020\046\062\206\001\002\000\004\010" +
    "\u0152\001\002\000\004\005\u014e\001\002\000\054\003\242" +
    "\014\042\015\034\016\050\017\044\020\046\021\243\023" +
    "\225\024\250\025\247\026\234\030\006\031\007\032\014" +
    "\033\015\034\233\035\232\041\035\042\055\062\244\110" +
    "\u0150\001\002\000\004\110\u0151\001\002\000\036\003\uffad" +
    "\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\041\uffad\042\uffad\062\uffad\110\uffad" +
    "\001\002\000\036\003\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\041\uffaf" +
    "\042\uffaf\062\uffaf\110\uffaf\001\002\000\004\005\u0153\001" +
    "\002\000\054\003\242\014\042\015\034\016\050\017\044" +
    "\020\046\021\243\023\225\024\250\025\247\026\234\030" +
    "\006\031\007\032\014\033\015\034\233\035\232\041\035" +
    "\042\055\062\244\110\u0155\001\002\000\004\110\u0156\001" +
    "\002\000\036\003\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\030\uffae\031\uffae\032\uffae\033\uffae\041\uffae\042" +
    "\uffae\062\uffae\110\uffae\001\002\000\036\003\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\041\uffb0\042\uffb0\062\uffb0\110\uffb0\001\002" +
    "\000\016\014\042\015\034\016\050\017\044\020\046\062" +
    "\206\001\002\000\004\104\u0159\001\002\000\004\107\u015a" +
    "\001\002\000\004\016\u015b\001\002\000\006\062\u015d\106" +
    "\u015c\001\002\000\004\062\u0164\001\002\000\004\106\u015e" +
    "\001\002\000\004\010\u015f\001\002\000\004\005\u0160\001" +
    "\002\000\054\003\242\014\042\015\034\016\050\017\044" +
    "\020\046\021\243\023\225\024\250\025\247\026\234\030" +
    "\006\031\007\032\014\033\015\034\233\035\232\041\035" +
    "\042\055\062\244\110\u0162\001\002\000\004\110\u0163\001" +
    "\002\000\036\003\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\041\uffb7\042" +
    "\uffb7\062\uffb7\110\uffb7\001\002\000\036\003\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\041\uffb8\042\uffb8\062\uffb8\110\uffb8\001\002" +
    "\000\004\010\u0165\001\002\000\004\005\u0166\001\002\000" +
    "\054\003\242\014\042\015\034\016\050\017\044\020\046" +
    "\021\243\023\225\024\250\025\247\026\234\030\006\031" +
    "\007\032\014\033\015\034\233\035\232\041\035\042\055" +
    "\062\244\110\u0168\001\002\000\004\110\u0169\001\002\000" +
    "\036\003\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\041\uffb5\042\uffb5\062" +
    "\uffb5\110\uffb5\001\002\000\036\003\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\041\uffb6\042\uffb6\062\uffb6\110\uffb6\001\002\000\004" +
    "\110\uffec\001\002\000\020\002\ufff2\003\ufff2\012\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\001\002\000\004\062\u016d" +
    "\001\002\000\006\004\uffc5\047\u016e\001\002\000\010\041" +
    "\035\042\055\062\071\001\002\000\004\004\uffd1\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002\000" +
    "\004\062\u0173\001\002\000\004\005\u0174\001\002\000\036" +
    "\003\054\014\042\015\034\016\050\017\044\020\046\030" +
    "\006\031\043\032\014\033\015\041\035\042\055\062\056" +
    "\110\u0176\001\002\000\004\110\u0177\001\002\000\020\002" +
    "\ufff3\003\ufff3\012\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\001\002\000\020\002\ufff4\003\ufff4\012\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\001\002\000\020\002\ufffd\003\ufffd" +
    "\012\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0176\000\020\002\007\003\017\004\011\005\003\006" +
    "\015\010\010\011\004\001\001\000\006\010\u0177\011\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\u016f" +
    "\004\011\005\003\006\015\010\010\011\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\031\006\015\001\001\000\004\007\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\011\051\012\036\013" +
    "\040\014\037\016\050\022\052\025\044\043\035\047\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\051" +
    "\012\u0169\013\040\014\037\016\050\022\052\025\044\043" +
    "\035\047\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\342\047\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u012e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\220\025\217\001\001\000\006\037" +
    "\076\051\176\001\001\000\002\001\001\000\004\047\163" +
    "\001\001\000\002\001\001\000\006\037\076\051\102\001" +
    "\001\000\002\001\001\000\004\047\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\076\051\137\001" +
    "\001\000\006\037\076\051\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\076\051\104\001\001\000" +
    "\002\001\001\000\006\037\076\051\136\001\001\000\006" +
    "\037\076\051\134\001\001\000\006\037\076\051\133\001" +
    "\001\000\006\037\076\051\132\001\001\000\006\037\076" +
    "\051\131\001\001\000\006\037\076\051\130\001\001\000" +
    "\006\037\076\051\127\001\001\000\006\037\076\051\126" +
    "\001\001\000\006\037\076\051\125\001\001\000\006\037" +
    "\076\051\123\001\001\000\006\037\076\051\122\001\001" +
    "\000\006\037\076\051\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\076\051\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\141\001\001" +
    "\000\002\001\001\000\010\037\076\042\156\051\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\147" +
    "\001\001\000\010\037\076\042\150\051\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\037\076\042\154\051\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\076\051\170\001\001" +
    "\000\002\001\001\000\004\047\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\172\001\001\000\002" +
    "\001\001\000\004\025\206\001\001\000\004\046\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\200" +
    "\001\001\000\002\001\001\000\004\047\202\001\001\000" +
    "\002\001\001\000\004\047\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\076\042" +
    "\210\051\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\011" +
    "\236\014\227\016\235\025\234\026\226\027\237\030\244" +
    "\032\225\033\245\034\240\035\230\037\223\047\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\037\076\051\365\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\342\047\341\001\001\000\002\001" +
    "\001\000\004\025\331\001\001\000\034\011\236\014\227" +
    "\016\235\025\234\026\330\027\237\030\244\032\225\033" +
    "\245\034\240\035\230\037\223\047\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\076\051\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\011\236\014\227\016\235\025\234\026\255\027" +
    "\237\030\244\032\225\033\245\034\240\035\230\037\223" +
    "\047\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\011\236\014\227\016\235\025\234" +
    "\026\261\027\237\030\244\032\225\033\245\034\240\035" +
    "\230\037\223\047\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\076\051\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\037\076\051" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\037\076\051\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\011\236\014\227\016\235" +
    "\025\234\026\302\027\237\030\244\032\225\033\245\034" +
    "\240\035\230\037\223\047\046\001\001\000\002\001\001" +
    "\000\004\031\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\011\236\014\227\016\235" +
    "\025\234\026\310\027\237\030\244\032\225\033\245\034" +
    "\240\035\230\037\223\047\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\037\076\051" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\011\236\014\227\016\235\025\234\026\317\027\237\030" +
    "\244\032\225\033\245\034\240\035\230\037\223\047\046" +
    "\001\001\000\002\001\001\000\004\031\321\001\001\000" +
    "\002\001\001\000\004\031\323\001\001\000\002\001\001" +
    "\000\004\031\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\333" +
    "\047\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\336\047\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\037\076\051\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\351\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\076\051\354\001\001\000" +
    "\002\001\001\000\036\011\236\014\227\016\235\025\234" +
    "\026\357\027\237\030\244\032\225\033\245\034\240\035" +
    "\230\036\356\037\223\047\046\001\001\000\002\001\001" +
    "\000\004\036\360\001\001\000\002\001\001\000\034\011" +
    "\236\014\227\016\235\025\234\026\362\027\237\030\244" +
    "\032\225\033\245\034\240\035\230\037\223\047\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\373\040\371\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\076\051\u0100\001\001" +
    "\000\002\001\001\000\006\037\076\051\u0102\001\001\000" +
    "\002\001\001\000\004\041\u0104\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\076\051\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\076\051\u010b" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\076\051\u010e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\076\051\u0111\001\001\000" +
    "\002\001\001\000\006\037\076\051\u0113\001\001\000\002" +
    "\001\001\000\004\041\u0115\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\011\236\014\227\016\235\025\234" +
    "\026\u0118\027\237\030\244\032\225\033\245\034\240\035" +
    "\230\037\223\047\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\011\236\014\227\016\235\025\234\026\u011e" +
    "\027\237\030\244\032\225\033\245\034\240\035\230\037" +
    "\223\047\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\u0123\025" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\011\236\014\227\016\235\025\234" +
    "\026\u012a\027\237\030\244\032\225\033\245\034\240\035" +
    "\230\037\223\047\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\333\047\332\001\001\000\002\001\001\000\006\023\u0131" +
    "\025\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\011\236\014\227\016\235\025\234\026\u0134\027\237" +
    "\030\244\032\225\033\245\034\240\035\230\037\223\047" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\011\236\014\227\016" +
    "\235\025\234\026\u0139\027\237\030\244\032\225\033\245" +
    "\034\240\035\230\037\223\047\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\u013d" +
    "\025\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\011\236\014\227\016\235\025\234\026\u0140\027\237" +
    "\030\244\032\225\033\245\034\240\035\230\037\223\047" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\011\236\014\227\016" +
    "\235\025\234\026\u0145\027\237\030\244\032\225\033\245" +
    "\034\240\035\230\037\223\047\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\u014b\025\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\011\236\014\227" +
    "\016\235\025\234\026\u014e\027\237\030\244\032\225\033" +
    "\245\034\240\035\230\037\223\047\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\011\236\014\227\016\235\025\234\026\u0153" +
    "\027\237\030\244\032\225\033\245\034\240\035\230\037" +
    "\223\047\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u0157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\011\236\014\227\016\235\025\234" +
    "\026\u0160\027\237\030\244\032\225\033\245\034\240\035" +
    "\230\037\223\047\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\011\236\014\227\016\235\025\234\026\u0166" +
    "\027\237\030\244\032\225\033\245\034\240\035\230\037" +
    "\223\047\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u016e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\051\012\u0174" +
    "\013\040\014\037\016\050\022\052\025\044\043\035\047" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




String clase = "";
    public void setClase(String pclase){
        clase = pclase;
    }

String proyectoactual = "";
String proyectoactualnombre = "";
    public void setProyecto(String proyectoactual, String nombre){
        this.proyectoactual = proyectoactual;
        this.proyectoactualnombre = nombre;
    }
ArrayList<Variables> auxvar = new ArrayList();
String ambito = "";

/* *Metodo que se llama automaticamente ante algun error sintactico */
public void syntax_error(Symbol s){
    //System.out.println("Error en la columna: " + (s.left + 1) + ", linea: " + (s.right + 1) + ". Identificador " + s.value + " no reconocido en clase " + clase);
    Conexion.errores.add("Sintactico-" + s.value + "-" + (s.left + 1) + "-" + (s.right + 1) + "-" + clase + "-" + proyectoactualnombre);
}

/* *Metodo que se llama en el momento que ya no es posible una recuperacion de errores */
public void unrecovered_syntax_error(Symbol s){
    //System.out.println("Error en la linea: " + (s.right + 1) + ", columna: " + (s.left + 1) + ". Identificador " + s.value + " no reconocido en clase " + clase);
    Conexion.errores.add("Sintactico-" + s.value + "-" + (s.left + 1) + "-" + (s.right + 1) + "-" + clase + "-" + proyectoactualnombre);
}
    Proyecto proyecto1 = new Proyecto();
    Proyecto proyecto2 = new Proyecto();
    public Proyecto getProyecto1(){
        return proyecto1;
    }

    public Proyecto getProyecto2(){
        return proyecto2;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {


    public void AgregarVariables(String declaraciones, String ambito){
        String tipo;
        String aux[] = declaraciones.split("-");
        //"AgregarVariables");
        //"declaraciones " + declaraciones);
        //"ambito " + ambito);
        tipo = aux[0];
        String auxid[] = aux[1].split(",");
        for(int i = 0; i < auxid.length; i++){
            Variables var = new Variables();
            var.setIdentificador(auxid[i]);
            var.setTipo(tipo);
            var.setAmbito(ambito);
            var.setProyecto(clase);
            if(proyectoactual.equals("Proyecto 1")){
                proyecto1.AgregarVariable(var);
            }else{
                proyecto2.AgregarVariable(var);
            }
        }
    }

    public ArrayList<Variables> Agregarvariablesametodos(String declaraciones){
        ArrayList<Variables> aux = new ArrayList();
        String auxid[] = declaraciones.split("\n");
        for(int i = 0; i < auxid.length; i++){
            String auxde[] = auxid[i].split("/")[1].split("-");
            String aux1[] = auxde[1].split(",");
            String tipo = auxde[0];
            for(int j = 0; j < aux1.length; j++){
                Variables var = new Variables();
                var.setIdentificador(aux1[j]);
                var.setTipo(tipo);
                aux.add(var);
            }
        }
        return aux;
    }

    public ArrayList<Parametros> Agregarparametrosmetodo(String parametros){
        //ntln("                PARAMETROS " + parametros);
        ArrayList<Parametros> par = new ArrayList();
        String aux[] = parametros.split(",");
        for(int i = 0; i < aux.length; i++){
            //ntln("                AUX[i] " + aux[i]);
            String aux1[] = aux[i].split("-");
            Parametros parametro = new Parametros();
            parametro.setTipo(aux1[0]);
            //ntln("                AUX[i] " + aux[i]);
            parametro.setNombre(aux1[1]);
            par.add(parametro);
        }
        return par;
    }

    public ArrayList<Metodos> Agregarmetodoclase(String metodo){
        ArrayList<Metodos> met = new ArrayList();
        String aux1[] = metodo.split("\n");
        //("Agregar metodo a clase");
        //(metodo);
        for(int i = 0; i < aux1.length; i++){
            String aux[] = aux1[i].split("/")[1].split("-");
            Metodos meto = new Metodos();
            meto.setNombre(aux[1]);
            meto.setTipo(aux[0]);
            met.add(meto);
        }
        return met;
    }

    public void AgregarMetodos(String id, ArrayList<Parametros> parametros, String tipo, ArrayList<Variables> variables, int numlineas){
        Metodos metodo = new Metodos();
        metodo.setNombre(id);
        //ntln("AgregarMetodos");
        //ntln(id);
        metodo.setParametros(parametros);
        for(int i = 0; i < parametros.size(); i++){
            //ntln(parametros.get(i).getNombre() + " " + parametros.get(i).getTipo());
        }
        metodo.setTipo(tipo);
        //ntln(tipo);
        metodo.setVariables(variables);
        for(int i = 0; i < variables.size(); i++){
            //ntln(variables.get(i).getIdentificador() + " " + variables.get(i).getTipo());
        }
        metodo.setCantlineas(numlineas + 1);
        if(proyectoactual.equals("Proyecto 1")){
            proyecto1.AgregarMetodos(metodo);
        }else{
            proyecto2.AgregarMetodos(metodo);
        }
    }

    public void AgregarClase(String id, ArrayList<Metodos> metodo){
        Clase clase = new Clase();
        clase.setId(id);
        clase.setMetodos(metodo);
        if(proyectoactual.equals("Proyecto 1")){
            proyecto1.AgregarClase(clase);
        }else{
            proyecto2.AgregarClase(clase);
        }
    }

  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LCLASE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LCLASE ::= CLASE LCLASE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LCLASE",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LCLASE ::= CLASE 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LCLASE",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASE ::= LIMPORT CONTENIDO 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASE ::= CONTENIDO 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CLASE",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIMPORT ::= IMPORT LIMPORT 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIMPORT",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIMPORT ::= IMPORT 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIMPORT",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORT ::= timport IMPORTAR 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMPORT",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTAR ::= tid tpunto IMPORTAR 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTAR",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IMPORTAR ::= tpor tpuntoycoma 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTAR",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IMPORTAR ::= tid tpuntoycoma 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTAR",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IMPORTAR ::= error tpuntoycoma 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTAR",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= VISIBILIDAD tclase tid tllaveabrir LSENTENCIAS tllavecerrar 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                ArrayList<Metodos> aux = new ArrayList();
                if(sentencias.contains("metodo/")){
                    aux = Agregarmetodoclase(sentencias);
                }
                AgregarClase(id, aux);
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= VISIBILIDAD tclase tid tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
                AgregarClase(id, new ArrayList());
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO ::= error tllaveabrir LSENTENCIAS tllavecerrar 
            {
              String RESULT =null;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO ::= error tllaveabrir tllavecerrar 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VISIBILIDAD ::= tpublic 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VISIBILIDAD ::= tprivate 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VISIBILIDAD ::= tprotected 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VISIBILIDAD ::= tfinal 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LSENTENCIAS ::= SENTENCIAS LSENTENCIAS 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int lsentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lsentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String lsentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(sentencias.contains("metodo/") && lsentencias.contains("metodo/")){
                    RESULT = sentencias + lsentencias;
                }else if(sentencias.contains("metoddo/")){
                    RESULT = sentencias;
                }else if(lsentencias.contains("metodo/")){
                    RESULT = lsentencias;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIAS",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LSENTENCIAS ::= SENTENCIAS 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(sentencias.contains("metodo/")){
                    RESULT = sentencias;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIAS",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= ASIGNACION 
            {
              String RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String asignacion = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(!asignacion.equals("")){
                    AgregarVariables(asignacion, "global");
                }
                RESULT = "";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= DECLARACION 
            {
              String RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String declaracion = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                AgregarVariables(declaracion, "global");
                RESULT = "";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= CONSTRUCTOR 
            {
              String RESULT =null;
		int constructorleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int constructorright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String constructor = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = constructor;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= METODOS 
            {
              String RESULT =null;
		int metodosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int metodosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String metodos = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = metodos;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= error tpuntoycoma 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS ::= error tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS ::= error tllaveabrir tllavecerrar 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= VISIBILIDAD TIPO LID tpuntoycoma 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String lid = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                RESULT = tipo + "-" + lid;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= TIPO LID tpuntoycoma 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String lid = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                RESULT = tipo + "-" + lid;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= VISIBILIDAD TIPO LIDA tpuntoycoma 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String lid = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                RESULT = tipo + "-" + lid;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= TIPO LIDA tpuntoycoma 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String lid = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                RESULT = tipo + "-" + lid;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= LIDA tpuntoycoma 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= tint 
            {
              String RESULT =null;
		RESULT = "int";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= tstring 
            {
              String RESULT =null;
		RESULT = "String";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= tbool 
            {
              String RESULT =null;
		RESULT = "boolean";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= tchar 
            {
              String RESULT =null;
		RESULT = "char";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= tdouble 
            {
              String RESULT =null;
		RESULT = "double";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= tid 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LID ::= tid tcoma LID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LID",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LID ::= tid 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LID",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LIDA ::= tid tigual EXP tcoma LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LIDA ::= tid tmas tigual EXP tcoma LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LIDA ::= tid tmenos tigual EXP tcoma LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LIDA ::= tid tmas tmas tcoma LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LIDA ::= tid tmenos tmenos tcoma LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LIDA ::= tmas tmas tid tcoma LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LIDA ::= tmenos tmenos tid tcoma LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LIDA ::= tid tigual tnew TIPO tparentesisabrir LPARAMETROSLLAMADA tparentesiscerrar tcoma LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LIDA ::= tid tigual tnew TIPO tparentesisabrir tparentesiscerrar tcoma LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LIDA ::= tid tigual tnull tcoma LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LIDA ::= tid tigual tid tigual LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2 + "," + id3;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LIDA ::= tid tcoma LIDA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "," + id2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LIDA ::= tid tigual EXP 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LIDA ::= tid tmas tigual EXP 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LIDA ::= tid tmenos tigual EXP 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LIDA ::= tid tmas tmas 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LIDA ::= tid tmenos tmenos 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LIDA ::= tmas tmas tid 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LIDA ::= tmenos tmenos tid 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LIDA ::= tid tigual tnew TIPO tparentesisabrir LPARAMETROSLLAMADA tparentesiscerrar 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LIDA ::= tid tigual tnew TIPO tparentesisabrir tparentesiscerrar 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LIDA ::= tid tigual tnull 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = id;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LIDA",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONSTRUCTOR ::= VISIBILIDAD tid tparentesisabrir LPARAMETROS tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //"Metodo: " + id);
                //"Sentencias: " + sentencias);
                int principio = (inicioright + 1), terminar = (finright + 1);
                ArrayList<Variables> auxvar = new ArrayList();
                if(sentencias.contains("declaracion/")){
                    String aux[] = sentencias.split("\n");
                    auxvar = Agregarvariablesametodos(sentencias);
                    for(int i = 0; i < aux.length; i++){
                        String auxid[] = aux[i].split("/");
                        AgregarVariables(auxid[1], id);
                    }
                }
                AgregarMetodos(id, Agregarparametrosmetodo(parametros), "void", auxvar, terminar - principio);
                RESULT = "metodo/void-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONSTRUCTOR ::= VISIBILIDAD tid tparentesisabrir tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //"Metodo: " + id);
                //"Sentencias: " + sentencias);
                int principio = (inicioright + 1), terminar = (finright + 1);
                ArrayList<Variables> auxvar = new ArrayList();
                if(sentencias.contains("declaracion/")){
                    String aux[] = sentencias.split("\n");
                    auxvar = Agregarvariablesametodos(sentencias);
                    for(int i = 0; i < aux.length; i++){
                        String auxid[] = aux[i].split("/");
                        AgregarVariables(auxid[1], id);
                    }
                }
                AgregarMetodos(id, new ArrayList(), "void", auxvar, terminar - principio);
                RESULT = "metodo/void-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONSTRUCTOR ::= VISIBILIDAD tid tparentesisabrir LPARAMETROS tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                int principio = (inicioright + 1), terminar = (finright + 1);
                AgregarMetodos(id, Agregarparametrosmetodo(parametros), "void", new ArrayList(), terminar - principio);
                RESULT = "metodo/void-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONSTRUCTOR ::= VISIBILIDAD tid tparentesisabrir tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                int principio = (inicioright + 1), terminar = (finright + 1);
                AgregarMetodos(id, new ArrayList(), "void", new ArrayList(), terminar - principio);
                RESULT = "metodo/void-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONSTRUCTOR ::= tid tparentesisabrir LPARAMETROS tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //"Metodo: " + id);
                //"Sentencias: " + sentencias);
                int principio = (idright + 1), terminar = (finright + 1);
                ArrayList<Variables> auxvar = new ArrayList();
                if(sentencias.contains("declaracion/")){
                    auxvar = Agregarvariablesametodos(sentencias);
                    String aux[] = sentencias.split("\n");
                    for(int i = 0; i < aux.length; i++){
                        String auxid[] = aux[i].split("/");
                        AgregarVariables(auxid[1], id);
                    }
                }
                //ArrayList<Parametros> para = Agregarparametrosmetodo(parametros);
                AgregarMetodos(id, Agregarparametrosmetodo(parametros), "void", auxvar, terminar - principio);
                RESULT = "metodo/void-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONSTRUCTOR ::= tid tparentesisabrir tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //"Metodo: " + id);
                //"Sentencias: " + sentencias);
                int principio = (idright + 1), terminar = (finright + 1);
                ArrayList<Variables> auxvar = new ArrayList();
                if(sentencias.contains("declaracion/")){
                    auxvar = Agregarvariablesametodos(sentencias);
                    String aux[] = sentencias.split("\n");
                    for(int i = 0; i < aux.length; i++){
                        String auxid[] = aux[i].split("/");
                        AgregarVariables(auxid[1], id);
                    }
                }
                AgregarMetodos(id, new ArrayList(), "void", auxvar, terminar - principio);
                RESULT = "metodo/void-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONSTRUCTOR ::= tid tparentesisabrir LPARAMETROS tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //ArrayList<Parametros> para = Agregarparametrosmetodo(parametros);
                int principio = (idright + 1), terminar = (finright + 1);
                AgregarMetodos(id, Agregarparametrosmetodo(parametros), "void", new ArrayList(), terminar - principio);
                RESULT = "metodo/void-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONSTRUCTOR ::= tid tparentesisabrir tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                int principio = (idright + 1), terminar = (finright + 1);
                AgregarMetodos(id, new ArrayList(), "void", new ArrayList(), terminar - principio);
                RESULT = "metodo/void-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // METODOS ::= tpublic tstatic TIPO tmain tparentesisabrir tstring tid targ tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int idparaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idpararight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String idpara = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //tipo + ": " + id);
                //"Sentencias: " + sentencias);
                int principio = (inicioright + 1), terminar = (finright + 1);
                ArrayList<Variables> auxvar = new ArrayList();
                if(sentencias.contains("declaracion/")){
                    String aux[] = sentencias.split("\n");
                    auxvar = Agregarvariablesametodos(sentencias);
                    for(int i = 0; i < aux.length; i++){
                        String auxid[] = aux[i].split("/");
                        AgregarVariables(auxid[1], id);
                    }
                }
                //ArrayList<Parametros> para = Agregarparametrosmetodo("String[]-" + idpara);
                AgregarMetodos(id, Agregarparametrosmetodo("String[]-" + idpara), tipo, auxvar, terminar - principio);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // METODOS ::= tpublic tstatic TIPO tmain tparentesisabrir tstring tid targ tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int idparaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idpararight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String idpara = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                int principio = (inicioright + 1), terminar = (finright + 1);
                AgregarMetodos(id, Agregarparametrosmetodo("String[]-" + idpara), tipo, new ArrayList(), terminar - principio);
                //ArrayList<Parametros> para = Agregarparametrosmetodo("String[]-" + idpara);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // METODOS ::= tpublic tstatic TIPO tmain tparentesisabrir tstring targ tid tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int idparaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idpararight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String idpara = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //tipo + ": " + id);
                //"Sentencias: " + sentencias);
                ArrayList<Variables> auxvar = new ArrayList();
                int principio = (inicioright + 1), terminar = (finright + 1);
                if(sentencias.contains("declaracion/")){
                    auxvar = Agregarvariablesametodos(sentencias);
                    String aux[] = sentencias.split("\n");
                    for(int i = 0; i < aux.length; i++){
                        String auxid[] = aux[i].split("/");
                        AgregarVariables(auxid[1], id);
                    }
                }
                //ArrayList<Parametros> para = Agregarparametrosmetodo("String[]-" + idpara);
                AgregarMetodos(id, Agregarparametrosmetodo("String[]-" + idpara), tipo, auxvar, terminar - principio);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // METODOS ::= tpublic tstatic TIPO tmain tparentesisabrir tstring targ tid tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int idparaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idpararight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String idpara = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //ArrayList<Parametros> para = Agregarparametrosmetodo("String[]-" + idpara);
                int principio = (inicioright + 1), terminar = (finright + 1);
                AgregarMetodos(id, Agregarparametrosmetodo("String[]-" + idpara), tipo, new ArrayList(), terminar - principio);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // METODOS ::= VISIBILIDAD TIPO tid tparentesisabrir LPARAMETROS tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //tipo + ": " + id);
                //"Sentencias: " + sentencias);
                int principio = (inicioright + 1), terminar = (finright + 1);
                ArrayList<Variables> auxvar = new ArrayList();
                if(sentencias.contains("declaracion/")){
                    auxvar = Agregarvariablesametodos(sentencias);
                    String aux[] = sentencias.split("\n");
                    for(int i = 0; i < aux.length; i++){
                        String auxid[] = aux[i].split("/");
                        AgregarVariables(auxid[1], id);
                    }
                }
                //ArrayList<Parametros> para = Agregarparametrosmetodo(parametros);
                AgregarMetodos(id, Agregarparametrosmetodo(parametros), tipo, auxvar, terminar - principio);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // METODOS ::= VISIBILIDAD TIPO tid tparentesisabrir tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //tipo + ": " + id);
                //"Sentencias: " + sentencias);
                int principio = (inicioright + 1), terminar = (finright + 1);
                ArrayList<Variables> auxvar = new ArrayList();
                if(sentencias.contains("declaracion/")){
                    auxvar = Agregarvariablesametodos(sentencias);
                    String aux[] = sentencias.split("\n");
                    for(int i = 0; i < aux.length; i++){
                        String auxid[] = aux[i].split("/");
                        AgregarVariables(auxid[1], id);
                    }
                }
                AgregarMetodos(id, new ArrayList(), tipo, auxvar, terminar - principio);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // METODOS ::= VISIBILIDAD TIPO tid tparentesisabrir LPARAMETROS tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                int principio = (inicioright + 1), terminar = (finright + 1);
                AgregarMetodos(id, Agregarparametrosmetodo(parametros), tipo, new ArrayList(), terminar - principio);
                //ArrayList<Parametros> para = Agregarparametrosmetodo(parametros);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // METODOS ::= VISIBILIDAD TIPO tid tparentesisabrir tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                int principio = (inicioright + 1), terminar = (finright + 1);
                AgregarMetodos(id, new ArrayList(), tipo, new ArrayList(), terminar - principio);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // METODOS ::= TIPO tid tparentesisabrir LPARAMETROS tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //tipo + ": " + id);
                //"Sentencias: " + sentencias);
                int principio = (tiporight + 1), terminar = (finright + 1);
                ArrayList<Variables> auxvar = new ArrayList();
                if(sentencias.contains("declaracion/")){
                    auxvar = Agregarvariablesametodos(sentencias);
                    String aux[] = sentencias.split("\n");
                    for(int i = 0; i < aux.length; i++){
                        String auxid[] = aux[i].split("/");
                        AgregarVariables(auxid[1], id);
                    }
                }
                //ArrayList<Parametros> para = Agregarparametrosmetodo(parametros);
                AgregarMetodos(id, Agregarparametrosmetodo(parametros), tipo, auxvar, terminar - principio);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // METODOS ::= TIPO tid tparentesisabrir tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //tipo + ": " + id);
                //"Sentencias: " + sentencias);
                int principio = (tiporight + 1), terminar = (finright + 1);
                ArrayList<Variables> auxvar = new ArrayList();
                if(sentencias.contains("declaracion/")){
                    auxvar = Agregarvariablesametodos(sentencias);
                    String aux[] = sentencias.split("\n");
                    for(int i = 0; i < aux.length; i++){
                        String auxid[] = aux[i].split("/");
                        AgregarVariables(auxid[1], id);
                    }
                }
                AgregarMetodos(id, new ArrayList(), tipo, auxvar, terminar - principio);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // METODOS ::= TIPO tid tparentesisabrir LPARAMETROS tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                int principio = (tiporight + 1), terminar = (finright + 1);
                AgregarMetodos(id, Agregarparametrosmetodo(parametros), tipo, new ArrayList(), terminar - principio);
                //ArrayList<Parametros> para = Agregarparametrosmetodo(parametros);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // METODOS ::= TIPO tid tparentesisabrir tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String inicio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                int principio = (tiporight + 1), terminar = (finright + 1);
                AgregarMetodos(id, new ArrayList(), tipo, new ArrayList(), terminar - principio);
                RESULT = "metodo/" + tipo + "-" + id + "\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP tpor EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= EXP tmas EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= EXP tmenos EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP tdiv EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= EXP tand EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP tor EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= tnot EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= tmenos EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= EXP tmenor EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= EXP tmayor EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= EXP tmenorigual EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= EXP tmayorigual EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= EXP tiguala EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= EXP tdiferente EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= tparentesisabrir EXP tparentesiscerrar 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= EXP tmas tmas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= EXP tmenos tmenos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= tnumero 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= tcadena 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= tid 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= tcaracter 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= ttrue 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= tfalse 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= LLAMADA 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LLAMADA ::= tid tparentesisabrir LPARAMETROSLLAMADA tparentesiscerrar 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LLAMADA ::= tid tparentesisabrir tparentesiscerrar 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LLAMADA ::= tid AUXLLAMADA 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // AUXLLAMADA ::= tpunto tid AUXLLAMADA 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUXLLAMADA",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // AUXLLAMADA ::= tpunto tid tparentesisabrir LPARAMETROSLLAMADA tparentesiscerrar 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUXLLAMADA",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // AUXLLAMADA ::= tpunto tid tparentesisabrir tparentesiscerrar 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUXLLAMADA",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // AUXLLAMADA ::= tpunto tid 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUXLLAMADA",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LPARAMETROSLLAMADA ::= EXP tcoma LPARAMETROSLLAMADA 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LPARAMETROSLLAMADA",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LPARAMETROSLLAMADA ::= EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LPARAMETROSLLAMADA",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LPARAMETROS ::= TIPO tid tcoma LPARAMETROS 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int lparametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lparametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String lparametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = tipo + "-" + id + "," + lparametros;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LPARAMETROS",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LPARAMETROS ::= TIPO tid 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = tipo + "-" + id;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LPARAMETROS",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LSENTENCIASMETFUN ::= SENTENCIASMETFUN LSENTENCIASMETFUN 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int lsentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lsentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String lsentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(sentencias.contains("declaracion/") && lsentencias.contains("declaracion/")){
                            RESULT = sentencias + lsentencias;
                        }else if(sentencias.contains("declaracion/")){
                            RESULT = sentencias;
                        }else if(lsentencias.contains("declaracion/")){
                            RESULT = lsentencias;
                        }else{
                            RESULT = "";
                        }
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIASMETFUN",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LSENTENCIASMETFUN ::= SENTENCIASMETFUN 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(sentencias.contains("declaracion/")){
                            RESULT = sentencias;
                        }else{
                            RESULT = "";
                        }
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIASMETFUN",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIASMETFUN ::= DECLARACION 
            {
              String RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String declaracion = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        //"declaracion " + declaracion);
                        RESULT = "declaracion/" + declaracion + "\n";
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIASMETFUN ::= ASIGNACION 
            {
              String RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String asignacion = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(!asignacion.equals("")){
                            //"DECLARACION " + asignacion);
                            RESULT = "declaracion/" + asignacion + "\n";
                        }else{
                            RESULT = "";
                        }
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIASMETFUN ::= IFMETFUN 
            {
              String RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencia = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(sentencia.contains("declaracion/")){
                            RESULT = sentencia;
                        }else{
                            RESULT = "";
                        }
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIASMETFUN ::= FORMETFUN 
            {
              String RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencia = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(sentencia.contains("declaracion/")){
                            RESULT = sentencia;
                        }else{
                            RESULT = "";
                        }
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIASMETFUN ::= WHILEMETFUN 
            {
              String RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencia = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(sentencia.contains("declaracion/")){
                            RESULT = sentencia;
                        }else{
                            RESULT = "";
                        }
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIASMETFUN ::= DOWHILEMETFUN 
            {
              String RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencia = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(sentencia.contains("declaracion/")){
                            RESULT = sentencia;
                        }else{
                            RESULT = "";
                        }
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIASMETFUN ::= SWITCHMETFUN 
            {
              String RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencia = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        if(sentencia.contains("declaracion/")){
                            RESULT = sentencia;
                        }else{
                            RESULT = "";
                        }
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIASMETFUN ::= LLAMADA tpuntoycoma 
            {
              String RESULT =null;
		
                        //"Encontre una llamada");
                        RESULT = "";
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIASMETFUN ::= treturn EXP tpuntoycoma 
            {
              String RESULT =null;
		
                        //"Encontre un return");
                        RESULT = "";
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIASMETFUN ::= tbreak tpuntoycoma 
            {
              String RESULT =null;
		
                        //"Encontre un break");
                        RESULT = "";
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIASMETFUN ::= error tpuntoycoma 
            {
              String RESULT =null;
		
                        RESULT = "";
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIASMETFUN ::= error tllavecerrar 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASMETFUN",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IFMETFUN ::= tif tparentesisabrir EXP tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar ELSEMETFUN 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int elsemleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int elsemright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String elsem = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(sentencias.contains("declaracion/") && elsem.contains("declaracion/")){
                    RESULT = sentencias + elsem;
                }else if(sentencias.contains("declaracion/")){
                    RESULT = sentencias;
                }else if(elsem.contains("declaracion/")){
                    RESULT = elsem;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IFMETFUN",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IFMETFUN ::= tif tparentesisabrir EXP tparentesiscerrar tllaveabrir tllavecerrar ELSEMETFUN 
            {
              String RESULT =null;
		int elsemleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int elsemright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String elsem = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(elsem.contains("declaracion/")){
                    RESULT = elsem;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IFMETFUN",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ELSEMETFUN ::= telse tif tparentesisabrir EXP tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar ELSEMETFUN 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int elsemleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int elsemright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String elsem = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(sentencias.contains("declaracion/") && elsem.contains("declaracion/")){
                    RESULT = sentencias + elsem;
                }else if(sentencias.contains("declaracion/")){
                    RESULT = sentencias;
                }else if(elsem.contains("declaracion/")){
                    RESULT = elsem;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSEMETFUN",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ELSEMETFUN ::= telse tif tparentesisabrir EXP tparentesiscerrar tllaveabrir tllavecerrar ELSEMETFUN 
            {
              String RESULT =null;
		int elsemleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int elsemright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String elsem = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(elsem.contains("declaracion/")){
                    RESULT = elsem;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSEMETFUN",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ELSEMETFUN ::= telse tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                if(sentencias.contains("declaracion/")){
                    RESULT = sentencias;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSEMETFUN",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ELSEMETFUN ::= telse tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSEMETFUN",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ELSEMETFUN ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSEMETFUN",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SWITCHMETFUN ::= tswitch tparentesisabrir EXP tparentesiscerrar tllaveabrir CASOSMETFUN tllavecerrar 
            {
              String RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String casos = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                if(casos.contains("declaracion/")){
                    RESULT = casos;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHMETFUN",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CASOSMETFUN ::= tcase EXP tdp LSENTENCIASMETFUN CASOSMETFUN 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String casos = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(sentencias.contains("declaracion/") && casos.contains("declaracion/")){
                    RESULT = sentencias + casos;
                }else if(sentencias.contains("declaracion/")){
                    RESULT = sentencias;
                }else if(casos.contains("declaracion/")){
                    RESULT = casos;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASOSMETFUN",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CASOSMETFUN ::= tcase EXP tdp CASOSMETFUN 
            {
              String RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String casos = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(casos.contains("declaracion/")){
                    RESULT = casos;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASOSMETFUN",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CASOSMETFUN ::= tdefault tdp LSENTENCIASMETFUN 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(sentencias.contains("declaracion/")){
                    RESULT = sentencias;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASOSMETFUN",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CASOSMETFUN ::= tdefault tdp 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASOSMETFUN",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASOSMETFUN ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASOSMETFUN",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DOWHILEMETFUN ::= tdo tllaveabrir LSENTENCIASMETFUN tllavecerrar twhile tparentesisabrir EXP tparentesiscerrar tpuntoycoma 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		
                if(sentencias.contains("declaracion/")){
                    RESULT = sentencias;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DOWHILEMETFUN",26, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DOWHILEMETFUN ::= tdo tllaveabrir tllavecerrar twhile tparentesisabrir EXP tparentesiscerrar tpuntoycoma 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DOWHILEMETFUN",26, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // WHILEMETFUN ::= twhile tparentesisabrir EXP tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                if(sentencias.contains("declaracion/")){
                    RESULT = sentencias;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("WHILEMETFUN",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // WHILEMETFUN ::= twhile tparentesisabrir EXP tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("WHILEMETFUN",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FORMETFUN ::= tfor tparentesisabrir FOR tparentesiscerrar tllaveabrir LSENTENCIASMETFUN tllavecerrar 
            {
              String RESULT =null;
		int aumentoforleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int aumentoforright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String aumentofor = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                if(sentencias.contains("declaracion/") && aumentofor.contains("declaracion/")){
                    RESULT = sentencias + aumentofor;
                }else if(sentencias.contains("declaracion/")){
                    RESULT = sentencias;
                }else if(aumentofor.contains("declaracion/")){
                    RESULT = aumentofor;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORMETFUN",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FORMETFUN ::= tfor tparentesisabrir FOR tparentesiscerrar tllaveabrir tllavecerrar 
            {
              String RESULT =null;
		int aumentoforleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int aumentoforright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String aumentofor = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
                if(aumentofor.contains("declaracion/")){
                    RESULT = aumentofor;
                }else{
                    RESULT = "";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORMETFUN",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // FOR ::= TIPO tid tigual EXP tpuntoycoma EXP tpuntoycoma AUMENTO 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		
            RESULT = "declaracion/" + tipo + "-" + id + "\n";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FOR",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FOR ::= tid tigual EXP tpuntoycoma EXP tpuntoycoma AUMENTO 
            {
              String RESULT =null;
		
            RESULT = "";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FOR",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FOR ::= error tpuntoycoma 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FOR",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // AUMENTO ::= tid tmas tmas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUMENTO",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // AUMENTO ::= tid tmenos tmenos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUMENTO",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // AUMENTO ::= tid tmas tigual EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUMENTO",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // AUMENTO ::= tid tmenos tigual EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUMENTO",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // AUMENTO ::= tid tigual EXP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUMENTO",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
