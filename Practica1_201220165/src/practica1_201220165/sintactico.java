
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package practica1_201220165;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return tabla_simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\305\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\007\000" +
    "\002\005\010\000\002\053\004\000\002\053\002\000\002" +
    "\061\003\000\002\061\003\000\002\062\003\000\002\006" +
    "\005\000\002\006\004\000\002\007\005\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\004\000\002\011\003\000\002\012\005\000\002" +
    "\012\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\004\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\005\000\002\054\003\000\002\015\005\000\002" +
    "\016\005\000\002\016\004\000\002\016\003\000\002\017" +
    "\005\000\002\017\007\000\002\020\003\000\002\020\003" +
    "\000\002\021\012\000\002\021\012\000\002\021\010\000" +
    "\002\022\007\000\002\022\010\000\002\022\003\000\002" +
    "\022\004\000\002\023\014\000\002\023\012\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\110\002" +
    "\000\002\024\004\000\002\024\003\000\002\025\004\000" +
    "\002\025\003\000\002\063\004\000\002\063\003\000\002" +
    "\064\004\000\002\064\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\004\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\004\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\010" +
    "\000\002\032\007\000\002\033\007\000\002\033\006\000" +
    "\002\033\004\000\002\034\007\000\002\035\007\000\002" +
    "\035\006\000\002\035\004\000\002\067\007\000\002\071" +
    "\007\000\002\071\006\000\002\071\004\000\002\070\007" +
    "\000\002\072\007\000\002\072\006\000\002\072\004\000" +
    "\002\036\007\000\002\037\007\000\002\073\007\000\002" +
    "\074\007\000\002\040\006\000\002\041\006\000\002\075" +
    "\006\000\002\076\006\000\002\042\013\000\002\107\004" +
    "\000\002\107\003\000\002\043\007\000\002\044\007\000" +
    "\002\077\007\000\002\100\007\000\002\045\010\000\002" +
    "\046\006\000\002\046\005\000\002\046\006\000\002\046" +
    "\005\000\002\055\005\000\002\055\004\000\002\055\002" +
    "\000\002\101\010\000\002\103\006\000\002\103\005\000" +
    "\002\103\006\000\002\103\005\000\002\105\005\000\002" +
    "\105\004\000\002\105\002\000\002\047\010\000\002\050" +
    "\006\000\002\050\005\000\002\050\006\000\002\050\005" +
    "\000\002\056\005\000\002\056\004\000\002\056\002\000" +
    "\002\102\010\000\002\104\006\000\002\104\005\000\002" +
    "\104\006\000\002\104\005\000\002\106\005\000\002\106" +
    "\004\000\002\106\002\000\002\051\004\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\004\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\004\004\004\001\002\000\004\075\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\022\003\023\013\015\014\014\015\016\016\013\041" +
    "\uffbb\043\uffbb\075\021\001\002\000\024\003\023\005\u01a5" +
    "\013\015\014\014\015\016\016\013\041\uffbb\043\uffbb\075" +
    "\021\001\002\000\024\003\ufffe\005\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\041\ufffe\043\ufffe\075\ufffe\001\002\000" +
    "\004\075\u0196\001\002\000\010\041\uffbc\043\uffbc\075\uffec" +
    "\001\002\000\010\041\uffbd\043\uffbd\075\uffee\001\002\000" +
    "\010\041\uffbe\043\uffbe\075\uffef\001\002\000\004\075\uffed" +
    "\001\002\000\024\003\ufffd\005\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\041\ufffd\043\ufffd\075\ufffd\001\002\000\024" +
    "\003\uffc8\005\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\041" +
    "\uffc8\043\uffc8\075\uffc8\001\002\000\006\007\333\010\332" +
    "\001\002\000\024\003\ufffb\005\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\041\ufffb\043\ufffb\075\ufffb\001\002\000\026" +
    "\003\ufffa\005\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\037" +
    "\u018b\041\ufffa\043\ufffa\075\ufffa\001\002\000\024\003\ufffc" +
    "\005\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\041\ufffc\043" +
    "\ufffc\075\ufffc\001\002\000\024\003\uffc9\005\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\041\uffc9\043\uffc9\075\uffc9\001" +
    "\002\000\006\041\027\043\030\001\002\000\006\075\u010c" +
    "\102\u010b\001\002\000\004\075\031\001\002\000\004\037" +
    "\032\001\002\000\012\003\033\011\036\040\035\042\037" +
    "\001\002\000\012\003\033\011\036\040\035\042\037\001" +
    "\002\000\004\006\062\001\002\000\034\003\uffc2\006\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\030\uffc2\045\uffc2\046" +
    "\uffc2\050\uffc2\057\uffc2\062\uffc2\075\uffc2\001\002\000\004" +
    "\042\055\001\002\000\004\075\040\001\002\000\006\003" +
    "\042\006\043\001\002\000\020\003\050\017\047\020\052" +
    "\021\046\022\051\023\044\024\045\001\002\000\020\003" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\001\002\000\020\003\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\001\002\000\066\003\uffe3\005\uffe3" +
    "\007\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\030" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\050\uffe3\052\uffe3\053\uffe3\054\uffe3\057\uffe3\060" +
    "\uffe3\062\uffe3\063\uffe3\064\uffe3\075\uffe3\001\002\000\066" +
    "\003\uffe2\005\uffe2\007\uffe2\011\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\030\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\050\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\057\uffe2\060\uffe2\062\uffe2\063\uffe2\064\uffe2\075\uffe2" +
    "\001\002\000\066\003\uffe5\005\uffe5\007\uffe5\011\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\030\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\050\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\057\uffe5\060\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\075\uffe5\001\002\000\066\003\uffe7\005\uffe7\007" +
    "\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\030\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\050\uffe7\052\uffe7\053\uffe7\054\uffe7\057\uffe7\060\uffe7" +
    "\062\uffe7\063\uffe7\064\uffe7\075\uffe7\001\002\000\066\003" +
    "\uffe1\005\uffe1\007\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\030\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\050\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\057\uffe1\060\uffe1\062\uffe1\063\uffe1\064\uffe1\075\uffe1\001" +
    "\002\000\066\003\uffe4\005\uffe4\007\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\030\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\057\uffe4\060\uffe4\062\uffe4\063\uffe4\064" +
    "\uffe4\075\uffe4\001\002\000\066\003\uffe6\005\uffe6\007\uffe6" +
    "\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\030\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\050\uffe6\052\uffe6\053\uffe6\054\uffe6\057\uffe6\060\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\075\uffe6\001\002\000\012\003\033" +
    "\011\036\040\035\042\037\001\002\000\034\003\uffc4\006" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\030\uffc4\045\uffc4" +
    "\046\uffc4\050\uffc4\057\uffc4\062\uffc4\075\uffc4\001\002\000" +
    "\004\075\056\001\002\000\006\003\042\006\043\001\002" +
    "\000\020\003\050\017\047\020\052\021\046\022\051\023" +
    "\044\024\045\001\002\000\012\003\033\011\036\040\035" +
    "\042\037\001\002\000\034\003\uffc3\006\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\030\uffc3\045\uffc3\046\uffc3\050\uffc3" +
    "\057\uffc3\062\uffc3\075\uffc3\001\002\000\020\003\050\017" +
    "\047\020\052\021\046\022\051\023\044\024\045\001\002" +
    "\000\032\013\077\014\066\015\016\016\101\030\104\045" +
    "\111\046\065\050\105\057\110\062\067\064\073\075\107" +
    "\001\002\000\046\005\uff97\013\uff97\014\uff97\015\uff97\016" +
    "\uff97\030\uff97\045\uff97\046\uff97\050\uff97\052\uff97\053\uff97" +
    "\054\uff97\057\uff97\060\uff97\062\uff97\063\uff97\064\uff97\075" +
    "\uff97\001\002\000\004\075\264\001\002\000\004\075\uffee" +
    "\001\002\000\004\063\370\001\002\000\046\005\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\030\uff9e\045\uff9e\046\uff9e" +
    "\050\uff9e\052\uff9e\053\uff9e\054\uff9e\057\uff9e\060\uff9e\062" +
    "\uff9e\063\uff9e\064\uff9e\075\uff9e\001\002\000\046\005\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\016\uff9a\030\uff9a\045\uff9a\046" +
    "\uff9a\050\uff9a\052\uff9a\053\uff9a\054\uff9a\057\uff9a\060\uff9a" +
    "\062\uff9a\063\uff9a\064\uff9a\075\uff9a\001\002\000\046\005" +
    "\uff98\013\uff98\014\uff98\015\uff98\016\uff98\030\uff98\045\uff98" +
    "\046\uff98\050\uff98\052\uff98\053\uff98\054\uff98\057\uff98\060" +
    "\uff98\062\uff98\063\uff98\064\uff98\075\uff98\001\002\000\024" +
    "\003\125\026\113\030\122\033\115\034\121\037\126\074" +
    "\123\075\116\076\114\001\002\000\046\005\uff96\013\uff96" +
    "\014\uff96\015\uff96\016\uff96\030\uff96\045\uff96\046\uff96\050" +
    "\uff96\052\uff96\053\uff96\054\uff96\057\uff96\060\uff96\062\uff96" +
    "\063\uff96\064\uff96\075\uff96\001\002\000\046\005\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\030\uff9b\045\uff9b\046\uff9b" +
    "\050\uff9b\052\uff9b\053\uff9b\054\uff9b\057\uff9b\060\uff9b\062" +
    "\uff9b\063\uff9b\064\uff9b\075\uff9b\001\002\000\046\005\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\016\uff9f\030\uff9f\045\uff9f\046" +
    "\uff9f\050\uff9f\052\uff9f\053\uff9f\054\uff9f\057\uff9f\060\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\075\uff9f\001\002\000\004\075" +
    "\uffef\001\002\000\046\005\uff9c\013\uff9c\014\uff9c\015\uff9c" +
    "\016\uff9c\030\uff9c\045\uff9c\046\uff9c\050\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\057\uff9c\060\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\075\uff9c\001\002\000\004\075\uffec\001\002\000\004\005" +
    "\365\001\002\000\046\005\uff99\013\uff99\014\uff99\015\uff99" +
    "\016\uff99\030\uff99\045\uff99\046\uff99\050\uff99\052\uff99\053" +
    "\uff99\054\uff99\057\uff99\060\uff99\062\uff99\063\uff99\064\uff99" +
    "\075\uff99\001\002\000\004\031\360\001\002\000\026\003" +
    "\125\026\113\030\122\033\115\034\121\037\126\073\130" +
    "\074\123\075\116\076\114\001\002\000\046\005\uffb7\013" +
    "\077\014\066\015\016\016\101\030\104\045\111\046\065" +
    "\050\105\052\uffb7\053\uffb7\054\uffb7\057\110\060\uffb7\062" +
    "\067\063\uffb7\064\073\075\107\001\002\000\010\007\333" +
    "\010\332\037\310\001\002\000\032\013\077\014\066\015" +
    "\016\016\101\030\104\045\111\046\065\050\105\057\110" +
    "\062\067\064\073\075\107\001\002\000\026\003\125\026" +
    "\113\030\122\033\115\034\121\037\126\073\130\074\123" +
    "\075\116\076\114\001\002\000\046\005\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\030\uff9d\045\uff9d\046\uff9d\050\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\057\uff9d\060\uff9d\062\uff9d\063" +
    "\uff9d\064\uff9d\075\uff9d\001\002\000\024\003\125\026\113" +
    "\030\122\033\115\034\121\037\126\074\123\075\116\076" +
    "\114\001\002\000\120\003\uffd7\005\uffd7\007\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\046\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\057\uffd7\060\uffd7\062\uffd7\063\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072" +
    "\uffd7\075\uffd7\101\uffd7\001\002\000\120\003\uffd5\005\uffd5" +
    "\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\035\uffd5\036\uffd5" +
    "\040\uffd5\041\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\057\uffd5\060\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070" +
    "\uffd5\071\uffd5\072\uffd5\075\uffd5\101\uffd5\001\002\000\124" +
    "\003\uffd6\005\uffd6\007\uffd6\010\307\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\035\uffd6\036\uffd6\037\310\040\uffd6\041\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\057\uffd6\060\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\075\uffd6\101\uffd6\001\002\000\120\003\uffe0\005\uffe0\007" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\035\uffe0\036\uffe0\040" +
    "\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\054\uffe0\057\uffe0\060\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\075\uffe0\101\uffe0\001\002\000\120\003" +
    "\uffd2\005\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\035" +
    "\uffd2\036\uffd2\040\uffd2\041\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\057" +
    "\uffd2\060\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\070\uffd2\071\uffd2\072\uffd2\075\uffd2\101\uffd2\001" +
    "\002\000\120\003\uffd4\005\uffd4\007\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\035\uffd4\036\uffd4\040\uffd4\041\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\057\uffd4\060\uffd4\062\uffd4\063\uffd4\064\uffd4" +
    "\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\075" +
    "\uffd4\101\uffd4\001\002\000\004\031\305\001\002\000\120" +
    "\003\uffd8\005\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\035\uffd8\036\uffd8\040\uffd8\041\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\057\uffd8\060\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\075\uffd8\101\uffd8" +
    "\001\002\000\120\003\uffd3\005\uffd3\007\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\057\uffd3\060\uffd3\062\uffd3\063\uffd3\064" +
    "\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3" +
    "\075\uffd3\101\uffd3\001\002\000\120\003\uffd0\005\uffd0\007" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\035\uffd0\036\uffd0\040" +
    "\uffd0\041\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\057\uffd0\060\uffd0\062" +
    "\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0" +
    "\071\uffd0\072\uffd0\075\uffd0\101\uffd0\001\002\000\024\003" +
    "\125\026\113\030\122\033\115\034\121\037\126\074\123" +
    "\075\116\076\114\001\002\000\112\003\uff3d\005\uff3d\007" +
    "\uff3d\013\uff3d\014\uff3d\015\uff3d\016\uff3d\025\241\026\246" +
    "\027\244\030\uff3d\035\245\036\250\041\uff3d\043\uff3d\044" +
    "\uff3d\045\uff3d\046\uff3d\050\uff3d\051\uff3d\052\uff3d\053\uff3d" +
    "\054\uff3d\057\uff3d\060\uff3d\062\uff3d\063\uff3d\064\uff3d\065" +
    "\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d\075\uff3d" +
    "\101\uff3d\001\002\000\026\003\125\026\113\030\122\033" +
    "\115\034\121\037\126\073\130\074\123\075\116\076\114" +
    "\001\002\000\054\007\160\013\077\014\066\015\016\016" +
    "\101\030\104\044\144\045\163\046\133\050\153\057\161" +
    "\062\134\064\073\065\155\066\152\067\137\070\156\071" +
    "\140\072\146\075\107\101\162\001\002\000\050\005\uff8d" +
    "\013\uff8d\014\uff8d\015\uff8d\016\uff8d\030\uff8d\044\uff8d\045" +
    "\uff8d\046\uff8d\050\uff8d\052\uff8d\053\uff8d\054\uff8d\057\uff8d" +
    "\060\uff8d\062\uff8d\063\uff8d\064\uff8d\075\uff8d\001\002\000" +
    "\004\075\264\001\002\000\004\063\232\001\002\000\050" +
    "\005\uff93\013\uff93\014\uff93\015\uff93\016\uff93\030\uff93\044" +
    "\uff93\045\uff93\046\uff93\050\uff93\052\uff93\053\uff93\054\uff93" +
    "\057\uff93\060\uff93\062\uff93\063\uff93\064\uff93\075\uff93\001" +
    "\002\000\050\005\uff90\013\uff90\014\uff90\015\uff90\016\uff90" +
    "\030\uff90\044\uff90\045\uff90\046\uff90\050\uff90\052\uff90\053" +
    "\uff90\054\uff90\057\uff90\060\uff90\062\uff90\063\uff90\064\uff90" +
    "\075\uff90\001\002\000\026\003\125\026\113\030\122\033" +
    "\115\034\121\037\126\073\130\074\123\075\116\076\114" +
    "\001\002\000\026\003\125\026\113\030\122\033\115\034" +
    "\121\037\126\073\130\074\123\075\116\076\114\001\002" +
    "\000\050\005\uff92\013\uff92\014\uff92\015\uff92\016\uff92\030" +
    "\uff92\044\uff92\045\uff92\046\uff92\050\uff92\052\uff92\053\uff92" +
    "\054\uff92\057\uff92\060\uff92\062\uff92\063\uff92\064\uff92\075" +
    "\uff92\001\002\000\004\005\226\001\002\000\050\005\uff8e" +
    "\013\uff8e\014\uff8e\015\uff8e\016\uff8e\030\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\050\uff8e\052\uff8e\053\uff8e\054\uff8e\057\uff8e" +
    "\060\uff8e\062\uff8e\063\uff8e\064\uff8e\075\uff8e\001\002\000" +
    "\010\003\223\045\224\046\222\001\002\000\050\005\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\030\uff8c\044\uff8c\045" +
    "\uff8c\046\uff8c\050\uff8c\052\uff8c\053\uff8c\054\uff8c\057\uff8c" +
    "\060\uff8c\062\uff8c\063\uff8c\064\uff8c\075\uff8c\001\002\000" +
    "\026\003\125\026\113\030\122\033\115\034\121\037\126" +
    "\073\130\074\123\075\116\076\114\001\002\000\050\005" +
    "\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\030\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\050\uff8f\052\uff8f\053\uff8f\054\uff8f\057" +
    "\uff8f\060\uff8f\062\uff8f\063\uff8f\064\uff8f\075\uff8f\001\002" +
    "\000\050\005\uff95\013\uff95\014\uff95\015\uff95\016\uff95\030" +
    "\uff95\044\uff95\045\uff95\046\uff95\050\uff95\052\uff95\053\uff95" +
    "\054\uff95\057\uff95\060\uff95\062\uff95\063\uff95\064\uff95\075" +
    "\uff95\001\002\000\050\005\uff94\013\uff94\014\uff94\015\uff94" +
    "\016\uff94\030\uff94\044\uff94\045\uff94\046\uff94\050\uff94\052" +
    "\uff94\053\uff94\054\uff94\057\uff94\060\uff94\062\uff94\063\uff94" +
    "\064\uff94\075\uff94\001\002\000\026\003\125\026\113\030" +
    "\122\033\115\034\121\037\126\073\130\074\123\075\116" +
    "\076\114\001\002\000\026\003\125\026\113\030\122\033" +
    "\115\034\121\037\126\073\130\074\123\075\116\076\114" +
    "\001\002\000\050\005\uff91\013\uff91\014\uff91\015\uff91\016" +
    "\uff91\030\uff91\044\uff91\045\uff91\046\uff91\050\uff91\052\uff91" +
    "\053\uff91\054\uff91\057\uff91\060\uff91\062\uff91\063\uff91\064" +
    "\uff91\075\uff91\001\002\000\026\003\125\026\113\030\122" +
    "\033\115\034\121\037\126\073\130\074\123\075\116\076" +
    "\114\001\002\000\026\003\125\026\113\030\122\033\115" +
    "\034\121\037\126\073\130\074\123\075\116\076\114\001" +
    "\002\000\050\005\uffb3\013\077\014\066\015\016\016\101" +
    "\030\104\044\144\045\163\046\133\050\153\052\uffb3\053" +
    "\uffb3\054\uffb3\057\161\060\uffb3\062\134\063\uffb3\064\073" +
    "\075\107\001\002\000\026\003\125\026\113\030\122\033" +
    "\115\034\121\037\126\073\130\074\123\075\116\076\114" +
    "\001\002\000\034\013\077\014\066\015\016\016\101\030" +
    "\104\044\144\045\163\046\133\050\153\057\161\062\134" +
    "\064\073\075\107\001\002\000\026\003\125\026\113\030" +
    "\122\033\115\034\121\037\126\073\130\074\123\075\116" +
    "\076\114\001\002\000\026\003\125\026\113\030\122\033" +
    "\115\034\121\037\126\073\130\074\123\075\116\076\114" +
    "\001\002\000\054\007\160\013\077\014\066\015\016\016" +
    "\101\030\104\044\144\045\163\046\133\050\153\057\161" +
    "\062\134\064\073\065\155\066\152\067\137\070\156\071" +
    "\140\072\146\075\107\101\162\001\002\000\004\005\166" +
    "\001\002\000\004\045\167\001\002\000\050\005\uff73\013" +
    "\uff73\014\uff73\015\uff73\016\uff73\030\uff73\044\uff73\045\uff73" +
    "\046\uff73\050\uff73\052\uff73\053\uff73\054\uff73\057\uff73\060" +
    "\uff73\062\uff73\063\uff73\064\uff73\075\uff73\001\002\000\100" +
    "\003\uff41\005\uff41\007\uff41\013\uff41\014\uff41\015\uff41\016" +
    "\uff41\030\uff41\041\uff41\043\uff41\044\uff41\045\uff41\046\uff41" +
    "\050\uff41\051\uff41\052\uff41\053\uff41\054\uff41\057\uff41\060" +
    "\uff41\062\uff41\063\uff41\064\uff41\065\uff41\066\uff41\067\uff41" +
    "\070\uff41\071\140\072\146\075\uff41\101\uff41\001\002\000" +
    "\004\060\172\001\002\000\004\061\173\001\002\000\026" +
    "\003\125\026\113\030\122\033\115\034\121\037\126\073" +
    "\130\074\123\075\116\076\114\001\002\000\070\005\uff68" +
    "\007\160\013\uff68\014\uff68\015\uff68\016\uff68\030\uff68\044" +
    "\uff68\045\uff68\046\uff68\050\uff68\052\uff68\053\uff68\054\uff68" +
    "\057\uff68\060\uff68\062\uff68\063\uff68\064\uff68\065\155\066" +
    "\152\067\137\070\156\071\140\072\146\075\uff68\101\162" +
    "\001\002\000\100\003\uff42\005\uff42\007\uff42\013\uff42\014" +
    "\uff42\015\uff42\016\uff42\030\uff42\041\uff42\043\uff42\044\uff42" +
    "\045\uff42\046\uff42\050\uff42\051\uff42\052\uff42\053\uff42\054" +
    "\uff42\057\uff42\060\uff42\062\uff42\063\uff42\064\uff42\065\uff42" +
    "\066\uff42\067\uff42\070\uff42\071\140\072\146\075\uff42\101" +
    "\uff42\001\002\000\016\005\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\060\uffb4\063\uffb4\001\002\000\100\003\uff43\005\uff43\007" +
    "\uff43\013\uff43\014\uff43\015\uff43\016\uff43\030\uff43\041\uff43" +
    "\043\uff43\044\uff43\045\uff43\046\uff43\050\uff43\051\uff43\052" +
    "\uff43\053\uff43\054\uff43\057\uff43\060\uff43\062\uff43\063\uff43" +
    "\064\uff43\065\uff43\066\uff43\067\uff43\070\uff43\071\140\072" +
    "\146\075\uff43\101\uff43\001\002\000\100\003\uff46\005\uff46" +
    "\007\uff46\013\uff46\014\uff46\015\uff46\016\uff46\030\uff46\041" +
    "\uff46\043\uff46\044\uff46\045\uff46\046\uff46\050\uff46\051\uff46" +
    "\052\uff46\053\uff46\054\uff46\057\uff46\060\uff46\062\uff46\063" +
    "\uff46\064\uff46\065\uff46\066\uff46\067\uff46\070\uff46\071\140" +
    "\072\146\075\uff46\101\uff46\001\002\000\024\007\160\051" +
    "\202\065\155\066\152\067\137\070\156\071\140\072\146" +
    "\101\162\001\002\000\034\013\077\014\066\015\016\016" +
    "\101\030\104\044\144\045\163\046\133\050\153\057\161" +
    "\062\134\064\073\075\107\001\002\000\010\005\206\052" +
    "\205\053\204\001\002\000\034\013\077\014\066\015\016" +
    "\016\101\030\104\044\144\045\163\046\133\050\153\057" +
    "\161\062\134\064\073\075\107\001\002\000\026\003\125" +
    "\026\113\030\122\033\115\034\121\037\126\073\130\074" +
    "\123\075\116\076\114\001\002\000\004\050\210\001\002" +
    "\000\050\005\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\030" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\050\uff7a\052\uff7a\053\uff7a" +
    "\054\uff7a\057\uff7a\060\uff7a\062\uff7a\063\uff7a\064\uff7a\075" +
    "\uff7a\001\002\000\050\005\uff77\013\uff77\014\uff77\015\uff77" +
    "\016\uff77\030\uff77\044\uff77\045\uff77\046\uff77\050\uff77\052" +
    "\uff77\053\uff77\054\uff77\057\uff77\060\uff77\062\uff77\063\uff77" +
    "\064\uff77\075\uff77\001\002\000\024\007\160\051\212\065" +
    "\155\066\152\067\137\070\156\071\140\072\146\101\162" +
    "\001\002\000\034\013\077\014\066\015\016\016\101\030" +
    "\104\044\144\045\163\046\133\050\153\057\161\062\134" +
    "\064\073\075\107\001\002\000\010\005\206\052\205\053" +
    "\204\001\002\000\050\005\uff79\013\uff79\014\uff79\015\uff79" +
    "\016\uff79\030\uff79\044\uff79\045\uff79\046\uff79\050\uff79\052" +
    "\uff79\053\uff79\054\uff79\057\uff79\060\uff79\062\uff79\063\uff79" +
    "\064\uff79\075\uff79\001\002\000\004\005\216\001\002\000" +
    "\004\050\217\001\002\000\050\005\uff78\013\uff78\014\uff78" +
    "\015\uff78\016\uff78\030\uff78\044\uff78\045\uff78\046\uff78\050" +
    "\uff78\052\uff78\053\uff78\054\uff78\057\uff78\060\uff78\062\uff78" +
    "\063\uff78\064\uff78\075\uff78\001\002\000\100\003\uff45\005" +
    "\uff45\007\uff45\013\uff45\014\uff45\015\uff45\016\uff45\030\uff45" +
    "\041\uff45\043\uff45\044\uff45\045\uff45\046\uff45\050\uff45\051" +
    "\uff45\052\uff45\053\uff45\054\uff45\057\uff45\060\uff45\062\uff45" +
    "\063\uff45\064\uff45\065\uff45\066\uff45\067\uff45\070\uff45\071" +
    "\140\072\146\075\uff45\101\uff45\001\002\000\100\003\uff3f" +
    "\005\uff3f\007\uff3f\013\uff3f\014\uff3f\015\uff3f\016\uff3f\030" +
    "\uff3f\041\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f\050\uff3f" +
    "\051\uff3f\052\uff3f\053\uff3f\054\uff3f\057\uff3f\060\uff3f\062" +
    "\uff3f\063\uff3f\064\uff3f\065\uff3f\066\uff3f\067\uff3f\070\uff3f" +
    "\071\uff3f\072\uff3f\075\uff3f\101\uff3f\001\002\000\050\005" +
    "\uff89\013\uff89\014\uff89\015\uff89\016\uff89\030\uff89\044\uff89" +
    "\045\uff89\046\uff89\050\uff89\052\uff89\053\uff89\054\uff89\057" +
    "\uff89\060\uff89\062\uff89\063\uff89\064\uff89\075\uff89\001\002" +
    "\000\050\005\uff88\013\uff88\014\uff88\015\uff88\016\uff88\030" +
    "\uff88\044\uff88\045\uff88\046\uff88\050\uff88\052\uff88\053\uff88" +
    "\054\uff88\057\uff88\060\uff88\062\uff88\063\uff88\064\uff88\075" +
    "\uff88\001\002\000\050\005\uff8a\013\uff8a\014\uff8a\015\uff8a" +
    "\016\uff8a\030\uff8a\044\uff8a\045\uff8a\046\uff8a\050\uff8a\052" +
    "\uff8a\053\uff8a\054\uff8a\057\uff8a\060\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\075\uff8a\001\002\000\050\005\uff8b\013\uff8b\014" +
    "\uff8b\015\uff8b\016\uff8b\030\uff8b\044\uff8b\045\uff8b\046\uff8b" +
    "\050\uff8b\052\uff8b\053\uff8b\054\uff8b\057\uff8b\060\uff8b\062" +
    "\uff8b\063\uff8b\064\uff8b\075\uff8b\001\002\000\004\045\227" +
    "\001\002\000\046\005\uff75\013\uff75\014\uff75\015\uff75\016" +
    "\uff75\030\uff75\045\uff75\046\uff75\050\uff75\052\uff75\053\uff75" +
    "\054\uff75\057\uff75\060\uff75\062\uff75\063\uff75\064\uff75\075" +
    "\uff75\001\002\000\100\003\uff40\005\uff40\007\uff40\013\uff40" +
    "\014\uff40\015\uff40\016\uff40\030\uff40\041\uff40\043\uff40\044" +
    "\uff40\045\uff40\046\uff40\050\uff40\051\uff40\052\uff40\053\uff40" +
    "\054\uff40\057\uff40\060\uff40\062\uff40\063\uff40\064\uff40\065" +
    "\uff40\066\uff40\067\uff40\070\uff40\071\uff40\072\uff40\075\uff40" +
    "\101\uff40\001\002\000\100\003\uff44\005\uff44\007\uff44\013" +
    "\uff44\014\uff44\015\uff44\016\uff44\030\uff44\041\uff44\043\uff44" +
    "\044\uff44\045\uff44\046\uff44\050\uff44\051\uff44\052\uff44\053" +
    "\uff44\054\uff44\057\uff44\060\uff44\062\uff44\063\uff44\064\uff44" +
    "\065\uff44\066\uff44\067\uff44\070\uff44\071\140\072\146\075" +
    "\uff44\101\uff44\001\002\000\004\075\233\001\002\000\004" +
    "\063\234\001\002\000\024\003\125\026\113\030\122\033" +
    "\115\034\121\037\126\074\123\075\116\076\114\001\002" +
    "\000\004\005\236\001\002\000\004\062\237\001\002\000" +
    "\050\005\uff4f\013\uff4f\014\uff4f\015\uff4f\016\uff4f\030\uff4f" +
    "\044\uff4f\045\uff4f\046\uff4f\050\uff4f\052\uff4f\053\uff4f\054" +
    "\uff4f\057\uff4f\060\uff4f\062\uff4f\063\uff4f\064\uff4f\075\uff4f" +
    "\001\002\000\052\005\uff48\013\077\014\066\015\016\016" +
    "\101\025\241\026\246\027\244\030\104\035\245\036\250" +
    "\044\144\045\163\046\133\050\153\057\161\062\134\063" +
    "\251\064\073\075\107\001\002\000\024\003\125\026\113" +
    "\030\122\033\115\034\121\037\126\074\123\075\116\076" +
    "\114\001\002\000\004\005\uff4b\001\002\000\006\005\uff48" +
    "\063\251\001\002\000\024\003\125\026\113\030\122\033" +
    "\115\034\121\037\126\074\123\075\116\076\114\001\002" +
    "\000\024\003\125\026\113\030\122\033\115\034\121\037" +
    "\126\074\123\075\116\076\114\001\002\000\024\003\125" +
    "\026\113\030\122\033\115\034\121\037\126\074\123\075" +
    "\116\076\114\001\002\000\004\005\uff4d\001\002\000\024" +
    "\003\125\026\113\030\122\033\115\034\121\037\126\074" +
    "\123\075\116\076\114\001\002\000\026\003\125\026\113" +
    "\030\122\033\115\034\121\037\126\053\252\074\123\075" +
    "\116\076\114\001\002\000\036\005\uff49\013\077\014\066" +
    "\015\016\016\101\030\104\044\144\045\163\046\133\050" +
    "\153\057\161\062\134\064\073\075\107\001\002\000\004" +
    "\005\uff4a\001\002\000\120\003\uffdb\005\uffdb\007\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\025\uffdb" +
    "\026\uffdb\027\244\030\uffdb\035\uffdb\036\uffdb\040\uffdb\041" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\057\uffdb\060\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb" +
    "\072\uffdb\075\uffdb\101\uffdb\001\002\000\120\003\uffdd\005" +
    "\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\025\uffdd\026\uffdd\027\244\030\uffdd\035\245\036" +
    "\250\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\057\uffdd\060" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\070\uffdd\071\uffdd\072\uffdd\075\uffdd\101\uffdd\001\002\000" +
    "\120\003\uffdc\005\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\025\uffdc\026\uffdc\027\244\030" +
    "\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\075\uffdc\101" +
    "\uffdc\001\002\000\120\003\uffdf\005\uffdf\007\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\035\uffdf\036\uffdf\040\uffdf\041\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\046\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072" +
    "\uffdf\075\uffdf\101\uffdf\001\002\000\004\005\uff4c\001\002" +
    "\000\004\005\uff4e\001\002\000\120\003\uffde\005\uffde\007" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\025\uffde\026\uffde\027\244\030\uffde\035\245\036\250\040" +
    "\uffde\041\uffde\043\uffde\044\uffde\045\uffde\046\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\057\uffde\060\uffde\062" +
    "\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde" +
    "\071\uffde\072\uffde\075\uffde\101\uffde\001\002\000\034\013" +
    "\077\014\066\015\016\016\101\030\104\044\144\045\163" +
    "\046\133\050\153\057\161\062\134\064\073\075\107\001" +
    "\002\000\004\006\265\001\002\000\004\022\266\001\002" +
    "\000\004\007\267\001\002\000\006\026\271\074\272\001" +
    "\002\000\004\055\274\001\002\000\004\074\273\001\002" +
    "\000\040\013\uff6c\014\uff6c\015\uff6c\016\uff6c\030\uff6c\044" +
    "\uff6c\045\uff6c\046\uff6c\050\uff6c\055\uff6c\056\uff6c\057\uff6c" +
    "\062\uff6c\064\uff6c\075\uff6c\001\002\000\040\013\uff6d\014" +
    "\uff6d\015\uff6d\016\uff6d\030\uff6d\044\uff6d\045\uff6d\046\uff6d" +
    "\050\uff6d\055\uff6d\056\uff6d\057\uff6d\062\uff6d\064\uff6d\075" +
    "\uff6d\001\002\000\006\026\271\074\272\001\002\000\004" +
    "\056\276\001\002\000\006\026\271\074\272\001\002\000" +
    "\034\013\uff6e\014\uff6e\015\uff6e\016\uff6e\030\uff6e\044\uff6e" +
    "\045\uff6e\046\uff6e\050\uff6e\057\uff6e\062\uff6e\064\uff6e\075" +
    "\uff6e\001\002\000\004\054\301\001\002\000\050\005\uff6f" +
    "\013\uff6f\014\uff6f\015\uff6f\016\uff6f\030\uff6f\044\uff6f\045" +
    "\uff6f\046\uff6f\050\uff6f\052\uff6f\053\uff6f\054\uff6f\057\uff6f" +
    "\060\uff6f\062\uff6f\063\uff6f\064\uff6f\075\uff6f\001\002\000" +
    "\100\003\uff3e\005\uff3e\007\uff3e\013\uff3e\014\uff3e\015\uff3e" +
    "\016\uff3e\030\uff3e\041\uff3e\043\uff3e\044\uff3e\045\uff3e\046" +
    "\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e\057\uff3e" +
    "\060\uff3e\062\uff3e\063\uff3e\064\uff3e\065\uff3e\066\uff3e\067" +
    "\uff3e\070\uff3e\071\uff3e\072\uff3e\075\uff3e\101\uff3e\001\002" +
    "\000\016\025\241\026\246\027\244\035\245\036\250\040" +
    "\304\001\002\000\120\003\uffda\005\uffda\007\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\035\uffda\036\uffda\040\uffda\041\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\050\uffda\051\uffda\052" +
    "\uffda\053\uffda\054\uffda\057\uffda\060\uffda\062\uffda\063\uffda" +
    "\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072" +
    "\uffda\075\uffda\101\uffda\001\002\000\004\032\306\001\002" +
    "\000\120\003\uffd1\005\uffd1\007\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\057\uffd1\060\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\075\uffd1" +
    "\101\uffd1\001\002\000\024\003\ufff3\026\ufff3\030\ufff3\033" +
    "\ufff3\034\ufff3\037\ufff3\074\ufff3\075\ufff3\076\ufff3\001\002" +
    "\000\026\003\125\026\113\030\122\033\115\034\121\037" +
    "\126\040\317\074\123\075\116\076\114\001\002\000\024" +
    "\003\125\026\113\030\122\033\115\034\121\037\126\074" +
    "\123\075\116\076\114\001\002\000\120\003\ufff0\005\ufff0" +
    "\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\035\ufff0\036\ufff0" +
    "\040\ufff0\041\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\057\ufff0\060\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070" +
    "\ufff0\071\ufff0\072\ufff0\075\ufff0\101\ufff0\001\002\000\020" +
    "\011\314\012\315\025\241\026\246\027\244\035\245\036" +
    "\250\001\002\000\024\003\125\026\113\030\122\033\115" +
    "\034\121\037\126\074\123\075\116\076\114\001\002\000" +
    "\122\003\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\035\ufff1\036\ufff1\040\ufff1\041\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\057\ufff1\060\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\075" +
    "\ufff1\101\ufff1\001\002\000\122\003\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\035\ufff2\036\ufff2" +
    "\040\ufff2\041\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\050" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\057\ufff2\060\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070" +
    "\ufff2\071\ufff2\072\ufff2\075\ufff2\101\ufff2\001\002\000\120" +
    "\003\uffcc\005\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\035\uffcc\036\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\057\uffcc\060\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066" +
    "\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\075\uffcc\101\uffcc" +
    "\001\002\000\120\003\uffcf\005\uffcf\007\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\053\uffcf\054\uffcf\057\uffcf\060\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf" +
    "\075\uffcf\101\uffcf\001\002\000\020\011\323\025\241\026" +
    "\246\027\244\035\245\036\250\040\322\001\002\000\120" +
    "\003\uffcd\005\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\035\uffcd\036\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\057\uffcd\060\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\075\uffcd\101\uffcd" +
    "\001\002\000\026\003\125\026\113\030\122\033\115\034" +
    "\121\037\126\040\317\074\123\075\116\076\114\001\002" +
    "\000\120\003\uffce\005\uffce\007\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\035\uffce\036\uffce\040\uffce\041\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\050\uffce\051\uffce\052\uffce\053\uffce" +
    "\054\uffce\057\uffce\060\uffce\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\075\uffce" +
    "\101\uffce\001\002\000\120\003\uffd9\005\uffd9\007\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\025\uffd9" +
    "\026\uffd9\027\244\030\uffd9\035\245\036\250\040\uffd9\041" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\057\uffd9\060\uffd9\062\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\075\uffd9\101\uffd9\001\002\000\004\060\327\001" +
    "\002\000\004\061\330\001\002\000\026\003\125\026\113" +
    "\030\122\033\115\034\121\037\126\073\130\074\123\075" +
    "\116\076\114\001\002\000\066\005\uff6a\007\160\013\uff6a" +
    "\014\uff6a\015\uff6a\016\uff6a\030\uff6a\045\uff6a\046\uff6a\050" +
    "\uff6a\052\uff6a\053\uff6a\054\uff6a\057\uff6a\060\uff6a\062\uff6a" +
    "\063\uff6a\064\uff6a\065\155\066\152\067\137\070\156\071" +
    "\140\072\146\075\uff6a\101\162\001\002\000\024\003\125" +
    "\026\113\030\122\033\115\034\121\037\126\074\123\075" +
    "\116\076\114\001\002\000\024\003\125\026\113\030\122" +
    "\033\115\034\121\037\126\074\123\075\116\076\114\001" +
    "\002\000\070\003\uffcb\005\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\025\241\026\246\027\244\030\uffcb\035\245\036" +
    "\250\041\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\050\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\057\uffcb\060\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\075\uffcb\001\002\000\004\007\336\001\002" +
    "\000\024\003\125\026\113\030\122\033\115\034\121\037" +
    "\126\074\123\075\116\076\114\001\002\000\070\003\uffca" +
    "\005\uffca\013\uffca\014\uffca\015\uffca\016\uffca\025\241\026" +
    "\246\027\244\030\uffca\035\245\036\250\041\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\050\uffca\052\uffca\053\uffca\054" +
    "\uffca\057\uffca\060\uffca\062\uffca\063\uffca\064\uffca\075\uffca" +
    "\001\002\000\016\005\uffb8\052\uffb8\053\uffb8\054\uffb8\060" +
    "\uffb8\063\uffb8\001\002\000\024\007\160\051\342\065\155" +
    "\066\152\067\137\070\156\071\140\072\146\101\162\001" +
    "\002\000\032\013\077\014\066\015\016\016\101\030\104" +
    "\045\111\046\065\050\105\057\110\062\067\064\073\075" +
    "\107\001\002\000\010\005\346\052\345\053\344\001\002" +
    "\000\032\013\077\014\066\015\016\016\101\030\104\045" +
    "\111\046\065\050\105\057\110\062\067\064\073\075\107" +
    "\001\002\000\026\003\125\026\113\030\122\033\115\034" +
    "\121\037\126\073\130\074\123\075\116\076\114\001\002" +
    "\000\004\050\350\001\002\000\046\005\uff82\013\uff82\014" +
    "\uff82\015\uff82\016\uff82\030\uff82\045\uff82\046\uff82\050\uff82" +
    "\052\uff82\053\uff82\054\uff82\057\uff82\060\uff82\062\uff82\063" +
    "\uff82\064\uff82\075\uff82\001\002\000\046\005\uff7f\013\uff7f" +
    "\014\uff7f\015\uff7f\016\uff7f\030\uff7f\045\uff7f\046\uff7f\050" +
    "\uff7f\052\uff7f\053\uff7f\054\uff7f\057\uff7f\060\uff7f\062\uff7f" +
    "\063\uff7f\064\uff7f\075\uff7f\001\002\000\024\007\160\051" +
    "\352\065\155\066\152\067\137\070\156\071\140\072\146" +
    "\101\162\001\002\000\032\013\077\014\066\015\016\016" +
    "\101\030\104\045\111\046\065\050\105\057\110\062\067" +
    "\064\073\075\107\001\002\000\010\005\346\052\345\053" +
    "\344\001\002\000\046\005\uff81\013\uff81\014\uff81\015\uff81" +
    "\016\uff81\030\uff81\045\uff81\046\uff81\050\uff81\052\uff81\053" +
    "\uff81\054\uff81\057\uff81\060\uff81\062\uff81\063\uff81\064\uff81" +
    "\075\uff81\001\002\000\004\005\356\001\002\000\004\050" +
    "\357\001\002\000\046\005\uff80\013\uff80\014\uff80\015\uff80" +
    "\016\uff80\030\uff80\045\uff80\046\uff80\050\uff80\052\uff80\053" +
    "\uff80\054\uff80\057\uff80\060\uff80\062\uff80\063\uff80\064\uff80" +
    "\075\uff80\001\002\000\004\047\361\001\002\000\004\037" +
    "\362\001\002\000\024\003\125\026\113\030\122\033\115" +
    "\034\121\037\126\074\123\075\116\076\114\001\002\000" +
    "\016\025\241\026\246\027\244\035\245\036\250\040\364" +
    "\001\002\000\050\005\uff87\013\uff87\014\uff87\015\uff87\016" +
    "\uff87\030\uff87\044\uff87\045\uff87\046\uff87\050\uff87\052\uff87" +
    "\053\uff87\054\uff87\057\uff87\060\uff87\062\uff87\063\uff87\064" +
    "\uff87\075\uff87\001\002\000\004\043\366\001\002\000\024" +
    "\003\uffc0\005\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\041" +
    "\uffc0\043\uffc0\075\uffc0\001\002\000\062\005\uff47\013\uff47" +
    "\014\uff47\015\uff47\016\uff47\025\241\026\246\027\244\030" +
    "\uff47\035\245\036\250\044\uff47\045\uff47\046\uff47\050\uff47" +
    "\052\uff47\053\uff47\054\uff47\057\uff47\060\uff47\062\uff47\063" +
    "\uff47\064\uff47\075\uff47\001\002\000\004\075\371\001\002" +
    "\000\004\063\372\001\002\000\024\003\125\026\113\030" +
    "\122\033\115\034\121\037\126\074\123\075\116\076\114" +
    "\001\002\000\004\005\374\001\002\000\004\062\375\001" +
    "\002\000\046\005\uff57\013\uff57\014\uff57\015\uff57\016\uff57" +
    "\030\uff57\045\uff57\046\uff57\050\uff57\052\uff57\053\uff57\054" +
    "\uff57\057\uff57\060\uff57\062\uff57\063\uff57\064\uff57\075\uff57" +
    "\001\002\000\050\005\uff50\013\077\014\066\015\016\016" +
    "\101\025\241\026\246\027\244\030\104\035\245\036\250" +
    "\045\111\046\065\050\105\057\110\062\067\063\u0102\064" +
    "\073\075\107\001\002\000\004\005\uff53\001\002\000\006" +
    "\005\uff50\063\u0102\001\002\000\004\005\uff55\001\002\000" +
    "\026\003\125\026\113\030\122\033\115\034\121\037\126" +
    "\053\u0103\074\123\075\116\076\114\001\002\000\034\005" +
    "\uff51\013\077\014\066\015\016\016\101\030\104\045\111" +
    "\046\065\050\105\057\110\062\067\064\073\075\107\001" +
    "\002\000\004\005\uff52\001\002\000\004\005\uff54\001\002" +
    "\000\004\005\uff56\001\002\000\032\013\077\014\066\015" +
    "\016\016\101\030\104\045\111\046\065\050\105\057\110" +
    "\062\067\064\073\075\107\001\002\000\004\054\u0109\001" +
    "\002\000\046\005\uff71\013\uff71\014\uff71\015\uff71\016\uff71" +
    "\030\uff71\045\uff71\046\uff71\050\uff71\052\uff71\053\uff71\054" +
    "\uff71\057\uff71\060\uff71\062\uff71\063\uff71\064\uff71\075\uff71" +
    "\001\002\000\034\003\uffc1\006\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\030\uffc1\045\uffc1\046\uffc1\050\uffc1\057\uffc1" +
    "\062\uffc1\075\uffc1\001\002\000\004\037\u0186\001\002\000" +
    "\004\037\u010d\001\002\000\012\003\033\011\036\040\035" +
    "\042\037\001\002\000\030\013\077\014\066\015\016\016" +
    "\101\030\104\045\u011d\046\u010f\050\u011a\057\u011c\062\u0111" +
    "\075\107\001\002\000\004\075\264\001\002\000\044\005" +
    "\uffab\013\uffab\014\uffab\015\uffab\016\uffab\030\uffab\045\uffab" +
    "\046\uffab\050\uffab\052\uffab\053\uffab\054\uffab\057\uffab\060" +
    "\uffab\062\uffab\063\uffab\075\uffab\001\002\000\004\063\u0174" +
    "\001\002\000\044\005\uffad\013\uffad\014\uffad\015\uffad\016" +
    "\uffad\030\uffad\045\uffad\046\uffad\050\uffad\052\uffad\053\uffad" +
    "\054\uffad\057\uffad\060\uffad\062\uffad\063\uffad\075\uffad\001" +
    "\002\000\044\005\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\030\uffaa\045\uffaa\046\uffaa\050\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\057\uffaa\060\uffaa\062\uffaa\063\uffaa\075\uffaa\001\002" +
    "\000\004\005\u0172\001\002\000\044\005\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\030\uffb0\045\uffb0\046\uffb0\050\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\057\uffb0\060\uffb0\062\uffb0\063" +
    "\uffb0\075\uffb0\001\002\000\044\005\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\030\uffac\045\uffac\046\uffac\050\uffac\052" +
    "\uffac\053\uffac\054\uffac\057\uffac\060\uffac\062\uffac\063\uffac" +
    "\075\uffac\001\002\000\044\005\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\016\uffb2\030\uffb2\045\uffb2\046\uffb2\050\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\057\uffb2\060\uffb2\062\uffb2\063\uffb2\075" +
    "\uffb2\001\002\000\044\005\uffb9\013\077\014\066\015\016" +
    "\016\101\030\104\045\u011d\046\u010f\050\u011a\052\uffb9\053" +
    "\uffb9\054\uffb9\057\u011c\060\uffb9\062\u0111\063\uffb9\075\107" +
    "\001\002\000\044\005\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\030\uffae\045\uffae\046\uffae\050\uffae\052\uffae\053\uffae" +
    "\054\uffae\057\uffae\060\uffae\062\uffae\063\uffae\075\uffae\001" +
    "\002\000\026\003\125\026\113\030\122\033\115\034\121" +
    "\037\126\073\130\074\123\075\116\076\114\001\002\000" +
    "\044\005\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\030\uffb1" +
    "\045\uffb1\046\uffb1\050\uffb1\052\uffb1\053\uffb1\054\uffb1\057" +
    "\uffb1\060\uffb1\062\uffb1\063\uffb1\075\uffb1\001\002\000\030" +
    "\013\077\014\066\015\016\016\101\030\104\045\u011d\046" +
    "\u010f\050\u011a\057\u011c\062\u0111\075\107\001\002\000\026" +
    "\003\125\026\113\030\122\033\115\034\121\037\126\073" +
    "\130\074\123\075\116\076\114\001\002\000\044\005\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\016\uffaf\030\uffaf\045\uffaf\046" +
    "\uffaf\050\uffaf\052\uffaf\053\uffaf\054\uffaf\057\uffaf\060\uffaf" +
    "\062\uffaf\063\uffaf\075\uffaf\001\002\000\052\007\160\013" +
    "\077\014\066\015\016\016\101\030\104\044\u0127\045\u0130" +
    "\046\u0122\050\u012e\057\u012f\062\u0125\065\155\066\152\067" +
    "\137\070\156\071\140\072\146\075\107\101\162\001\002" +
    "\000\046\005\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\030" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\057\uffa7\060\uffa7\062\uffa7\063\uffa7\075\uffa7\001" +
    "\002\000\046\005\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2" +
    "\030\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2\052\uffa2\053" +
    "\uffa2\054\uffa2\057\uffa2\060\uffa2\062\uffa2\063\uffa2\075\uffa2" +
    "\001\002\000\004\075\264\001\002\000\046\005\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\030\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\050\uffa6\052\uffa6\053\uffa6\054\uffa6\057\uffa6\060" +
    "\uffa6\062\uffa6\063\uffa6\075\uffa6\001\002\000\004\005\u0159" +
    "\001\002\000\004\063\u014a\001\002\000\046\005\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\030\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\050\uffa4\052\uffa4\053\uffa4\054\uffa4\057\uffa4\060" +
    "\uffa4\062\uffa4\063\uffa4\075\uffa4\001\002\000\010\003\223" +
    "\045\224\046\222\001\002\000\046\005\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\016\uffa1\030\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\050\uffa1\052\uffa1\053\uffa1\054\uffa1\057\uffa1\060\uffa1\062" +
    "\uffa1\063\uffa1\075\uffa1\001\002\000\046\005\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\030\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\050\uffa8\052\uffa8\053\uffa8\054\uffa8\057\uffa8\060\uffa8" +
    "\062\uffa8\063\uffa8\075\uffa8\001\002\000\046\005\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\030\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\050\uffa9\052\uffa9\053\uffa9\054\uffa9\057\uffa9\060" +
    "\uffa9\062\uffa9\063\uffa9\075\uffa9\001\002\000\046\005\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\016\uffa3\030\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\050\uffa3\052\uffa3\053\uffa3\054\uffa3\057\uffa3" +
    "\060\uffa3\062\uffa3\063\uffa3\075\uffa3\001\002\000\046\005" +
    "\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\030\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\050\uffa5\052\uffa5\053\uffa5\054\uffa5\057" +
    "\uffa5\060\uffa5\062\uffa5\063\uffa5\075\uffa5\001\002\000\046" +
    "\005\uffb5\013\077\014\066\015\016\016\101\030\104\044" +
    "\u0127\045\u0130\046\u0122\050\u012e\052\uffb5\053\uffb5\054\uffb5" +
    "\057\u012f\060\uffb5\062\u0125\063\uffb5\075\107\001\002\000" +
    "\026\003\125\026\113\030\122\033\115\034\121\037\126" +
    "\073\130\074\123\075\116\076\114\001\002\000\032\013" +
    "\077\014\066\015\016\016\101\030\104\044\u0127\045\u0130" +
    "\046\u0122\050\u012e\057\u012f\062\u0125\075\107\001\002\000" +
    "\026\003\125\026\113\030\122\033\115\034\121\037\126" +
    "\073\130\074\123\075\116\076\114\001\002\000\052\007" +
    "\160\013\077\014\066\015\016\016\101\030\104\044\u0127" +
    "\045\u0130\046\u0122\050\u012e\057\u012f\062\u0125\065\155\066" +
    "\152\067\137\070\156\071\140\072\146\075\107\101\162" +
    "\001\002\000\004\005\u0133\001\002\000\004\045\u0134\001" +
    "\002\000\046\005\uff74\013\uff74\014\uff74\015\uff74\016\uff74" +
    "\030\uff74\044\uff74\045\uff74\046\uff74\050\uff74\052\uff74\053" +
    "\uff74\054\uff74\057\uff74\060\uff74\062\uff74\063\uff74\075\uff74" +
    "\001\002\000\004\060\u0136\001\002\000\004\061\u0137\001" +
    "\002\000\026\003\125\026\113\030\122\033\115\034\121" +
    "\037\126\073\130\074\123\075\116\076\114\001\002\000" +
    "\066\005\uff69\007\160\013\uff69\014\uff69\015\uff69\016\uff69" +
    "\030\uff69\044\uff69\045\uff69\046\uff69\050\uff69\052\uff69\053" +
    "\uff69\054\uff69\057\uff69\060\uff69\062\uff69\063\uff69\065\155" +
    "\066\152\067\137\070\156\071\140\072\146\075\uff69\101" +
    "\162\001\002\000\024\007\160\051\u013a\065\155\066\152" +
    "\067\137\070\156\071\140\072\146\101\162\001\002\000" +
    "\032\013\077\014\066\015\016\016\101\030\104\044\u0127" +
    "\045\u0130\046\u0122\050\u012e\057\u012f\062\u0125\075\107\001" +
    "\002\000\010\005\u013e\052\u013d\053\u013c\001\002\000\032" +
    "\013\077\014\066\015\016\016\101\030\104\044\u0127\045" +
    "\u0130\046\u0122\050\u012e\057\u012f\062\u0125\075\107\001\002" +
    "\000\026\003\125\026\113\030\122\033\115\034\121\037" +
    "\126\073\130\074\123\075\116\076\114\001\002\000\004" +
    "\050\u0140\001\002\000\046\005\uff7e\013\uff7e\014\uff7e\015" +
    "\uff7e\016\uff7e\030\uff7e\044\uff7e\045\uff7e\046\uff7e\050\uff7e" +
    "\052\uff7e\053\uff7e\054\uff7e\057\uff7e\060\uff7e\062\uff7e\063" +
    "\uff7e\075\uff7e\001\002\000\046\005\uff7b\013\uff7b\014\uff7b" +
    "\015\uff7b\016\uff7b\030\uff7b\044\uff7b\045\uff7b\046\uff7b\050" +
    "\uff7b\052\uff7b\053\uff7b\054\uff7b\057\uff7b\060\uff7b\062\uff7b" +
    "\063\uff7b\075\uff7b\001\002\000\024\007\160\051\u0142\065" +
    "\155\066\152\067\137\070\156\071\140\072\146\101\162" +
    "\001\002\000\032\013\077\014\066\015\016\016\101\030" +
    "\104\044\u0127\045\u0130\046\u0122\050\u012e\057\u012f\062\u0125" +
    "\075\107\001\002\000\010\005\u013e\052\u013d\053\u013c\001" +
    "\002\000\046\005\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d" +
    "\030\uff7d\044\uff7d\045\uff7d\046\uff7d\050\uff7d\052\uff7d\053" +
    "\uff7d\054\uff7d\057\uff7d\060\uff7d\062\uff7d\063\uff7d\075\uff7d" +
    "\001\002\000\004\005\u0146\001\002\000\004\050\u0147\001" +
    "\002\000\046\005\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c" +
    "\030\uff7c\044\uff7c\045\uff7c\046\uff7c\050\uff7c\052\uff7c\053" +
    "\uff7c\054\uff7c\057\uff7c\060\uff7c\062\uff7c\063\uff7c\075\uff7c" +
    "\001\002\000\016\005\uffb6\052\uffb6\053\uffb6\054\uffb6\060" +
    "\uffb6\063\uffb6\001\002\000\046\005\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\030\uffa0\044\uffa0\045\uffa0\046\uffa0\050" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\057\uffa0\060\uffa0\062\uffa0" +
    "\063\uffa0\075\uffa0\001\002\000\004\075\u014b\001\002\000" +
    "\004\063\u014d\001\002\000\004\005\u0157\001\002\000\024" +
    "\003\125\026\113\030\122\033\115\034\121\037\126\074" +
    "\123\075\116\076\114\001\002\000\050\005\uff58\013\077" +
    "\014\066\015\016\016\101\025\241\026\246\027\244\030" +
    "\104\035\245\036\250\044\u0127\045\u0130\046\u0122\050\u012e" +
    "\057\u012f\062\u0125\063\u0152\075\107\001\002\000\004\005" +
    "\uff5b\001\002\000\006\005\uff58\063\u0152\001\002\000\004" +
    "\005\uff5d\001\002\000\026\003\125\026\113\030\122\033" +
    "\115\034\121\037\126\053\u0153\074\123\075\116\076\114" +
    "\001\002\000\034\005\uff59\013\077\014\066\015\016\016" +
    "\101\030\104\044\u0127\045\u0130\046\u0122\050\u012e\057\u012f" +
    "\062\u0125\075\107\001\002\000\004\005\uff5a\001\002\000" +
    "\004\005\uff5e\001\002\000\004\005\uff5c\001\002\000\004" +
    "\062\u0158\001\002\000\046\005\uff5f\013\uff5f\014\uff5f\015" +
    "\uff5f\016\uff5f\030\uff5f\044\uff5f\045\uff5f\046\uff5f\050\uff5f" +
    "\052\uff5f\053\uff5f\054\uff5f\057\uff5f\060\uff5f\062\uff5f\063" +
    "\uff5f\075\uff5f\001\002\000\004\045\u015a\001\002\000\044" +
    "\005\uff76\013\uff76\014\uff76\015\uff76\016\uff76\030\uff76\045" +
    "\uff76\046\uff76\050\uff76\052\uff76\053\uff76\054\uff76\057\uff76" +
    "\060\uff76\062\uff76\063\uff76\075\uff76\001\002\000\032\013" +
    "\077\014\066\015\016\016\101\030\104\044\u0127\045\u0130" +
    "\046\u0122\050\u012e\057\u012f\062\u0125\075\107\001\002\000" +
    "\004\054\u015d\001\002\000\046\005\uff70\013\uff70\014\uff70" +
    "\015\uff70\016\uff70\030\uff70\044\uff70\045\uff70\046\uff70\050" +
    "\uff70\052\uff70\053\uff70\054\uff70\057\uff70\060\uff70\062\uff70" +
    "\063\uff70\075\uff70\001\002\000\004\060\u015f\001\002\000" +
    "\004\061\u0160\001\002\000\026\003\125\026\113\030\122" +
    "\033\115\034\121\037\126\073\130\074\123\075\116\076" +
    "\114\001\002\000\064\005\uff6b\007\160\013\uff6b\014\uff6b" +
    "\015\uff6b\016\uff6b\030\uff6b\045\uff6b\046\uff6b\050\uff6b\052" +
    "\uff6b\053\uff6b\054\uff6b\057\uff6b\060\uff6b\062\uff6b\063\uff6b" +
    "\065\155\066\152\067\137\070\156\071\140\072\146\075" +
    "\uff6b\101\162\001\002\000\024\007\160\051\u0163\065\155" +
    "\066\152\067\137\070\156\071\140\072\146\101\162\001" +
    "\002\000\030\013\077\014\066\015\016\016\101\030\104" +
    "\045\u011d\046\u010f\050\u011a\057\u011c\062\u0111\075\107\001" +
    "\002\000\010\005\u0168\052\u0167\053\u0165\001\002\000\030" +
    "\013\077\014\066\015\016\016\101\030\104\045\u011d\046" +
    "\u010f\050\u011a\057\u011c\062\u0111\075\107\001\002\000\044" +
    "\005\uff86\013\uff86\014\uff86\015\uff86\016\uff86\030\uff86\045" +
    "\uff86\046\uff86\050\uff86\052\uff86\053\uff86\054\uff86\057\uff86" +
    "\060\uff86\062\uff86\063\uff86\075\uff86\001\002\000\026\003" +
    "\125\026\113\030\122\033\115\034\121\037\126\073\130" +
    "\074\123\075\116\076\114\001\002\000\004\050\u0169\001" +
    "\002\000\044\005\uff83\013\uff83\014\uff83\015\uff83\016\uff83" +
    "\030\uff83\045\uff83\046\uff83\050\uff83\052\uff83\053\uff83\054" +
    "\uff83\057\uff83\060\uff83\062\uff83\063\uff83\075\uff83\001\002" +
    "\000\024\007\160\051\u016b\065\155\066\152\067\137\070" +
    "\156\071\140\072\146\101\162\001\002\000\030\013\077" +
    "\014\066\015\016\016\101\030\104\045\u011d\046\u010f\050" +
    "\u011a\057\u011c\062\u0111\075\107\001\002\000\010\005\u0168" +
    "\052\u0167\053\u0165\001\002\000\044\005\uff85\013\uff85\014" +
    "\uff85\015\uff85\016\uff85\030\uff85\045\uff85\046\uff85\050\uff85" +
    "\052\uff85\053\uff85\054\uff85\057\uff85\060\uff85\062\uff85\063" +
    "\uff85\075\uff85\001\002\000\004\005\u016f\001\002\000\004" +
    "\050\u0170\001\002\000\044\005\uff84\013\uff84\014\uff84\015" +
    "\uff84\016\uff84\030\uff84\045\uff84\046\uff84\050\uff84\052\uff84" +
    "\053\uff84\054\uff84\057\uff84\060\uff84\062\uff84\063\uff84\075" +
    "\uff84\001\002\000\016\005\uffba\052\uffba\053\uffba\054\uffba" +
    "\060\uffba\063\uffba\001\002\000\004\041\u0173\001\002\000" +
    "\024\003\uffc7\005\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\041\uffc7\043\uffc7\075\uffc7\001\002\000\004\075\u0175\001" +
    "\002\000\004\063\u0177\001\002\000\004\005\u0181\001\002" +
    "\000\024\003\125\026\113\030\122\033\115\034\121\037" +
    "\126\074\123\075\116\076\114\001\002\000\046\005\uff60" +
    "\013\077\014\066\015\016\016\101\025\241\026\246\027" +
    "\244\030\104\035\245\036\250\045\u011d\046\u010f\050\u011a" +
    "\057\u011c\062\u0111\063\u017c\075\107\001\002\000\006\005" +
    "\uff60\063\u017c\001\002\000\004\005\uff63\001\002\000\004" +
    "\005\uff65\001\002\000\026\003\125\026\113\030\122\033" +
    "\115\034\121\037\126\053\u017d\074\123\075\116\076\114" +
    "\001\002\000\032\005\uff61\013\077\014\066\015\016\016" +
    "\101\030\104\045\u011d\046\u010f\050\u011a\057\u011c\062\u0111" +
    "\075\107\001\002\000\004\005\uff62\001\002\000\004\005" +
    "\uff66\001\002\000\004\005\uff64\001\002\000\004\062\u0182" +
    "\001\002\000\044\005\uff67\013\uff67\014\uff67\015\uff67\016" +
    "\uff67\030\uff67\045\uff67\046\uff67\050\uff67\052\uff67\053\uff67" +
    "\054\uff67\057\uff67\060\uff67\062\uff67\063\uff67\075\uff67\001" +
    "\002\000\030\013\077\014\066\015\016\016\101\030\104" +
    "\045\u011d\046\u010f\050\u011a\057\u011c\062\u0111\075\107\001" +
    "\002\000\004\054\u0185\001\002\000\044\005\uff72\013\uff72" +
    "\014\uff72\015\uff72\016\uff72\030\uff72\045\uff72\046\uff72\050" +
    "\uff72\052\uff72\053\uff72\054\uff72\057\uff72\060\uff72\062\uff72" +
    "\063\uff72\075\uff72\001\002\000\004\040\u0187\001\002\000" +
    "\030\013\077\014\066\015\016\016\101\030\104\045\u011d" +
    "\046\u010f\050\u011a\057\u011c\062\u0111\075\107\001\002\000" +
    "\004\005\u0189\001\002\000\004\041\u018a\001\002\000\024" +
    "\003\uffc6\005\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\041" +
    "\uffc6\043\uffc6\075\uffc6\001\002\000\012\003\033\011\036" +
    "\040\035\042\037\001\002\000\034\003\042\006\043\013" +
    "\077\014\066\015\016\016\101\030\104\045\u011d\046\u010f" +
    "\050\u011a\057\u011c\062\u0111\075\107\001\002\000\004\005" +
    "\u0193\001\002\000\020\003\050\017\047\020\052\021\046" +
    "\022\051\023\044\024\045\001\002\000\032\013\077\014" +
    "\066\015\016\016\101\030\104\045\111\046\065\050\105" +
    "\057\110\062\067\064\073\075\107\001\002\000\004\005" +
    "\u0191\001\002\000\004\043\u0192\001\002\000\024\003\uffbf" +
    "\005\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\041\uffbf\043" +
    "\uffbf\075\uffbf\001\002\000\004\041\u0194\001\002\000\024" +
    "\003\uffc5\005\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\041" +
    "\uffc5\043\uffc5\075\uffc5\001\002\000\006\003\042\006\043" +
    "\001\002\000\012\003\uffea\006\uffea\010\307\011\u0199\001" +
    "\002\000\006\003\uffeb\006\uffeb\001\002\000\024\003\125" +
    "\026\113\030\122\033\115\034\121\037\126\074\123\075" +
    "\116\076\114\001\002\000\004\075\u019a\001\002\000\010" +
    "\003\uffe8\006\uffe8\011\u0199\001\002\000\006\003\uffe9\006" +
    "\uffe9\001\002\000\006\003\042\006\043\001\002\000\020" +
    "\003\050\017\047\020\052\021\046\022\051\023\044\024" +
    "\045\001\002\000\056\003\ufff8\005\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\030\ufff8\041\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\050\ufff8\052\ufff8\053\ufff8\054\ufff8\057\ufff8" +
    "\060\ufff8\062\ufff8\063\ufff8\064\ufff8\075\ufff8\001\002\000" +
    "\020\003\050\017\047\020\052\021\046\022\051\023\044" +
    "\024\045\001\002\000\060\003\ufff6\005\ufff6\007\u01a1\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\030\ufff6\041\ufff6\043\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\050\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\057\ufff6\060\ufff6\062\ufff6\063\ufff6\064\ufff6\075\ufff6" +
    "\001\002\000\026\003\125\026\113\030\122\033\115\034" +
    "\121\037\126\073\130\074\123\075\116\076\114\001\002" +
    "\000\056\003\ufff9\005\ufff9\013\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\030\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\050\ufff9\052\ufff9\053\ufff9\054\ufff9\057\ufff9\060\ufff9\062" +
    "\ufff9\063\ufff9\064\ufff9\075\ufff9\001\002\000\076\003\ufff7" +
    "\005\ufff7\007\160\013\ufff7\014\ufff7\015\ufff7\016\ufff7\030" +
    "\ufff7\041\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\050\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\057\ufff7\060\ufff7\062\ufff7\063" +
    "\ufff7\064\ufff7\065\155\066\152\067\137\070\156\071\140" +
    "\072\146\075\ufff7\101\162\001\002\000\024\003\uffff\005" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\041\uffff\043\uffff" +
    "\075\uffff\001\002\000\004\004\u01a6\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\007\004\010" +
    "\005\016\010\011\017\023\020\021\021\024\023\017\110" +
    "\025\001\001\000\022\004\u01a3\005\016\010\011\017\023" +
    "\020\021\021\024\023\017\110\025\001\001\000\002\001" +
    "\001\000\004\011\u0194\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\033\001\001\000\004\022\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\040\001\001\000\004\013" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\056\001\001\000\004\013\057\001\001" +
    "\000\004\022\060\001\001\000\002\001\001\000\004\013" +
    "\062\001\001\000\034\005\070\010\011\015\063\017\102" +
    "\025\101\027\105\031\073\034\075\037\067\041\111\044" +
    "\077\047\074\051\071\001\001\000\002\001\001\000\004" +
    "\042\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\123\014\366\015\117\054\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\123\014\126" +
    "\015\117\052\340\054\116\001\001\000\034\005\070\010" +
    "\011\015\063\017\102\025\337\027\105\031\073\034\075" +
    "\037\067\041\111\044\077\047\074\051\071\001\001\000" +
    "\002\001\001\000\034\005\070\010\011\015\063\017\102" +
    "\025\325\027\105\031\073\034\075\037\067\041\111\044" +
    "\077\047\074\051\071\001\001\000\014\007\123\014\126" +
    "\015\117\052\130\054\116\001\001\000\002\001\001\000" +
    "\012\007\123\014\324\015\117\054\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\123\014\302\015\117\054\116\001\001" +
    "\000\002\001\001\000\014\007\123\014\126\015\117\052" +
    "\301\054\116\001\001\000\034\005\135\010\011\015\131" +
    "\017\146\031\144\051\142\064\141\066\156\070\147\074" +
    "\150\076\134\100\140\102\153\001\001\000\002\001\001" +
    "\000\004\042\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\123\014\126\015\117" +
    "\052\230\054\116\001\001\000\014\007\123\014\126\015" +
    "\117\052\227\054\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\224\001\001\000" +
    "\002\001\001\000\014\007\123\014\126\015\117\052\220" +
    "\054\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\123\014\126\015\117\052\217" +
    "\054\116\001\001\000\014\007\123\014\126\015\117\052" +
    "\200\054\116\001\001\000\002\001\001\000\014\007\123" +
    "\014\126\015\117\052\177\054\116\001\001\000\014\007" +
    "\123\014\126\015\117\052\176\054\116\001\001\000\034" +
    "\005\135\010\011\015\131\017\146\031\144\051\142\064" +
    "\175\066\156\070\147\074\150\076\134\100\140\102\153" +
    "\001\001\000\014\007\123\014\126\015\117\052\174\054" +
    "\116\001\001\000\034\005\135\010\011\015\131\017\146" +
    "\031\144\051\142\064\170\066\156\070\147\074\150\076" +
    "\134\100\140\102\153\001\001\000\014\007\123\014\126" +
    "\015\117\052\167\054\116\001\001\000\014\007\123\014" +
    "\126\015\117\052\163\054\116\001\001\000\034\005\135" +
    "\010\011\015\131\017\146\031\144\051\142\064\164\066" +
    "\156\070\147\074\150\076\134\100\140\102\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\123\014\126\015\117\052\173\054\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\135\010\011\015\131\017\146\031\144\051\142\064\202" +
    "\066\156\070\147\074\150\076\134\100\140\102\153\001" +
    "\001\000\004\072\206\001\001\000\034\005\135\010\011" +
    "\015\131\017\146\031\144\051\142\064\214\066\156\070" +
    "\147\074\150\076\134\100\140\102\153\001\001\000\014" +
    "\007\123\014\126\015\117\052\210\054\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\135\010\011\015\131\017\146\031" +
    "\144\051\142\064\212\066\156\070\147\074\150\076\134" +
    "\100\140\102\153\001\001\000\004\072\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\234\001\001" +
    "\000\012\007\123\014\237\015\117\054\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\135\010\011\015\131\017\146\031\144\051\142\064" +
    "\242\066\156\070\147\074\150\076\134\100\140\102\153" +
    "\104\246\106\241\001\001\000\012\007\123\014\261\015" +
    "\117\054\116\001\001\000\002\001\001\000\006\104\260" +
    "\106\257\001\001\000\012\007\123\014\256\015\117\054" +
    "\116\001\001\000\012\007\123\014\255\015\117\054\116" +
    "\001\001\000\012\007\123\014\254\015\117\054\116\001" +
    "\001\000\002\001\001\000\012\007\123\014\253\015\117" +
    "\054\116\001\001\000\012\007\123\014\237\015\117\054" +
    "\116\001\001\000\034\005\135\010\011\015\131\017\146" +
    "\031\144\051\142\064\252\066\156\070\147\074\150\076" +
    "\134\100\140\102\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\135\010\011\015\131\017\146\031\144\051" +
    "\142\064\277\066\156\070\147\074\150\076\134\100\140" +
    "\102\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\274\001\001\000\002\001\001\000\004\107\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\123\014\320\015\117\016\317\054\116\001\001" +
    "\000\014\006\311\007\123\014\312\015\117\054\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\315" +
    "\007\123\014\312\015\117\054\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\123\014" +
    "\320\015\117\016\323\054\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\123\014\126\015\117\052\330\054\116\001\001" +
    "\000\002\001\001\000\014\006\334\007\123\014\312\015" +
    "\117\054\116\001\001\000\012\007\123\014\333\015\117" +
    "\054\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\123\014\336\015\117\054\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\070\010\011\015\063\017\102\025\342\027\105\031\073" +
    "\034\075\037\067\041\111\044\077\047\074\051\071\001" +
    "\001\000\004\035\346\001\001\000\034\005\070\010\011" +
    "\015\063\017\102\025\354\027\105\031\073\034\075\037" +
    "\067\041\111\044\077\047\074\051\071\001\001\000\014" +
    "\007\123\014\126\015\117\052\350\054\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\070\010\011\015\063\017\102\025" +
    "\352\027\105\031\073\034\075\037\067\041\111\044\077" +
    "\047\074\051\071\001\001\000\004\035\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\123\014\362\015\117\054\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\372\001\001" +
    "\000\012\007\123\014\375\015\117\054\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\070\010\011\015\063\017\102\025\377\027\105\031" +
    "\073\034\075\037\067\041\111\044\077\047\074\050\u0100" +
    "\051\071\056\376\001\001\000\002\001\001\000\006\050" +
    "\u0105\056\u0104\001\001\000\002\001\001\000\012\007\123" +
    "\014\375\015\117\054\116\001\001\000\034\005\070\010" +
    "\011\015\063\017\102\025\u0103\027\105\031\073\034\075" +
    "\037\067\041\111\044\077\047\074\051\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\070\010\011\015\063\017\102\025\u0107\027\105\031" +
    "\073\034\075\037\067\041\111\044\077\047\074\051\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u010d" +
    "\001\001\000\032\005\u0111\010\011\015\u010f\017\u0115\024" +
    "\u0113\026\u0117\031\u0112\032\u0116\036\u011a\040\u0114\043\u011d" +
    "\045\u0118\001\001\000\004\042\u0182\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\u0111\010\011\015\u010f\017\u0115" +
    "\024\u0170\026\u0117\031\u0112\032\u0116\036\u011a\040\u0114\043" +
    "\u011d\045\u0118\001\001\000\002\001\001\000\014\007\123" +
    "\014\126\015\117\052\u0161\054\116\001\001\000\002\001" +
    "\001\000\032\005\u0111\010\011\015\u010f\017\u0115\024\u015d" +
    "\026\u0117\031\u0112\032\u0116\036\u011a\040\u0114\043\u011d\045" +
    "\u0118\001\001\000\014\007\123\014\126\015\117\052\u011e" +
    "\054\116\001\001\000\002\001\001\000\032\005\u0125\010" +
    "\011\015\u0120\017\u012a\031\u0127\063\u0123\065\u012c\067\u0129" +
    "\073\u0128\075\u011f\077\u0122\101\u012b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u015a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\u0148\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\u0125\010\011\015\u0120\017\u012a\031\u0127" +
    "\063\u0147\065\u012c\067\u0129\073\u0128\075\u011f\077\u0122\101" +
    "\u012b\001\001\000\014\007\123\014\126\015\117\052\u0138" +
    "\054\116\001\001\000\032\005\u0125\010\011\015\u0120\017" +
    "\u012a\031\u0127\063\u0134\065\u012c\067\u0129\073\u0128\075\u011f" +
    "\077\u0122\101\u012b\001\001\000\014\007\123\014\126\015" +
    "\117\052\u0130\054\116\001\001\000\032\005\u0125\010\011" +
    "\015\u0120\017\u012a\031\u0127\063\u0131\065\u012c\067\u0129\073" +
    "\u0128\075\u011f\077\u0122\101\u012b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\123\014\126\015\117\052\u0137" +
    "\054\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\u0125\010\011\015\u0120\017\u012a\031\u0127\063\u013a" +
    "\065\u012c\067\u0129\073\u0128\075\u011f\077\u0122\101\u012b\001" +
    "\001\000\004\071\u013e\001\001\000\032\005\u0125\010\011" +
    "\015\u0120\017\u012a\031\u0127\063\u0144\065\u012c\067\u0129\073" +
    "\u0128\075\u011f\077\u0122\101\u012b\001\001\000\014\007\123" +
    "\014\126\015\117\052\u0140\054\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\u0125\010\011\015\u0120\017\u012a\031\u0127\063" +
    "\u0142\065\u012c\067\u0129\073\u0128\075\u011f\077\u0122\101\u012b" +
    "\001\001\000\004\071\u0143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\u014b\001\001\000\002\001\001\000\012\007\123\014\u014d" +
    "\015\117\054\116\001\001\000\036\005\u0125\010\011\015" +
    "\u0120\017\u012a\031\u0127\063\u014f\065\u012c\067\u0129\073\u0128" +
    "\075\u011f\077\u0122\101\u012b\103\u0150\105\u014e\001\001\000" +
    "\002\001\001\000\006\103\u0154\105\u0155\001\001\000\002" +
    "\001\001\000\012\007\123\014\u014d\015\117\054\116\001" +
    "\001\000\032\005\u0125\010\011\015\u0120\017\u012a\031\u0127" +
    "\063\u0153\065\u012c\067\u0129\073\u0128\075\u011f\077\u0122\101" +
    "\u012b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\u0125\010\011\015\u0120" +
    "\017\u012a\031\u0127\063\u015b\065\u012c\067\u0129\073\u0128\075" +
    "\u011f\077\u0122\101\u012b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\123\014\126\015\117\052\u0160\054\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\u0111\010\011\015" +
    "\u010f\017\u0115\024\u0163\026\u0117\031\u0112\032\u0116\036\u011a" +
    "\040\u0114\043\u011d\045\u0118\001\001\000\004\033\u0165\001" +
    "\001\000\032\005\u0111\010\011\015\u010f\017\u0115\024\u016d" +
    "\026\u0117\031\u0112\032\u0116\036\u011a\040\u0114\043\u011d\045" +
    "\u0118\001\001\000\002\001\001\000\014\007\123\014\126" +
    "\015\117\052\u0169\054\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\u0111\010\011" +
    "\015\u010f\017\u0115\024\u016b\026\u0117\031\u0112\032\u0116\036" +
    "\u011a\040\u0114\043\u011d\045\u0118\001\001\000\004\033\u016c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u0175\001" +
    "\001\000\002\001\001\000\012\007\123\014\u0177\015\117" +
    "\054\116\001\001\000\036\005\u0111\010\011\015\u010f\017" +
    "\u0115\024\u0178\026\u0117\031\u0112\032\u0116\036\u011a\040\u0114" +
    "\043\u011d\045\u0118\046\u017a\055\u0179\001\001\000\006\046" +
    "\u017e\055\u017f\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\123\014\u0177\015\117\054\116\001\001\000" +
    "\032\005\u0111\010\011\015\u010f\017\u0115\024\u017d\026\u0117" +
    "\031\u0112\032\u0116\036\u011a\040\u0114\043\u011d\045\u0118\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\u0111\010" +
    "\011\015\u010f\017\u0115\024\u0183\026\u0117\031\u0112\032\u0116" +
    "\036\u011a\040\u0114\043\u011d\045\u0118\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\u0111" +
    "\010\011\015\u010f\017\u0115\024\u0187\026\u0117\031\u0112\032" +
    "\u0116\036\u011a\040\u0114\043\u011d\045\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u018b\001\001\000\034\005\u0111\010\011\015\u010f\017\u0115" +
    "\024\u018c\026\u0117\031\u0112\032\u0116\036\u011a\040\u0114\043" +
    "\u011d\045\u0118\061\u018d\001\001\000\002\001\001\000\004" +
    "\013\u018e\001\001\000\034\005\070\010\011\015\063\017" +
    "\102\025\u018f\027\105\031\073\034\075\037\067\041\111" +
    "\044\077\047\074\051\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\u019e\001\001\000\006\012\u0196\062" +
    "\u0197\001\001\000\002\001\001\000\014\006\u019b\007\123" +
    "\014\312\015\117\054\116\001\001\000\002\001\001\000" +
    "\004\012\u019a\001\001\000\002\001\001\000\004\061\u019c" +
    "\001\001\000\004\013\u019d\001\001\000\002\001\001\000" +
    "\004\013\u019f\001\001\000\004\053\u01a1\001\001\000\014" +
    "\007\123\014\126\015\117\052\u01a2\054\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public String contenido = "";
public String nombre = "";
private boolean tienescanner = false;
private int identaciones = 1;

/**Metodo que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
    System.out.println("Error en la linea: " + (s.right + 1) + " Columna: " + (s.left + 1) + ". Identificador " + s.value + " no reconocido");
    Ventana.errores.add("Sintactico-" + s.value + "-" + (s.left+1) + "-" + (s.right+1));
}

/**Metodo al que se llama en el momento que ya no es posible una recuperacion de errores*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error en la linea: " + (s.right + 1) + " Columna: " + (s.left + 1) + ". Identificador " + s.value + " no reconocido");
}

public String getNombre(){
return this.nombre;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {




  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= tmodule tid LSENTENCIAS tend tmodule 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int lsentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lsentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String lsentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
        nombre = id;
        if(tienescanner){
            contenido += "import java.util.Scanner;\npublic class " + id + "{\nstatic Scanner sc = new Scanner(System.in);\n" + lsentencias + "}";
        }else{
            contenido += "public class " + id + "{\n" + lsentencias + "}";
        }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LSENTENCIAS ::= LSENTENCIAS SENTENCIAS 
            {
              String RESULT =null;
		int lsentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lsentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String lsentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = lsentencias + sentencias;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LSENTENCIAS ::= SENTENCIAS 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = sentencias;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAS ::= DECLARACION 
            {
              String RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decl = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //System.out.println("Entro a declaracion: " + decl);
              
                RESULT = decl;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= ASIGNACION 
            {
              String RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //System.out.println("Entro a asignacion: " + asig);
                String temp = "";
                for(int i = 0; i < identaciones; i++){
                    temp += "\t";
                }
                RESULT = asig;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= METODOS 
            {
              String RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String met = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                //System.out.println("Entro a metodos: " + met);
                RESULT = met;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS ::= error 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= ACCESO LISTAVAR AS TIPO AUXDECL 
            {
              String RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String acceso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int listavarleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int listavarright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String listavar = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int tipioleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int tipioright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String tipio = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int auxdeclleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int auxdeclright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String auxdecl = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                String temp = "";
                if(auxdecl.contains("console.r")){
                    System.out.println("tiene readline " + tipio + " " + tipio.compareTo("int") + " " + auxdecl);
                    if(tipio.compareTo("int") == 0){
                        auxdecl = auxdecl.replace("console.readline", "sc.nextInt()");
                    }else if(tipio.compareTo("String") == 0){
                        auxdecl = auxdecl.replace("console.readline", "sc.nextLine()");
                    }
                }
//System.out.println(auxdecl);
                RESULT = acceso + " " + tipio + " " + listavar  + " " + auxdecl + ";\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= ACCESO tid CORCHETEABIERTO LDIMENSIONES AS TIPO 
            {
              String RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String acceso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int corcheteleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int corcheteright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String corchete = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int ldimleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int ldimright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String ldim = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                String temp = "";
                
                String dim[] = ldim.split(",");
                temp += acceso + " " + tipo;
                for(int i = 0; i < dim.length; i++){
                    temp += "[]";
                }
                temp += id;
                temp += " = new " + tipo + "[";
                for(int i = 0; i < dim.length; i++){
                    if(i == dim.length - 1){
                        temp += dim[i];
                    }else{
                        temp += dim[i] + "][";
                    }
                }
                RESULT = temp + ";\n";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AUXDECL ::= tigual CONDICION 
            {
              String RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String con = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = "=" + con + "";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUXDECL",41, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AUXDECL ::= 
            {
              String RESULT =null;
		
                RESULT = "";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUXDECL",41, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AS ::= tas 
            {
              String RESULT =null;
		
            RESULT = "as";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AS",47, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AS ::= error 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AS",47, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CORCHETEABIERTO ::= tcorabierto 
            {
              String RESULT =null;
		
            RESULT = "[";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CORCHETEABIERTO",48, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LDIMENSIONES ::= EXP tcoma LDIMENSIONES 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int ldimleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int ldimright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String ldim = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = exp + "," + ldim;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LDIMENSIONES",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LDIMENSIONES ::= EXP tcorcerrar 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                RESULT = exp + "]";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LDIMENSIONES",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MATRIZ ::= tid CORCHETEABIERTO LDIMENSIONES 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int corcheteleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int corcheteright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String corchete = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int ldimleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int ldimright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String ldim = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                String temp = "";
                String dim[] = ldim.split(",");
                for(int i = 0; i < dim.length; i++){
                    if(i == dim.length -1){
                        temp += dim[i];
                    }else{
                        temp += dim[i] + "][";
                    }
                }
                RESULT = id  + "[" + temp;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MATRIZ",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ACCESO ::= tpublic 
            {
              String RESULT =null;
		
            RESULT = "public";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ACCESO ::= tprivate 
            {
              String RESULT =null;
		
            RESULT = "private";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ACCESO ::= tdim 
            {
              String RESULT =null;
		
            RESULT = "private";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ACCESO ::= tstatic 
            {
              String RESULT =null;
		
            RESULT = "static";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTAVAR ::= tid VAR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = id + " " + var;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVAR",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTAVAR ::= tid 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = id;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVAR",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VAR ::= tcoma tid VAR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            RESULT = "," + id + " " + var;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VAR",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VAR ::= tcoma tid 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            RESULT = "," + id;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VAR",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= tboolean 
            {
              String RESULT =null;
		
            RESULT = "boolean";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO ::= tchar 
            {
              String RESULT =null;
		RESULT = "char";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= tdouble 
            {
              String RESULT =null;
		RESULT = "double";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO ::= tinteger 
            {
              String RESULT =null;
		RESULT = "int";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO ::= tlong 
            {
              String RESULT =null;
		RESULT = "long";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= tstring 
            {
              String RESULT =null;
		RESULT = "String";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO ::= error 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= OPERACION 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = op;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= EXP tconcate EXP 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = exp1 + "+" + exp2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= EXP tmas EXP 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = exp1 + "+" + exp2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= EXP tmenos EXP 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = exp1 + "-" + exp2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP tpor EXP 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = exp1 + "*" + exp2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= EXP tdiv EXP 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = exp1 + "/" + exp2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= tparabrir EXP tparcerrar 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = "(" + exp1 + ")";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= tmenos EXP 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "-" + exp1;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION ::= tnumero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = num;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION ::= tcadena 
            {
              String RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = cade;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= tid 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = id;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= ttrue 
            {
              String RESULT =null;
		RESULT = "true";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION ::= tfalse 
            {
              String RESULT =null;
		RESULT = "false";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= MATRIZ 
            {
              String RESULT =null;
		int matrizleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int matrizright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String matriz = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = matriz;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION ::= LLAMADA 
            {
              String RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String llamada = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = llamada;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION ::= tconsole tpunto treadline 
            {
              String RESULT =null;
		tienescanner = true;RESULT = "console.readline";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION ::= error 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",42, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LLAMADA ::= tid tparabrir PARAMETROSLLAMADA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id + "(" + parametros;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARAMETROSLLAMADA ::= EXP tcoma PARAMETROSLLAMADA 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = exp + "," + parametros;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSLLAMADA",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAMETROSLLAMADA ::= EXP tparcerrar 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = exp + ")";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSLLAMADA",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETROSLLAMADA ::= tparcerrar 
            {
              String RESULT =null;
		RESULT = ")";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSLLAMADA",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION ::= tid tigual EXP 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = id +"=" + exp + ";\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION ::= tid tcorabierto LDIMENSIONES tigual EXP 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int ldimenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int ldimenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String ldimen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                String temp = "";
                String dim[] = ldimen.split(",");
                for(int i = 0; i < dim.length; i++){
                    if(i == dim.length -1){
                        temp += dim[i];
                    }else{
                        temp += dim[i] + "][";
                    }
                }
                RESULT = id + "[" + temp + "=" + exp + ";\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODOS ::= METODO 
            {
              String RESULT =null;
		int metoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int metoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String meto = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            RESULT = meto;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODOS ::= FUNCIONES 
            {
              String RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String fun = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
            RESULT = fun;
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODO ::= ACCESOMET tsub tid tparabrir PARAMETROS LSENTENCIASM tend tsub 
            {
              String RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String acceso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
            if(id == "Main"){
                RESULT = "public static void  main(String[] args){\n" + sentencias + "}\n";
            }else{
                RESULT = acceso + " void " + id + "(" + parametros + "{\n" + sentencias + "}\n";
            }
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // METODO ::= ACCESOMET tsub tmain tparabrir tparcerrar LSENTENCIASM tend tsub 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "public static void  main(String[] args){\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // METODO ::= error tparabrir PARAMETROS LSENTENCIASM tend tsub 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROS ::= tbyval tid AS TIPO PARAMETROS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = tipo + " " + id + parametros;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROS ::= tcoma tbyval tid AS TIPO PARAMETROS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = ", " + tipo + " " + id + parametros;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROS ::= tparcerrar 
            {
              String RESULT =null;
		RESULT = ")";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROS ::= error PARAMETROS 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCIONES ::= ACCESOMET tfunction tid tparabrir PARAMETROS tas TIPO LSENTENCIASF tend tfunction 
            {
              String RESULT =null;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).right;
		String acceso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String parametros = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = acceso + " " + tipo + " " + id + "(" + parametros + "{\n" +sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCIONES ::= error tparabrir PARAMETROS AS TIPO LSENTENCIASF tend tfunction 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACCESOMET ::= tpublic 
            {
              String RESULT =null;
		RESULT = "public";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOMET",70, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCESOMET ::= tprivate 
            {
              String RESULT =null;
		RESULT = "private";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOMET",70, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACCESOMET ::= tstatic 
            {
              String RESULT =null;
		RESULT = "static";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOMET",70, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACCESOMET ::= 
            {
              String RESULT =null;
		RESULT = "public";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOMET",70, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LSENTENCIASM ::= SENTENCIASM LSENTENCIASM 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int lsentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lsentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String lsentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = sentencias + lsentencias;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIASM",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LSENTENCIASM ::= SENTENCIASM 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = sentencias;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIASM",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LSENTENCIASF ::= SENTENCIASF LSENTENCIASF 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int lsentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lsentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String lsentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = sentencias + lsentencias;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIASF",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LSENTENCIASF ::= SENTENCIASF 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = sentencias;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIASF",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LSENTENCIASCICLOSM ::= SENTENCIASCICLOSM LSENTENCIASCICLOSM 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int lsentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lsentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String lsentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = sentencias + lsentencias;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCICLOSM",49, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LSENTENCIASCICLOSM ::= SENTENCIASCICLOSM 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = sentencias;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCICLOSM",49, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LSENTENCIASCICLOSF ::= SENTENCIASCICLOSF LSENTENCIASCICLOSF 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int lsentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lsentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String lsentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = sentencias + lsentencias;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCICLOSF",50, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LSENTENCIASCICLOSF ::= SENTENCIASCICLOSF 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = sentencias;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LSENTENCIASCICLOSF",50, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIASM ::= IFM 
            {
              String RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = si + "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASM",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIASM ::= WHILEM 
            {
              String RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String mientras = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = mientras + "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASM",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIASM ::= FORM 
            {
              String RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = para + "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASM",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIASM ::= DOM 
            {
              String RESULT =null;
		int hacerleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int hacerright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String hacer = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = hacer + "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASM",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIASM ::= SWITCHM 
            {
              String RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String casos = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = casos + "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASM",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIASM ::= DECLARACION 
            {
              String RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decl = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = decl;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASM",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIASM ::= ASIGNACION 
            {
              String RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = asig;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASM",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIASM ::= LLAMADA 
            {
              String RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String llamada = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = llamada + ";\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASM",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIASM ::= IMPRIMIR 
            {
              String RESULT =null;
		int imprimirleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int imprimirright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String imprimir = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = imprimir;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASM",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIASCICLOSM ::= IFCICLOSM 
            {
              String RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = si + "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSM",51, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIASCICLOSM ::= WHILECICLOSM 
            {
              String RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String mientras = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = mientras+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSM",51, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIASCICLOSM ::= FORCICLOSM 
            {
              String RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = para+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSM",51, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIASCICLOSM ::= DOCICLOSM 
            {
              String RESULT =null;
		int hacerleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int hacerright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String hacer = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = hacer+ "\n"; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSM",51, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIASCICLOSM ::= SWITCHCICLOSM 
            {
              String RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String casos = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = casos+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSM",51, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIASCICLOSM ::= DECLARACION 
            {
              String RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decl = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = decl+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSM",51, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIASCICLOSM ::= ASIGNACION 
            {
              String RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = asig+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSM",51, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIASCICLOSM ::= LLAMADA 
            {
              String RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String llamada = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = llamada + ";\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSM",51, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIASCICLOSM ::= IMPRIMIR 
            {
              String RESULT =null;
		int imprimirleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int imprimirright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String imprimir = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = imprimir+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSM",51, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIASCICLOSM ::= texit CERRARCICLO 
            {
              String RESULT =null;
		RESULT = "break;\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSM",51, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIASF ::= IF 
            {
              String RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = si+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASF",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIASF ::= WHILE 
            {
              String RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String mientras = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = mientras+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASF",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIASF ::= FOR 
            {
              String RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = para+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASF",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIASF ::= DO 
            {
              String RESULT =null;
		int hacerleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int hacerright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String hacer = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = hacer+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASF",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIASF ::= SWITCH 
            {
              String RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String casos = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = casos+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASF",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIASF ::= DECLARACION 
            {
              String RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decl = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = decl+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASF",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIASF ::= ASIGNACION 
            {
              String RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = asig+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASF",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIASF ::= RETURN 
            {
              String RESULT =null;
		int retornaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int retornaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String retorna = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = retorna+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASF",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIASF ::= LLAMADA 
            {
              String RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String llamada = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = llamada + ";\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASF",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIASF ::= IMPRIMIR 
            {
              String RESULT =null;
		int imprimirleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int imprimirright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String imprimir = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = imprimir+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASF",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIASCICLOSF ::= IFCICLOSF 
            {
              String RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = si+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSF",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIASCICLOSF ::= WHILECICLOSF 
            {
              String RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String mientras = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = mientras+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSF",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIASCICLOSF ::= FORCICLOSF 
            {
              String RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = para+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSF",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIASCICLOSF ::= DOCICLOSF 
            {
              String RESULT =null;
		int hacerleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int hacerright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String hacer = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = hacer+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSF",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIASCICLOSF ::= SWITCHCICLOSF 
            {
              String RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String casos = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = casos+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSF",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIASCICLOSF ::= DECLARACION 
            {
              String RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decl = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = decl+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSF",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIASCICLOSF ::= ASIGNACION 
            {
              String RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = asig+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSF",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIASCICLOSF ::= RETURN 
            {
              String RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = ret+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSF",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIASCICLOSF ::= LLAMADA 
            {
              String RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String llamada = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = llamada + ";\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSF",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIASCICLOSF ::= IMPRIMIR 
            {
              String RESULT =null;
		int imprimirleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int imprimirright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String imprimir = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = imprimir+ "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSF",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIASCICLOSF ::= texit CERRARCICLO 
            {
              String RESULT =null;
		RESULT = "break;\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIASCICLOSF",52, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CERRARCICLO ::= twhile 
            {
              String RESULT =null;
		RESULT = "mientras";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CERRARCICLO",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CERRARCICLO ::= tfor 
            {
              String RESULT =null;
		RESULT = "para";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CERRARCICLO",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CERRARCICLO ::= error 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CERRARCICLO",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IMPRIMIR ::= tconsole tpunto twriteline tparabrir EXP tparcerrar 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
            RESULT = "System.out.println(" + op + ");\n";
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IFM ::= tif CONDICION tthen LSENTENCIASM ELSEM 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "if(" + cond + "){\n" + sentencias + "}\n" + sino;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IFM",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ELSEM ::= telseif CONDICION tthen LSENTENCIASM ELSEM 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "else if(" + cond + "){\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSEM",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ELSEM ::= telse LSENTENCIASM tend tif 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "else{\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSEM",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ELSEM ::= tend tif 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSEM",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IF ::= tif CONDICION tthen LSENTENCIASF ELSEF 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "if(" + cond + "){\n" + sentencias + "}\n" + sino;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF",26, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ELSEF ::= telseif CONDICION tthen LSENTENCIASF ELSEF 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "else if{" + cond + "){\n" + sentencias + "}\n" + sino;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSEF",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ELSEF ::= telse LSENTENCIASF tend tif 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "else{\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSEF",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ELSEF ::= tend tif 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSEF",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // IFCICLOSM ::= tif CONDICION tthen LSENTENCIASCICLOSM ELSECICLOSM 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "if(" + cond + "){\n" + sentencias + "}\n" + sino;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IFCICLOSM",53, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ELSECICLOSM ::= telseif CONDICION tthen LSENTENCIASCICLOSM ELSECICLOSM 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "else if(" + cond + "){\n" + sentencias + "}\n" + sino;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSECICLOSM",55, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ELSECICLOSM ::= telse LSENTENCIASCICLOSM tend tif 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "else{\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSECICLOSM",55, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ELSECICLOSM ::= tend tif 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSECICLOSM",55, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IFCICLOSF ::= tif CONDICION tthen LSENTENCIASCICLOSF ELSECICLOSF 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "if(" + cond +"){\n" + sentencias + "}\n" + sino;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IFCICLOSF",54, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ELSECICLOSF ::= telseif CONDICION tthen LSENTENCIASCICLOSF ELSECICLOSF 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sino = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "else if(" + cond + "){\n" + sentencias + "}\n" + sino;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSECICLOSF",56, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ELSECICLOSF ::= telse LSENTENCIASCICLOSF tend tif 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "else{\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSECICLOSF",56, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ELSECICLOSF ::= tend tif 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ELSECICLOSF",56, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // WHILEM ::= twhile CONDICION LSENTENCIASCICLOSM tend twhile 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "while(" + cond + "){\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("WHILEM",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // WHILE ::= twhile CONDICION LSENTENCIASCICLOSF tend twhile 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "while(" + cond + "){\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // WHILECICLOSM ::= twhile CONDICION LSENTENCIASCICLOSM tend twhile 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "while(" + cond + "){\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("WHILECICLOSM",57, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // WHILECICLOSF ::= twhile CONDICION LSENTENCIASCICLOSF tend twhile 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "while{" + cond + "){\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("WHILECICLOSF",58, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // FORM ::= tfor AUMENTOFOR LSENTENCIASM tnext 
            {
              String RESULT =null;
		int aumentoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aumentoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String aumento = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = "for(" + aumento +"){\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORM",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FOR ::= tfor AUMENTOFOR LSENTENCIASF tnext 
            {
              String RESULT =null;
		int aumentoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aumentoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String aumento = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = "for(" + aumento + "){\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FOR",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // FORCICLOSM ::= tfor AUMENTOFOR LSENTENCIASCICLOSM tnext 
            {
              String RESULT =null;
		int aumentoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aumentoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String aumento = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = "for(" + aumento +"){\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORCICLOSM",59, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // FORCICLOSF ::= tfor AUMENTOFOR LSENTENCIASCICLOSF tnext 
            {
              String RESULT =null;
		int aumentoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int aumentoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String aumento = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = "for(" + aumento + "){\n" + sentencias + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FORCICLOSF",60, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AUMENTOFOR ::= tid tas tinteger tigual NUM tto NUM tstep NUM 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String exp3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                if(Integer.parseInt(exp2) > Integer.parseInt(exp1)){
                    RESULT = "int " + id + " = " + exp1 + "; " + id + " < " + exp2 +"; " + id + " = " + id + " + (" + exp3 + ")";
                }else if(Integer.parseInt(exp2) < Integer.parseInt(exp1)){
                    RESULT = "int " + id + " = " + exp1 + "; " + id + " > " + exp2 + "; " + id + " = " + id + " + (" + exp3 + ")"; 
                }else{
                    RESULT = "int " + id + " = " + exp1 + "; " + id + " < " + exp2 + "; " + id + " = " + id + " + (" + exp3 + ")";
                }
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("AUMENTOFOR",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NUM ::= tmenos tnumero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "-" + num;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NUM",69, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NUM ::= tnumero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = num;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NUM",69, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DOM ::= tdo LSENTENCIASM tloop tuntil CONDICION 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "do{\n" + sentencias + "}while(" + cond + ");\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DOM",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DO ::= tdo LSENTENCIASF tloop tuntil CONDICION 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "do{\n" + sentencias + "}while(" + cond + ");\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DO",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DOCICLOSM ::= tdo LSENTENCIASCICLOSM tloop tuntil CONDICION 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "do{\n" + sentencias + "}while(" + cond + ");\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DOCICLOSM",61, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DOCICLOSF ::= tdo LSENTENCIASCICLOSF tloop tuntil CONDICION 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "do{\n" + sentencias + "}while(" + cond + ");\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DOCICLOSF",62, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SWITCHM ::= tselect tcase tid CASEM tend tselect 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "switch(" + id + "){\n" + caso + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHM",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CASEM ::= tcase EXP LSENTENCIASM CASEM 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\n" + sentencias + "break;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEM",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CASEM ::= tcase EXP CASEM 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\nbreak;" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEM",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CASEM ::= tcase EXP LSENTENCIASM CASEFINALM 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casefleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casefright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String casef = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\n" + sentencias + "break;\n" + casef;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEM",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CASEM ::= tcase EXP CASEFINALM 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casefleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casefright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String casef = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\nbreak;\n" + casef;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEM",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CASEFINALM ::= tcase telse LSENTENCIASM 
            {
              String RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sentencias = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "default:\n" + sentencias +"\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINALM",43, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CASEFINALM ::= tcase telse 
            {
              String RESULT =null;
		RESULT = "default\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINALM",43, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CASEFINALM ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINALM",43, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SWITCHCICLOSM ::= tselect tcase tid CASECICLOSM tend tselect 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "switch(" + id + "){\n" + caso + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHCICLOSM",63, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CASECICLOSM ::= tcase EXP LSENTENCIASCICLOSM CASECICLOSM 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\n" + sent + "break;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASECICLOSM",65, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CASECICLOSM ::= tcase EXP CASECICLOSM 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\nbreak;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASECICLOSM",65, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CASECICLOSM ::= tcase EXP LSENTENCIASCICLOSM CASEFINALCICLOSM 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\n" + sent + "break;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASECICLOSM",65, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CASECICLOSM ::= tcase EXP CASEFINALCICLOSM 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\nbreak;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASECICLOSM",65, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CASEFINALCICLOSM ::= tcase telse LSENTENCIASCICLOSM 
            {
              String RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "default:\n" + sent + "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINALCICLOSM",67, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CASEFINALCICLOSM ::= tcase telse 
            {
              String RESULT =null;
		RESULT = "default:\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINALCICLOSM",67, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CASEFINALCICLOSM ::= 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINALCICLOSM",67, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SWITCH ::= tselect tcase tid CASE tend tselect 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "switch(" + id + "){\n" + caso + "}\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CASE ::= tcase EXP LSENTENCIASF CASE 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\n" + sent + "break;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASE",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CASE ::= tcase EXP CASE 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\nbreak;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASE",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CASE ::= tcase EXP LSENTENCIASF CASEFINAL 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\n" + sent + "break;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASE",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CASE ::= tcase EXP CASEFINAL 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\nbreak;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASE",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CASEFINAL ::= tcase telse LSENTENCIASF 
            {
              String RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "default:\n" + sent + "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINAL",44, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CASEFINAL ::= tcase telse 
            {
              String RESULT =null;
		RESULT = "default:\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINAL",44, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CASEFINAL ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINAL",44, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SWITCHCICLOSF ::= tselect tcase tid CASECICLOSF tend tselect 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = "switch(" + id + "){\n" + caso + "}";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SWITCHCICLOSF",64, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CASECICLOSF ::= tcase EXP LSENTENCIASCICLOSF CASECICLOSF 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\n" + sent + "break;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASECICLOSF",66, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CASECICLOSF ::= tcase EXP CASECICLOSF 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\nbrak;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASECICLOSF",66, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CASECICLOSF ::= tcase EXP LSENTENCIASCICLOSF CASEFINALCICLOSF 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\n" + sent + "break;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASECICLOSF",66, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CASECICLOSF ::= tcase EXP CASEFINALCICLOSF 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "case " + exp + ":\nbreak;\n" + caso;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASECICLOSF",66, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CASEFINALCICLOSF ::= tcase telse LSENTENCIASCICLOSF 
            {
              String RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "default:\n" + sent + "\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINALCICLOSF",68, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CASEFINALCICLOSF ::= tcase telse 
            {
              String RESULT =null;
		RESULT = "default:\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINALCICLOSF",68, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CASEFINALCICLOSF ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CASEFINALCICLOSF",68, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // RETURN ::= treturn EXP 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "return " + exp + ";\n";
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RETURN",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CONDICION ::= CONDICION tmenor CONDICION 
            {
              String RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String cond1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = cond1 + "<" + cond2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CONDICION ::= CONDICION tmenorigual CONDICION 
            {
              String RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String cond1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = cond1 + "<=" + cond2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CONDICION ::= CONDICION tmayor CONDICION 
            {
              String RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String cond1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = cond1 + ">" + cond2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CONDICION ::= CONDICION tmayorigual CONDICION 
            {
              String RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String cond1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = cond1 + ">=" + cond2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CONDICION ::= CONDICION tigual CONDICION 
            {
              String RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String cond1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = cond1 + "==" + cond2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CONDICION ::= CONDICION tdiferente CONDICION 
            {
              String RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String cond1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = cond1 + "!=" + cond2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CONDICION ::= CONDICION tand CONDICION 
            {
              String RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String cond1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = cond1 + "&&" + cond2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CONDICION ::= CONDICION tor CONDICION 
            {
              String RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String cond1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = cond1 + "||" + cond2;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CONDICION ::= tnot CONDICION 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = "!" + cond;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // CONDICION ::= EXP 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = exp;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
